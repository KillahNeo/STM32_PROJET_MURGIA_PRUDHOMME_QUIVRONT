
NUCLEO-L152RE_HTS221_DATA_LOGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e4  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007228  08007228  00008228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075cc  080075cc  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075cc  080075cc  000085cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d4  080075d4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d4  080075d4  000085d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080075dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001d4  080077b0  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080077b0  00009448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b487  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad5  00000000  00000000  00014684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00016160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  00016c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d32  00000000  00000000  00017531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cceb  00000000  00000000  0002e263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af15  00000000  00000000  0003af4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  000c5ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c9f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800720c 	.word	0x0800720c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	0800720c 	.word	0x0800720c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b98c 	b.w	8001390 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9d08      	ldr	r5, [sp, #32]
 8001096:	468e      	mov	lr, r1
 8001098:	4604      	mov	r4, r0
 800109a:	4688      	mov	r8, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14a      	bne.n	8001136 <__udivmoddi4+0xa6>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4617      	mov	r7, r2
 80010a4:	d962      	bls.n	800116c <__udivmoddi4+0xdc>
 80010a6:	fab2 f682 	clz	r6, r2
 80010aa:	b14e      	cbz	r6, 80010c0 <__udivmoddi4+0x30>
 80010ac:	f1c6 0320 	rsb	r3, r6, #32
 80010b0:	fa01 f806 	lsl.w	r8, r1, r6
 80010b4:	fa20 f303 	lsr.w	r3, r0, r3
 80010b8:	40b7      	lsls	r7, r6
 80010ba:	ea43 0808 	orr.w	r8, r3, r8
 80010be:	40b4      	lsls	r4, r6
 80010c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010c4:	fbb8 f1fe 	udiv	r1, r8, lr
 80010c8:	fa1f fc87 	uxth.w	ip, r7
 80010cc:	fb0e 8811 	mls	r8, lr, r1, r8
 80010d0:	fb01 f20c 	mul.w	r2, r1, ip
 80010d4:	0c23      	lsrs	r3, r4, #16
 80010d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010da:	429a      	cmp	r2, r3
 80010dc:	d909      	bls.n	80010f2 <__udivmoddi4+0x62>
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	f101 30ff 	add.w	r0, r1, #4294967295
 80010e4:	f080 80eb 	bcs.w	80012be <__udivmoddi4+0x22e>
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f240 80e8 	bls.w	80012be <__udivmoddi4+0x22e>
 80010ee:	3902      	subs	r1, #2
 80010f0:	443b      	add	r3, r7
 80010f2:	1a9a      	subs	r2, r3, r2
 80010f4:	fbb2 f0fe 	udiv	r0, r2, lr
 80010f8:	fb0e 2210 	mls	r2, lr, r0, r2
 80010fc:	fb00 fc0c 	mul.w	ip, r0, ip
 8001100:	b2a3      	uxth	r3, r4
 8001102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001106:	459c      	cmp	ip, r3
 8001108:	d909      	bls.n	800111e <__udivmoddi4+0x8e>
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001110:	f080 80d7 	bcs.w	80012c2 <__udivmoddi4+0x232>
 8001114:	459c      	cmp	ip, r3
 8001116:	f240 80d4 	bls.w	80012c2 <__udivmoddi4+0x232>
 800111a:	443b      	add	r3, r7
 800111c:	3802      	subs	r0, #2
 800111e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001122:	2100      	movs	r1, #0
 8001124:	eba3 030c 	sub.w	r3, r3, ip
 8001128:	b11d      	cbz	r5, 8001132 <__udivmoddi4+0xa2>
 800112a:	2200      	movs	r2, #0
 800112c:	40f3      	lsrs	r3, r6
 800112e:	e9c5 3200 	strd	r3, r2, [r5]
 8001132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001136:	428b      	cmp	r3, r1
 8001138:	d905      	bls.n	8001146 <__udivmoddi4+0xb6>
 800113a:	b10d      	cbz	r5, 8001140 <__udivmoddi4+0xb0>
 800113c:	e9c5 0100 	strd	r0, r1, [r5]
 8001140:	2100      	movs	r1, #0
 8001142:	4608      	mov	r0, r1
 8001144:	e7f5      	b.n	8001132 <__udivmoddi4+0xa2>
 8001146:	fab3 f183 	clz	r1, r3
 800114a:	2900      	cmp	r1, #0
 800114c:	d146      	bne.n	80011dc <__udivmoddi4+0x14c>
 800114e:	4573      	cmp	r3, lr
 8001150:	d302      	bcc.n	8001158 <__udivmoddi4+0xc8>
 8001152:	4282      	cmp	r2, r0
 8001154:	f200 8108 	bhi.w	8001368 <__udivmoddi4+0x2d8>
 8001158:	1a84      	subs	r4, r0, r2
 800115a:	eb6e 0203 	sbc.w	r2, lr, r3
 800115e:	2001      	movs	r0, #1
 8001160:	4690      	mov	r8, r2
 8001162:	2d00      	cmp	r5, #0
 8001164:	d0e5      	beq.n	8001132 <__udivmoddi4+0xa2>
 8001166:	e9c5 4800 	strd	r4, r8, [r5]
 800116a:	e7e2      	b.n	8001132 <__udivmoddi4+0xa2>
 800116c:	2a00      	cmp	r2, #0
 800116e:	f000 8091 	beq.w	8001294 <__udivmoddi4+0x204>
 8001172:	fab2 f682 	clz	r6, r2
 8001176:	2e00      	cmp	r6, #0
 8001178:	f040 80a5 	bne.w	80012c6 <__udivmoddi4+0x236>
 800117c:	1a8a      	subs	r2, r1, r2
 800117e:	2101      	movs	r1, #1
 8001180:	0c03      	lsrs	r3, r0, #16
 8001182:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001186:	b280      	uxth	r0, r0
 8001188:	b2bc      	uxth	r4, r7
 800118a:	fbb2 fcfe 	udiv	ip, r2, lr
 800118e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001196:	fb04 f20c 	mul.w	r2, r4, ip
 800119a:	429a      	cmp	r2, r3
 800119c:	d907      	bls.n	80011ae <__udivmoddi4+0x11e>
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011a4:	d202      	bcs.n	80011ac <__udivmoddi4+0x11c>
 80011a6:	429a      	cmp	r2, r3
 80011a8:	f200 80e3 	bhi.w	8001372 <__udivmoddi4+0x2e2>
 80011ac:	46c4      	mov	ip, r8
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80011b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80011b8:	fb02 f404 	mul.w	r4, r2, r4
 80011bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011c0:	429c      	cmp	r4, r3
 80011c2:	d907      	bls.n	80011d4 <__udivmoddi4+0x144>
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ca:	d202      	bcs.n	80011d2 <__udivmoddi4+0x142>
 80011cc:	429c      	cmp	r4, r3
 80011ce:	f200 80cd 	bhi.w	800136c <__udivmoddi4+0x2dc>
 80011d2:	4602      	mov	r2, r0
 80011d4:	1b1b      	subs	r3, r3, r4
 80011d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011da:	e7a5      	b.n	8001128 <__udivmoddi4+0x98>
 80011dc:	f1c1 0620 	rsb	r6, r1, #32
 80011e0:	408b      	lsls	r3, r1
 80011e2:	fa22 f706 	lsr.w	r7, r2, r6
 80011e6:	431f      	orrs	r7, r3
 80011e8:	fa2e fa06 	lsr.w	sl, lr, r6
 80011ec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80011f0:	fbba f8f9 	udiv	r8, sl, r9
 80011f4:	fa0e fe01 	lsl.w	lr, lr, r1
 80011f8:	fa20 f306 	lsr.w	r3, r0, r6
 80011fc:	fb09 aa18 	mls	sl, r9, r8, sl
 8001200:	fa1f fc87 	uxth.w	ip, r7
 8001204:	ea43 030e 	orr.w	r3, r3, lr
 8001208:	fa00 fe01 	lsl.w	lr, r0, r1
 800120c:	fb08 f00c 	mul.w	r0, r8, ip
 8001210:	0c1c      	lsrs	r4, r3, #16
 8001212:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001216:	42a0      	cmp	r0, r4
 8001218:	fa02 f201 	lsl.w	r2, r2, r1
 800121c:	d90a      	bls.n	8001234 <__udivmoddi4+0x1a4>
 800121e:	193c      	adds	r4, r7, r4
 8001220:	f108 3aff 	add.w	sl, r8, #4294967295
 8001224:	f080 809e 	bcs.w	8001364 <__udivmoddi4+0x2d4>
 8001228:	42a0      	cmp	r0, r4
 800122a:	f240 809b 	bls.w	8001364 <__udivmoddi4+0x2d4>
 800122e:	f1a8 0802 	sub.w	r8, r8, #2
 8001232:	443c      	add	r4, r7
 8001234:	1a24      	subs	r4, r4, r0
 8001236:	b298      	uxth	r0, r3
 8001238:	fbb4 f3f9 	udiv	r3, r4, r9
 800123c:	fb09 4413 	mls	r4, r9, r3, r4
 8001240:	fb03 fc0c 	mul.w	ip, r3, ip
 8001244:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001248:	45a4      	cmp	ip, r4
 800124a:	d909      	bls.n	8001260 <__udivmoddi4+0x1d0>
 800124c:	193c      	adds	r4, r7, r4
 800124e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001252:	f080 8085 	bcs.w	8001360 <__udivmoddi4+0x2d0>
 8001256:	45a4      	cmp	ip, r4
 8001258:	f240 8082 	bls.w	8001360 <__udivmoddi4+0x2d0>
 800125c:	3b02      	subs	r3, #2
 800125e:	443c      	add	r4, r7
 8001260:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001264:	eba4 040c 	sub.w	r4, r4, ip
 8001268:	fba0 8c02 	umull	r8, ip, r0, r2
 800126c:	4564      	cmp	r4, ip
 800126e:	4643      	mov	r3, r8
 8001270:	46e1      	mov	r9, ip
 8001272:	d364      	bcc.n	800133e <__udivmoddi4+0x2ae>
 8001274:	d061      	beq.n	800133a <__udivmoddi4+0x2aa>
 8001276:	b15d      	cbz	r5, 8001290 <__udivmoddi4+0x200>
 8001278:	ebbe 0203 	subs.w	r2, lr, r3
 800127c:	eb64 0409 	sbc.w	r4, r4, r9
 8001280:	fa04 f606 	lsl.w	r6, r4, r6
 8001284:	fa22 f301 	lsr.w	r3, r2, r1
 8001288:	431e      	orrs	r6, r3
 800128a:	40cc      	lsrs	r4, r1
 800128c:	e9c5 6400 	strd	r6, r4, [r5]
 8001290:	2100      	movs	r1, #0
 8001292:	e74e      	b.n	8001132 <__udivmoddi4+0xa2>
 8001294:	fbb1 fcf2 	udiv	ip, r1, r2
 8001298:	0c01      	lsrs	r1, r0, #16
 800129a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800129e:	b280      	uxth	r0, r0
 80012a0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012a4:	463b      	mov	r3, r7
 80012a6:	fbb1 f1f7 	udiv	r1, r1, r7
 80012aa:	4638      	mov	r0, r7
 80012ac:	463c      	mov	r4, r7
 80012ae:	46b8      	mov	r8, r7
 80012b0:	46be      	mov	lr, r7
 80012b2:	2620      	movs	r6, #32
 80012b4:	eba2 0208 	sub.w	r2, r2, r8
 80012b8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012bc:	e765      	b.n	800118a <__udivmoddi4+0xfa>
 80012be:	4601      	mov	r1, r0
 80012c0:	e717      	b.n	80010f2 <__udivmoddi4+0x62>
 80012c2:	4610      	mov	r0, r2
 80012c4:	e72b      	b.n	800111e <__udivmoddi4+0x8e>
 80012c6:	f1c6 0120 	rsb	r1, r6, #32
 80012ca:	fa2e fc01 	lsr.w	ip, lr, r1
 80012ce:	40b7      	lsls	r7, r6
 80012d0:	fa0e fe06 	lsl.w	lr, lr, r6
 80012d4:	fa20 f101 	lsr.w	r1, r0, r1
 80012d8:	ea41 010e 	orr.w	r1, r1, lr
 80012dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012e0:	fbbc f8fe 	udiv	r8, ip, lr
 80012e4:	b2bc      	uxth	r4, r7
 80012e6:	fb0e cc18 	mls	ip, lr, r8, ip
 80012ea:	fb08 f904 	mul.w	r9, r8, r4
 80012ee:	0c0a      	lsrs	r2, r1, #16
 80012f0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80012f4:	40b0      	lsls	r0, r6
 80012f6:	4591      	cmp	r9, r2
 80012f8:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80012fc:	b280      	uxth	r0, r0
 80012fe:	d93e      	bls.n	800137e <__udivmoddi4+0x2ee>
 8001300:	18ba      	adds	r2, r7, r2
 8001302:	f108 3cff 	add.w	ip, r8, #4294967295
 8001306:	d201      	bcs.n	800130c <__udivmoddi4+0x27c>
 8001308:	4591      	cmp	r9, r2
 800130a:	d81f      	bhi.n	800134c <__udivmoddi4+0x2bc>
 800130c:	eba2 0209 	sub.w	r2, r2, r9
 8001310:	fbb2 f9fe 	udiv	r9, r2, lr
 8001314:	fb09 f804 	mul.w	r8, r9, r4
 8001318:	fb0e 2a19 	mls	sl, lr, r9, r2
 800131c:	b28a      	uxth	r2, r1
 800131e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001322:	4542      	cmp	r2, r8
 8001324:	d229      	bcs.n	800137a <__udivmoddi4+0x2ea>
 8001326:	18ba      	adds	r2, r7, r2
 8001328:	f109 31ff 	add.w	r1, r9, #4294967295
 800132c:	d2c2      	bcs.n	80012b4 <__udivmoddi4+0x224>
 800132e:	4542      	cmp	r2, r8
 8001330:	d2c0      	bcs.n	80012b4 <__udivmoddi4+0x224>
 8001332:	f1a9 0102 	sub.w	r1, r9, #2
 8001336:	443a      	add	r2, r7
 8001338:	e7bc      	b.n	80012b4 <__udivmoddi4+0x224>
 800133a:	45c6      	cmp	lr, r8
 800133c:	d29b      	bcs.n	8001276 <__udivmoddi4+0x1e6>
 800133e:	ebb8 0302 	subs.w	r3, r8, r2
 8001342:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001346:	3801      	subs	r0, #1
 8001348:	46e1      	mov	r9, ip
 800134a:	e794      	b.n	8001276 <__udivmoddi4+0x1e6>
 800134c:	eba7 0909 	sub.w	r9, r7, r9
 8001350:	444a      	add	r2, r9
 8001352:	fbb2 f9fe 	udiv	r9, r2, lr
 8001356:	f1a8 0c02 	sub.w	ip, r8, #2
 800135a:	fb09 f804 	mul.w	r8, r9, r4
 800135e:	e7db      	b.n	8001318 <__udivmoddi4+0x288>
 8001360:	4603      	mov	r3, r0
 8001362:	e77d      	b.n	8001260 <__udivmoddi4+0x1d0>
 8001364:	46d0      	mov	r8, sl
 8001366:	e765      	b.n	8001234 <__udivmoddi4+0x1a4>
 8001368:	4608      	mov	r0, r1
 800136a:	e6fa      	b.n	8001162 <__udivmoddi4+0xd2>
 800136c:	443b      	add	r3, r7
 800136e:	3a02      	subs	r2, #2
 8001370:	e730      	b.n	80011d4 <__udivmoddi4+0x144>
 8001372:	f1ac 0c02 	sub.w	ip, ip, #2
 8001376:	443b      	add	r3, r7
 8001378:	e719      	b.n	80011ae <__udivmoddi4+0x11e>
 800137a:	4649      	mov	r1, r9
 800137c:	e79a      	b.n	80012b4 <__udivmoddi4+0x224>
 800137e:	eba2 0209 	sub.w	r2, r2, r9
 8001382:	fbb2 f9fe 	udiv	r9, r2, lr
 8001386:	46c4      	mov	ip, r8
 8001388:	fb09 f804 	mul.w	r8, r9, r4
 800138c:	e7c4      	b.n	8001318 <__udivmoddi4+0x288>
 800138e:	bf00      	nop

08001390 <__aeabi_idiv0>:
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	460b      	mov	r3, r1
 80013a2:	72fb      	strb	r3, [r7, #11]
 80013a4:	4613      	mov	r3, r2
 80013a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685c      	ldr	r4, [r3, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	68d8      	ldr	r0, [r3, #12]
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	7af9      	ldrb	r1, [r7, #11]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	47a0      	blx	r4
 80013b8:	6178      	str	r0, [r7, #20]

  return ret;
 80013ba:	697b      	ldr	r3, [r7, #20]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}

080013c4 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	461a      	mov	r2, r3
 80013d0:	460b      	mov	r3, r1
 80013d2:	72fb      	strb	r3, [r7, #11]
 80013d4:	4613      	mov	r3, r2
 80013d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	68d8      	ldr	r0, [r3, #12]
 80013e0:	893b      	ldrh	r3, [r7, #8]
 80013e2:	7af9      	ldrb	r1, [r7, #11]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	47a0      	blx	r4
 80013e8:	6178      	str	r0, [r7, #20]

  return ret;
 80013ea:	697b      	ldr	r3, [r7, #20]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}

080013f4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001400:	f107 0208 	add.w	r2, r7, #8
 8001404:	2301      	movs	r3, #1
 8001406:	2120      	movs	r1, #32
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffc3 	bl	8001394 <hts221_read_reg>
 800140e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	f362 0301 	bfi	r3, r2, #0, #2
 8001424:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	2301      	movs	r3, #1
 800142c:	2120      	movs	r1, #32
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffc8 	bl	80013c4 <hts221_write_reg>
 8001434:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800144c:	f107 0208 	add.w	r2, r7, #8
 8001450:	2301      	movs	r3, #1
 8001452:	2120      	movs	r1, #32
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff9d 	bl	8001394 <hts221_read_reg>
 800145a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	f362 0382 	bfi	r3, r2, #2, #1
 8001470:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001472:	f107 0208 	add.w	r2, r7, #8
 8001476:	2301      	movs	r3, #1
 8001478:	2120      	movs	r1, #32
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <hts221_write_reg>
 8001480:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001496:	f107 0208 	add.w	r2, r7, #8
 800149a:	2302      	movs	r3, #2
 800149c:	2128      	movs	r1, #40	@ 0x28
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff78 	bl	8001394 <hts221_read_reg>
 80014a4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80014a6:	7a7b      	ldrb	r3, [r7, #9]
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	7a3a      	ldrb	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80014da:	2301      	movs	r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	210f      	movs	r1, #15
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff57 	bl	8001394 <hts221_read_reg>
 80014e6:	60f8      	str	r0, [r7, #12]

  return ret;
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	2301      	movs	r3, #1
 8001504:	2120      	movs	r1, #32
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff44 	bl	8001394 <hts221_read_reg>
 800150c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10f      	bne.n	8001534 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	7a3b      	ldrb	r3, [r7, #8]
 800151e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001522:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	2301      	movs	r3, #1
 800152a:	2120      	movs	r1, #32
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff49 	bl	80013c4 <hts221_write_reg>
 8001532:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	2301      	movs	r3, #1
 8001550:	2122      	movs	r1, #34	@ 0x22
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff1e 	bl	8001394 <hts221_read_reg>
 8001558:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10f      	bne.n	8001580 <hts221_drdy_on_int_set+0x42>
  {
    reg.drdy = val;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	7a3b      	ldrb	r3, [r7, #8]
 800156a:	f362 0382 	bfi	r3, r2, #2, #1
 800156e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	2301      	movs	r3, #1
 8001576:	2122      	movs	r1, #34	@ 0x22
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff23 	bl	80013c4 <hts221_write_reg>
 800157e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001580:	68fb      	ldr	r3, [r7, #12]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001594:	f107 020b 	add.w	r2, r7, #11
 8001598:	2301      	movs	r3, #1
 800159a:	2130      	movs	r1, #48	@ 0x30
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fef9 	bl	8001394 <hts221_read_reg>
 80015a2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb40 	bl	8000c2c <__aeabi_i2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc42 	bl	8000e3c <__aeabi_fdiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	601a      	str	r2, [r3, #0]

  return ret;
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80015d4:	f107 020b 	add.w	r2, r7, #11
 80015d8:	2301      	movs	r3, #1
 80015da:	2131      	movs	r1, #49	@ 0x31
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fed9 	bl	8001394 <hts221_read_reg>
 80015e2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb20 	bl	8000c2c <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc22 	bl	8000e3c <__aeabi_fdiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]

  return ret;
 8001600:	68fb      	ldr	r3, [r7, #12]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	2302      	movs	r3, #2
 800161a:	2136      	movs	r1, #54	@ 0x36
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff feb9 	bl	8001394 <hts221_read_reg>
 8001622:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001624:	7a7b      	ldrb	r3, [r7, #9]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	7a3a      	ldrb	r2, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff faf8 	bl	8000c2c <__aeabi_i2f>
 800163c:	4602      	mov	r2, r0
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]

  return ret;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001656:	f107 0208 	add.w	r2, r7, #8
 800165a:	2302      	movs	r3, #2
 800165c:	213a      	movs	r1, #58	@ 0x3a
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fe98 	bl	8001394 <hts221_read_reg>
 8001664:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001666:	7a7b      	ldrb	r3, [r7, #9]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b29b      	uxth	r3, r3
 800166c:	7a3a      	ldrb	r2, [r7, #8]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001674:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fad7 	bl	8000c2c <__aeabi_i2f>
 800167e:	4602      	mov	r2, r0
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	601a      	str	r2, [r3, #0]

  return ret;
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001696:	4b39      	ldr	r3, [pc, #228]	@ (800177c <main+0xec>)
 8001698:	4a39      	ldr	r2, [pc, #228]	@ (8001780 <main+0xf0>)
 800169a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <main+0xec>)
 800169e:	4a39      	ldr	r2, [pc, #228]	@ (8001784 <main+0xf4>)
 80016a0:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 80016a2:	4b36      	ldr	r3, [pc, #216]	@ (800177c <main+0xec>)
 80016a4:	4a38      	ldr	r2, [pc, #224]	@ (8001788 <main+0xf8>)
 80016a6:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fcdd 	bl	8002066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f87e 	bl	80017ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 80016b0:	f000 faa8 	bl	8001c04 <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 f920 	bl	80018f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b8:	f000 f8c6 	bl	8001848 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016bc:	f000 f8f2 	bl	80018a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  KIN1_InitCycleCounter();
 80016c0:	4b32      	ldr	r3, [pc, #200]	@ (800178c <main+0xfc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a31      	ldr	r2, [pc, #196]	@ (800178c <main+0xfc>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]
  KIN1_EnableCycleCounter();
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <main+0x100>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001790 <main+0x100>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]
  hts221_initialize();
 80016d8:	f000 f9ea 	bl	8001ab0 <hts221_initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (drdy) {
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <main+0x104>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0fa      	beq.n	80016dc <main+0x4c>
      /* Reset data ready condition */
      drdy = 0;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <main+0x104>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
      /* Read humidity data */
      memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80016ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <main+0x108>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
      hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 80016f2:	4929      	ldr	r1, [pc, #164]	@ (8001798 <main+0x108>)
 80016f4:	4821      	ldr	r0, [pc, #132]	@ (800177c <main+0xec>)
 80016f6:	f7ff fec9 	bl	800148c <hts221_humidity_raw_get>
      neai_buffer[drdy_counter] = hts221_linear_interpolation(&lin_hum, data_raw_humidity);
 80016fa:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <main+0x108>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <main+0x10c>)
 8001702:	8812      	ldrh	r2, [r2, #0]
 8001704:	4614      	mov	r4, r2
 8001706:	4619      	mov	r1, r3
 8001708:	4825      	ldr	r0, [pc, #148]	@ (80017a0 <main+0x110>)
 800170a:	f000 fa15 	bl	8001b38 <hts221_linear_interpolation>
 800170e:	4603      	mov	r3, r0
 8001710:	4a24      	ldr	r2, [pc, #144]	@ (80017a4 <main+0x114>)
 8001712:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      drdy_counter++;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <main+0x10c>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <main+0x10c>)
 8001720:	801a      	strh	r2, [r3, #0]
      if (drdy_counter >= SAMPLES) {
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <main+0x10c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d9d8      	bls.n	80016dc <main+0x4c>
        /* Device power off */
        hts221_power_on_set(&dev_ctx, PROPERTY_DISABLE);
 800172a:	2100      	movs	r1, #0
 800172c:	4813      	ldr	r0, [pc, #76]	@ (800177c <main+0xec>)
 800172e:	f7ff fee0 	bl	80014f2 <hts221_power_on_set>
          neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
          printf("Similarity: %d / 100. NEAI detect return: %d. Cycles counter: %ld = %.1f µs at %ld Hz.\n",
                neai_similarity, neai_state, cycles_cnt, neai_time, HAL_RCC_GetSysClockFreq());
        }
#else
        for (uint16_t i = 0; i < SAMPLES; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	e00e      	b.n	8001756 <main+0xc6>
          printf("%.3f ", neai_buffer[i]);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <main+0x114>)
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe89 	bl	8000458 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <main+0x118>)
 800174c:	f003 fd9a 	bl	8005284 <iprintf>
        for (uint16_t i = 0; i < SAMPLES; i++) {
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	3301      	adds	r3, #1
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d9ed      	bls.n	8001738 <main+0xa8>
        }
        printf("\n");
 800175c:	200a      	movs	r0, #10
 800175e:	f003 fda3 	bl	80052a8 <putchar>
#endif
        /* Reset drdy_counter in order to get a new buffer */
        drdy_counter = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <main+0x10c>)
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
        /* Clean neai buffer */
        memset(neai_buffer, 0x00, SAMPLES * sizeof(float));
 8001768:	2240      	movs	r2, #64	@ 0x40
 800176a:	2100      	movs	r1, #0
 800176c:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <main+0x114>)
 800176e:	f003 fde6 	bl	800533e <memset>
        /* Device power on */
        hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 8001772:	2101      	movs	r1, #1
 8001774:	4801      	ldr	r0, [pc, #4]	@ (800177c <main+0xec>)
 8001776:	f7ff febc 	bl	80014f2 <hts221_power_on_set>
    if (drdy) {
 800177a:	e7af      	b.n	80016dc <main+0x4c>
 800177c:	200002d4 	.word	0x200002d4
 8001780:	08001a2d 	.word	0x08001a2d
 8001784:	08001a6f 	.word	0x08001a6f
 8001788:	200001f0 	.word	0x200001f0
 800178c:	e000edfc 	.word	0xe000edfc
 8001790:	e0001000 	.word	0xe0001000
 8001794:	2000028f 	.word	0x2000028f
 8001798:	2000028c 	.word	0x2000028c
 800179c:	20000290 	.word	0x20000290
 80017a0:	200002e4 	.word	0x200002e4
 80017a4:	20000294 	.word	0x20000294
 80017a8:	08007228 	.word	0x08007228

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b092      	sub	sp, #72	@ 0x48
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2234      	movs	r2, #52	@ 0x34
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fdbf 	bl	800533e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <SystemClock_Config+0x98>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80017d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <SystemClock_Config+0x98>)
 80017d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017dc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017de:	2302      	movs	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e2:	2301      	movs	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e6:	2310      	movs	r3, #16
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80017f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80017fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4618      	mov	r0, r3
 8001804:	f001 ffb2 	bl	800376c <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800180e:	f000 fa49 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f002 face 	bl	8003dcc <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001836:	f000 fa35 	bl	8001ca4 <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3748      	adds	r7, #72	@ 0x48
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40007000 	.word	0x40007000

08001848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	@ (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f000 ff4d 	bl	8002724 <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 fa08 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200001f0 	.word	0x200001f0
 800189c:	40005400 	.word	0x40005400
 80018a0:	00061a80 	.word	0x00061a80

080018a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <MX_USART2_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART2_UART_Init+0x4c>)
 80018dc:	f002 fd3c 	bl	8004358 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f000 f9dd 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000244 	.word	0x20000244
 80018f4:	40004400 	.word	0x40004400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a2e      	ldr	r2, [pc, #184]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <MX_GPIO_Init+0xd4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a28      	ldr	r2, [pc, #160]	@ (80019cc <MX_GPIO_Init+0xd4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <MX_GPIO_Init+0xd4>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <MX_GPIO_Init+0xd4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2120      	movs	r1, #32
 800195a:	481d      	ldr	r0, [pc, #116]	@ (80019d0 <MX_GPIO_Init+0xd8>)
 800195c:	f000 feb2 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001966:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	4817      	ldr	r0, [pc, #92]	@ (80019d4 <MX_GPIO_Init+0xdc>)
 8001978:	f000 fd14 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800197c:	2320      	movs	r3, #32
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	480f      	ldr	r0, [pc, #60]	@ (80019d0 <MX_GPIO_Init+0xd8>)
 8001994:	f000 fd06 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HTS221_INT_Pin */
  GPIO_InitStruct.Pin = HTS221_INT_Pin;
 8001998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HTS221_INT_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	4808      	ldr	r0, [pc, #32]	@ (80019d0 <MX_GPIO_Init+0xd8>)
 80019b0:	f000 fcf8 	bl	80023a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2028      	movs	r0, #40	@ 0x28
 80019ba:	f000 fcbc 	bl	8002336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019be:	2028      	movs	r0, #40	@ 0x28
 80019c0:	f000 fcd5 	bl	800236e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020800 	.word	0x40020800

080019d8 <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80019e6:	f107 010c 	add.w	r1, r7, #12
 80019ea:	230a      	movs	r3, #10
 80019ec:	2201      	movs	r2, #1
 80019ee:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <__io_putchar+0x28>)
 80019f0:	f002 fd02 	bl	80043f8 <HAL_UART_Transmit>
 return ch;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000244 	.word	0x20000244

08001a04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a14:	d103      	bne.n	8001a1e <HAL_GPIO_EXTI_Callback+0x1a>
  case HTS221_INT_Pin:
    drdy = 1;
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <HAL_GPIO_EXTI_Callback+0x24>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
    break;
 8001a1c:	bf00      	nop
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	2000028f 	.word	0x2000028f

08001a2c <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	72fb      	strb	r3, [r7, #11]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a46:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	21bf      	movs	r1, #191	@ 0xbf
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 ffa4 	bl	80029ac <HAL_I2C_Mem_Write>
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b088      	sub	sp, #32
 8001a72:	af04      	add	r7, sp, #16
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	72fb      	strb	r3, [r7, #11]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a88:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	893b      	ldrh	r3, [r7, #8]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	21bf      	movs	r1, #191	@ 0xbf
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f001 f87d 	bl	8002ba0 <HAL_I2C_Mem_Read>
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <hts221_initialize>:
 *
 * @return No
 *
 */
static void hts221_initialize()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <hts221_initialize+0x6c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 8001aba:	2014      	movs	r0, #20
 8001abc:	f000 fb42 	bl	8002144 <HAL_Delay>
    hts221_device_id_get(&dev_ctx, &whoamI);
 8001ac0:	4916      	ldr	r1, [pc, #88]	@ (8001b1c <hts221_initialize+0x6c>)
 8001ac2:	4817      	ldr	r0, [pc, #92]	@ (8001b20 <hts221_initialize+0x70>)
 8001ac4:	f7ff fd04 	bl	80014d0 <hts221_device_id_get>
  } while(whoamI != HTS221_ID);
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <hts221_initialize+0x6c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2bbc      	cmp	r3, #188	@ 0xbc
 8001ace:	d1f4      	bne.n	8001aba <hts221_initialize+0xa>

  /* Read humidity calibration coefficient */
  hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 8001ad0:	4914      	ldr	r1, [pc, #80]	@ (8001b24 <hts221_initialize+0x74>)
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <hts221_initialize+0x70>)
 8001ad4:	f7ff fd99 	bl	800160a <hts221_hum_adc_point_0_get>
  hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 8001ad8:	4913      	ldr	r1, [pc, #76]	@ (8001b28 <hts221_initialize+0x78>)
 8001ada:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <hts221_initialize+0x70>)
 8001adc:	f7ff fd55 	bl	800158a <hts221_hum_rh_point_0_get>
  hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 8001ae0:	4912      	ldr	r1, [pc, #72]	@ (8001b2c <hts221_initialize+0x7c>)
 8001ae2:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <hts221_initialize+0x70>)
 8001ae4:	f7ff fdb2 	bl	800164c <hts221_hum_adc_point_1_get>
  hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 8001ae8:	4911      	ldr	r1, [pc, #68]	@ (8001b30 <hts221_initialize+0x80>)
 8001aea:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <hts221_initialize+0x70>)
 8001aec:	f7ff fd6d 	bl	80015ca <hts221_hum_rh_point_1_get>
  /* Enable Block Data Update */
  hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001af0:	2101      	movs	r1, #1
 8001af2:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <hts221_initialize+0x70>)
 8001af4:	f7ff fca4 	bl	8001440 <hts221_block_data_update_set>
  /* Set Output Data Rate */
  hts221_data_rate_set(&dev_ctx, HUMIDITY_ODR);
 8001af8:	2103      	movs	r1, #3
 8001afa:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <hts221_initialize+0x70>)
 8001afc:	f7ff fc7a 	bl	80013f4 <hts221_data_rate_set>
  /* Enable data ready on interrupt pin */
  hts221_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);
 8001b00:	2101      	movs	r1, #1
 8001b02:	4807      	ldr	r0, [pc, #28]	@ (8001b20 <hts221_initialize+0x70>)
 8001b04:	f7ff fd1b 	bl	800153e <hts221_drdy_on_int_set>
  /* Device power on */
  hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <hts221_initialize+0x70>)
 8001b0c:	f7ff fcf1 	bl	80014f2 <hts221_power_on_set>
  /* In order to avoid bug after "software reset" if
   * interrupt is still enabled at boot we get a dummy value
   */
  hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 8001b10:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <hts221_initialize+0x84>)
 8001b12:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <hts221_initialize+0x70>)
 8001b14:	f7ff fcba 	bl	800148c <hts221_humidity_raw_get>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000028e 	.word	0x2000028e
 8001b20:	200002d4 	.word	0x200002d4
 8001b24:	200002e4 	.word	0x200002e4
 8001b28:	200002e8 	.word	0x200002e8
 8001b2c:	200002ec 	.word	0x200002ec
 8001b30:	200002f0 	.word	0x200002f0
 8001b34:	2000028c 	.word	0x2000028c

08001b38 <hts221_linear_interpolation>:
 *
 * @return The humidity in percentage %
 *
 */
static float hts221_linear_interpolation(lin_t *lin, int16_t x)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f7fe ffb6 	bl	8000ac0 <__aeabi_fsub>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461c      	mov	r4, r3
 8001b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f865 	bl	8000c2c <__aeabi_i2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff f8b4 	bl	8000cd4 <__aeabi_fmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461c      	mov	r4, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f7ff f8aa 	bl	8000cd4 <__aeabi_fmul>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461d      	mov	r5, r3
          (lin->x0 * lin->y1))) / (lin->x1 - lin->x0);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f8a0 	bl	8000cd4 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
  float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8001b96:	4619      	mov	r1, r3
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7fe ff91 	bl	8000ac0 <__aeabi_fsub>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7fe ff8e 	bl	8000ac4 <__addsf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461c      	mov	r4, r3
          (lin->x0 * lin->y1))) / (lin->x1 - lin->x0);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7fe ff82 	bl	8000ac0 <__aeabi_fsub>
 8001bbc:	4603      	mov	r3, r0
  float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff f93b 	bl	8000e3c <__aeabi_fdiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]
  if (percentage_hum < 0.0) percentage_hum = 0.0;
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fa1e 	bl	8001010 <__aeabi_fcmplt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <hts221_linear_interpolation+0xaa>
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e008      	b.n	8001bf4 <hts221_linear_interpolation+0xbc>
  else if (percentage_hum > 100.0) percentage_hum = 100.0;
 8001be2:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <hts221_linear_interpolation+0xc8>)
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff fa31 	bl	800104c <__aeabi_fcmpgt>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <hts221_linear_interpolation+0xbc>
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <hts221_linear_interpolation+0xc8>)
 8001bf2:	60fb      	str	r3, [r7, #12]
  return percentage_hum;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	42c80000 	.word	0x42c80000

08001c04 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 8001c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4814      	ldr	r0, [pc, #80]	@ (8001ca0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001c50:	f000 fba8 	bl	80023a4 <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 8001c54:	2314      	movs	r3, #20
 8001c56:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 fa73 	bl	8002144 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c64:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001c66:	f000 fd2d 	bl	80026c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fa6a 	bl	8002144 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c76:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001c78:	f000 fd24 	bl	80026c4 <HAL_GPIO_WritePin>
  } while (pulses--);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1e5a      	subs	r2, r3, #1
 8001c80:	61fa      	str	r2, [r7, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e8      	bne.n	8001c58 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001c8c:	f023 0302 	bic.w	r3, r3, #2
 8001c90:	61d3      	str	r3, [r2, #28]
}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <Error_Handler+0x8>

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	4a13      	ldr	r2, [pc, #76]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cc0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_MspInit+0x58>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_MspInit+0x58>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <HAL_I2C_MspInit+0x7c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d128      	bne.n	8001d80 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a16      	ldr	r2, [pc, #88]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <HAL_I2C_MspInit+0x84>)
 8001d64:	f000 fb1e 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d72:	6253      	str	r3, [r2, #36]	@ 0x24
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_I2C_MspInit+0x80>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400

08001d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_UART_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d127      	bne.n	8001e06 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_UART_MspInit+0x80>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <HAL_UART_MspInit+0x84>)
 8001e02:	f000 facf 	bl	80023a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f94e 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HTS221_INT_Pin);
 8001e78:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e7c:	f000 fc3a 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e84:	f000 fc36 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <_kill>:

int _kill(int pid, int sig)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea4:	f003 fa9e 	bl	80053e4 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2216      	movs	r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_exit>:

void _exit (int status)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffe7 	bl	8001e9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fd57 	bl	80019d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f68:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f003 fa06 	bl	80053e4 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20014000 	.word	0x20014000
 8002004:	00000400 	.word	0x00000400
 8002008:	200002f4 	.word	0x200002f4
 800200c:	20000448 	.word	0x20000448

08002010 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800201c:	f7ff fff8 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480b      	ldr	r0, [pc, #44]	@ (8002050 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002022:	490c      	ldr	r1, [pc, #48]	@ (8002054 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002024:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002038:	4c09      	ldr	r4, [pc, #36]	@ (8002060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002046:	f003 f9d3 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204a:	f7ff fb21 	bl	8001690 <main>
  bx lr
 800204e:	4770      	bx	lr
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002058:	080075dc 	.word	0x080075dc
  ldr r2, =_sbss
 800205c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002060:	20000448 	.word	0x20000448

08002064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC1_IRQHandler>

08002066 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	2003      	movs	r0, #3
 8002072:	f000 f955 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f80e 	bl	8002098 <HAL_InitTick>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	e001      	b.n	800208c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002088:	f7ff fe12 	bl	8001cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800208c:	79fb      	ldrb	r3, [r7, #7]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_InitTick+0x68>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d022      	beq.n	80020f2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020ac:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <HAL_InitTick+0x6c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_InitTick+0x68>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f962 	bl	800238a <HAL_SYSTICK_Config>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d809      	bhi.n	80020e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d2:	2200      	movs	r2, #0
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	f04f 30ff 	mov.w	r0, #4294967295
 80020da:	f000 f92c 	bl	8002336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <HAL_InitTick+0x70>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e007      	b.n	80020f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e004      	b.n	80020f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e001      	b.n	80020f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000008 	.word	0x20000008
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <HAL_IncTick+0x1c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_IncTick+0x20>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a03      	ldr	r2, [pc, #12]	@ (8002128 <HAL_IncTick+0x1c>)
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200002f8 	.word	0x200002f8
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <HAL_GetTick+0x10>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	200002f8 	.word	0x200002f8

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fff0 	bl	8002130 <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d004      	beq.n	8002168 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_Delay+0x40>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002168:	bf00      	nop
 800216a:	f7ff ffe1 	bl	8002130 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	429a      	cmp	r2, r3
 8002178:	d8f7      	bhi.n	800216a <HAL_Delay+0x26>
  {
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000008 	.word	0x20000008

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4906      	ldr	r1, [pc, #24]	@ (8002220 <__NVIC_EnableIRQ+0x34>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	@ (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	@ (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff90 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	@ (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff2d 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff42 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff90 	bl	8002278 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5f 	bl	8002224 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff35 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023ba:	e160      	b.n	800267e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8152 	beq.w	8002678 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0201 	and.w	r2, r3, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80ac 	beq.w	8002678 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <HAL_GPIO_Init+0x2f8>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a5d      	ldr	r2, [pc, #372]	@ (800269c <HAL_GPIO_Init+0x2f8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	4b5b      	ldr	r3, [pc, #364]	@ (800269c <HAL_GPIO_Init+0x2f8>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002538:	4a59      	ldr	r2, [pc, #356]	@ (80026a0 <HAL_GPIO_Init+0x2fc>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a51      	ldr	r2, [pc, #324]	@ (80026a4 <HAL_GPIO_Init+0x300>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d025      	beq.n	80025b0 <HAL_GPIO_Init+0x20c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a50      	ldr	r2, [pc, #320]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01f      	beq.n	80025ac <HAL_GPIO_Init+0x208>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4f      	ldr	r2, [pc, #316]	@ (80026ac <HAL_GPIO_Init+0x308>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d019      	beq.n	80025a8 <HAL_GPIO_Init+0x204>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a4e      	ldr	r2, [pc, #312]	@ (80026b0 <HAL_GPIO_Init+0x30c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d013      	beq.n	80025a4 <HAL_GPIO_Init+0x200>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <HAL_GPIO_Init+0x310>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00d      	beq.n	80025a0 <HAL_GPIO_Init+0x1fc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4c      	ldr	r2, [pc, #304]	@ (80026b8 <HAL_GPIO_Init+0x314>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x1f8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4b      	ldr	r2, [pc, #300]	@ (80026bc <HAL_GPIO_Init+0x318>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_GPIO_Init+0x1f4>
 8002594:	2306      	movs	r3, #6
 8002596:	e00c      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 8002598:	2307      	movs	r3, #7
 800259a:	e00a      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	@ (80026a0 <HAL_GPIO_Init+0x2fc>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d0:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025f4:	4a32      	ldr	r2, [pc, #200]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fa:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800261e:	4a28      	ldr	r2, [pc, #160]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002624:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002648:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <HAL_GPIO_Init+0x31c>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae97 	bne.w	80023bc <HAL_GPIO_Init+0x18>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40010000 	.word	0x40010000
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40021400 	.word	0x40021400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f976 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e12b      	b.n	800298e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fade 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f001 fd5e 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a81      	ldr	r2, [pc, #516]	@ (8002998 <HAL_I2C_Init+0x274>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a80      	ldr	r2, [pc, #512]	@ (800299c <HAL_I2C_Init+0x278>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	@ (80029a0 <HAL_I2C_Init+0x27c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e7      	b.n	800298e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	@ (80029a4 <HAL_I2C_Init+0x280>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002998 <HAL_I2C_Init+0x274>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a69      	ldr	r2, [pc, #420]	@ (80029a8 <HAL_I2C_Init+0x284>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	495c      	ldr	r1, [pc, #368]	@ (8002998 <HAL_I2C_Init+0x274>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x13c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x138>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e051      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 800285c:	2304      	movs	r3, #4
 800285e:	e04f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_I2C_Init+0x168>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_I2C_Init+0x18e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x196>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <HAL_I2C_Init+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e58      	subs	r0, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6809      	ldr	r1, [r1, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800292e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6911      	ldr	r1, [r2, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	000186a0 	.word	0x000186a0
 800299c:	001e847f 	.word	0x001e847f
 80029a0:	003d08ff 	.word	0x003d08ff
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029c6:	f7ff fbb3 	bl	8002130 <HAL_GetTick>
 80029ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 80d9 	bne.w	8002b8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2319      	movs	r3, #25
 80029e0:	2201      	movs	r2, #1
 80029e2:	496d      	ldr	r1, [pc, #436]	@ (8002b98 <HAL_I2C_Mem_Write+0x1ec>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fc8b 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0cc      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_Mem_Write+0x56>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e0c5      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d007      	beq.n	8002a28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2221      	movs	r2, #33	@ 0x21
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2240      	movs	r2, #64	@ 0x40
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a4d      	ldr	r2, [pc, #308]	@ (8002b9c <HAL_I2C_Mem_Write+0x1f0>)
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6a:	88f8      	ldrh	r0, [r7, #6]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fac2 	bl	8003004 <I2C_RequestMemoryWrite>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d052      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e081      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fd50 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d11b      	bne.n	8002b2c <HAL_I2C_Mem_Write+0x180>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1aa      	bne.n	8002a8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fd43 	bl	80035c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e016      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00100002 	.word	0x00100002
 8002b9c:	ffff0000 	.word	0xffff0000

08002ba0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	@ 0x30
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bba:	f7ff fab9 	bl	8002130 <HAL_GetTick>
 8002bbe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	f040 8214 	bne.w	8002ff6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2319      	movs	r3, #25
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	497b      	ldr	r1, [pc, #492]	@ (8002dc4 <HAL_I2C_Mem_Read+0x224>)
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fb91 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
 8002be6:	e207      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Mem_Read+0x56>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e200      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d007      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	@ 0x22
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002dc8 <HAL_I2C_Mem_Read+0x228>)
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c5e:	88f8      	ldrh	r0, [r7, #6]
 8002c60:	893a      	ldrh	r2, [r7, #8]
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa5e 	bl	8003130 <I2C_RequestMemoryRead>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1bc      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d113      	bne.n	8002cae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e190      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d11b      	bne.n	8002cee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e170      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d11b      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	e150      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d44:	e144      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	f200 80f1 	bhi.w	8002f32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d123      	bne.n	8002da0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fc79 	bl	8003654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e145      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d9e:	e117      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d14e      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	2200      	movs	r2, #0
 8002db0:	4906      	ldr	r1, [pc, #24]	@ (8002dcc <HAL_I2C_Mem_Read+0x22c>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 faa4 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e11a      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
 8002dc2:	bf00      	nop
 8002dc4:	00100002 	.word	0x00100002
 8002dc8:	ffff0000 	.word	0xffff0000
 8002dcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e44:	e0c4      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	496c      	ldr	r1, [pc, #432]	@ (8003000 <HAL_I2C_Mem_Read+0x460>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa55 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0cb      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4955      	ldr	r1, [pc, #340]	@ (8003000 <HAL_I2C_Mem_Read+0x460>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fa27 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e09d      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f30:	e04e      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fb8c 	bl	8003654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e058      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d124      	bne.n	8002fd0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f aeb6 	bne.w	8002d46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3728      	adds	r7, #40	@ 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	00010004 	.word	0x00010004

08003004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	460b      	mov	r3, r1
 8003018:	813b      	strh	r3, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800302c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2200      	movs	r2, #0
 8003036:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f960 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003054:	d103      	bne.n	800305e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e05f      	b.n	8003122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003070:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	492d      	ldr	r1, [pc, #180]	@ (800312c <I2C_RequestMemoryWrite+0x128>)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f9bb 	bl	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04c      	b.n	8003122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a0:	6a39      	ldr	r1, [r7, #32]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fa46 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d107      	bne.n	80030c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e02b      	b.n	8003122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	e021      	b.n	8003120 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	6a39      	ldr	r1, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa20 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003110:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e005      	b.n	8003122 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	00010002 	.word	0x00010002

08003130 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	460b      	mov	r3, r1
 8003144:	813b      	strh	r3, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003158:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2200      	movs	r2, #0
 8003172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8c2 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003190:	d103      	bne.n	800319a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0aa      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	4952      	ldr	r1, [pc, #328]	@ (80032fc <I2C_RequestMemoryRead+0x1cc>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f91d 	bl	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e097      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f9a8 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d107      	bne.n	8003202 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e076      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]
 8003216:	e021      	b.n	800325c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003218:	893b      	ldrh	r3, [r7, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	b29b      	uxth	r3, r3
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f982 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	2b04      	cmp	r3, #4
 800323c:	d107      	bne.n	800324e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e050      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003252:	893b      	ldrh	r3, [r7, #8]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325e:	6a39      	ldr	r1, [r7, #32]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f967 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	2b04      	cmp	r3, #4
 8003272:	d107      	bne.n	8003284 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003282:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e035      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003296:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2200      	movs	r2, #0
 80032a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f82b 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032be:	d103      	bne.n	80032c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e013      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	4906      	ldr	r1, [pc, #24]	@ (80032fc <I2C_RequestMemoryRead+0x1cc>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f886 	bl	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010002 	.word	0x00010002

08003300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003310:	e048      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d044      	beq.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe ff09 	bl	8002130 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d139      	bne.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	0c1b      	lsrs	r3, r3, #16
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10d      	bne.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x56>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	43da      	mvns	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	e00c      	b.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d116      	bne.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e023      	b.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10d      	bne.n	80033ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	e00c      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d093      	beq.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003402:	e071      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d123      	bne.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003422:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800342c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e067      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d041      	beq.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe fe64 	bl	8002130 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d136      	bne.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10c      	bne.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf14      	ite	ne
 8003496:	2301      	movne	r3, #1
 8003498:	2300      	moveq	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e00b      	b.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e021      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10c      	bne.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e00b      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f47f af6d 	bne.w	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003540:	e034      	b.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8e3 	bl	800370e <I2C_IsAcknowledgeFailed>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e034      	b.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d028      	beq.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fe fde9 	bl	8002130 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11d      	bne.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b80      	cmp	r3, #128	@ 0x80
 800357c:	d016      	beq.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b6:	2b80      	cmp	r3, #128	@ 0x80
 80035b8:	d1c3      	bne.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d0:	e034      	b.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f89b 	bl	800370e <I2C_IsAcknowledgeFailed>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e034      	b.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d028      	beq.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe fda1 	bl	8002130 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11d      	bne.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d016      	beq.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e007      	b.n	800364c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d1c3      	bne.n	80035d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003660:	e049      	b.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b10      	cmp	r3, #16
 800366e:	d119      	bne.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0210 	mvn.w	r2, #16
 8003678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e030      	b.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe fd44 	bl	8002130 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11d      	bne.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	d016      	beq.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e007      	b.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d1ae      	bne.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003724:	d11b      	bne.n	800375e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800372e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f043 0204 	orr.w	r2, r3, #4
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
	...

0800376c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e31d      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377e:	4b94      	ldr	r3, [pc, #592]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003788:	4b91      	ldr	r3, [pc, #580]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d07b      	beq.n	8003896 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d006      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d10b      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	4b87      	ldr	r3, [pc, #540]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d06a      	beq.n	8003894 <HAL_RCC_OscConfig+0x128>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d166      	bne.n	8003894 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e2f7      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x74>
 80037d2:	4b7f      	ldr	r3, [pc, #508]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e02d      	b.n	800383c <HAL_RCC_OscConfig+0xd0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x96>
 80037e8:	4b79      	ldr	r3, [pc, #484]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a78      	ldr	r2, [pc, #480]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b76      	ldr	r3, [pc, #472]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a75      	ldr	r2, [pc, #468]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0xd0>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0xb8>
 800380a:	4b71      	ldr	r3, [pc, #452]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6e      	ldr	r3, [pc, #440]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6d      	ldr	r2, [pc, #436]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xd0>
 8003824:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a69      	ldr	r2, [pc, #420]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b67      	ldr	r3, [pc, #412]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a66      	ldr	r2, [pc, #408]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fc74 	bl	8002130 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fc70 	bl	8002130 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e2ad      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800385e:	4b5c      	ldr	r3, [pc, #368]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xe0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fc60 	bl	8002130 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe fc5c 	bl	8002130 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e299      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003886:	4b52      	ldr	r3, [pc, #328]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x108>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d05a      	beq.n	8003958 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d119      	bne.n	80038e2 <HAL_RCC_OscConfig+0x176>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b4:	4b46      	ldr	r3, [pc, #280]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_OscConfig+0x160>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e276      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038cc:	4b40      	ldr	r3, [pc, #256]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	493d      	ldr	r1, [pc, #244]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e0:	e03a      	b.n	8003958 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ea:	4b3a      	ldr	r3, [pc, #232]	@ (80039d4 <HAL_RCC_OscConfig+0x268>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fc1e 	bl	8002130 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fe fc1a 	bl	8002130 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e257      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800390a:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b2e      	ldr	r3, [pc, #184]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	492a      	ldr	r1, [pc, #168]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
 800392a:	e015      	b.n	8003958 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392c:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <HAL_RCC_OscConfig+0x268>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe fbfd 	bl	8002130 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe fbf9 	bl	8002130 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e236      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800394c:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80b8 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d170      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x218>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e21a      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003990:	429a      	cmp	r2, r3
 8003992:	d921      	bls.n	80039d8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fc7d 	bl	8004298 <RCC_SetFlashLatencyFromMSIRange>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e208      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4906      	ldr	r1, [pc, #24]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	4901      	ldr	r1, [pc, #4]	@ (80039d0 <HAL_RCC_OscConfig+0x264>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e020      	b.n	8003a12 <HAL_RCC_OscConfig+0x2a6>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d8:	4b99      	ldr	r3, [pc, #612]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4996      	ldr	r1, [pc, #600]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ea:	4b95      	ldr	r3, [pc, #596]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4991      	ldr	r1, [pc, #580]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fc48 	bl	8004298 <RCC_SetFlashLatencyFromMSIRange>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1d3      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	0b5b      	lsrs	r3, r3, #13
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a22:	4a87      	ldr	r2, [pc, #540]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a24:	6892      	ldr	r2, [r2, #8]
 8003a26:	0912      	lsrs	r2, r2, #4
 8003a28:	f002 020f 	and.w	r2, r2, #15
 8003a2c:	4985      	ldr	r1, [pc, #532]	@ (8003c44 <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	5c8a      	ldrb	r2, [r1, r2]
 8003a30:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a32:	4a85      	ldr	r2, [pc, #532]	@ (8003c48 <HAL_RCC_OscConfig+0x4dc>)
 8003a34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a36:	4b85      	ldr	r3, [pc, #532]	@ (8003c4c <HAL_RCC_OscConfig+0x4e0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fb2c 	bl	8002098 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d045      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	e1b5      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d029      	beq.n	8003aaa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a56:	4b7e      	ldr	r3, [pc, #504]	@ (8003c50 <HAL_RCC_OscConfig+0x4e4>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fb68 	bl	8002130 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a64:	f7fe fb64 	bl	8002130 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1a1      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a76:	4b72      	ldr	r3, [pc, #456]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a82:	4b6f      	ldr	r3, [pc, #444]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	496c      	ldr	r1, [pc, #432]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a94:	4b6a      	ldr	r3, [pc, #424]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	4967      	ldr	r1, [pc, #412]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aaa:	4b69      	ldr	r3, [pc, #420]	@ (8003c50 <HAL_RCC_OscConfig+0x4e4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fb3e 	bl	8002130 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fb3a 	bl	8002130 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e177      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003aca:	4b5d      	ldr	r3, [pc, #372]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d030      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b5a      	ldr	r3, [pc, #360]	@ (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fb1e 	bl	8002130 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fb1a 	bl	8002130 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e157      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x38c>
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b4e      	ldr	r3, [pc, #312]	@ (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fb07 	bl	8002130 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fe fb03 	bl	8002130 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e140      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b38:	4b41      	ldr	r3, [pc, #260]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80b5 	beq.w	8003cbc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b3a      	ldr	r3, [pc, #232]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b37      	ldr	r3, [pc, #220]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	4a36      	ldr	r2, [pc, #216]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	6253      	str	r3, [r2, #36]	@ 0x24
 8003b6e:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b33      	ldr	r3, [pc, #204]	@ (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fe facb 	bl	8002130 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fe fac7 	bl	8002130 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	@ 0x64
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e104      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x466>
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6353      	str	r3, [r2, #52]	@ 0x34
 8003bd0:	e02d      	b.n	8003c2e <HAL_RCC_OscConfig+0x4c2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x488>
 8003bda:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bde:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be4:	6353      	str	r3, [r2, #52]	@ 0x34
 8003be6:	4b16      	ldr	r3, [pc, #88]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bea:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf0:	6353      	str	r3, [r2, #52]	@ 0x34
 8003bf2:	e01c      	b.n	8003c2e <HAL_RCC_OscConfig+0x4c2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4aa>
 8003bfc:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c06:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c08:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c12:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c14:	e00b      	b.n	8003c2e <HAL_RCC_OscConfig+0x4c2>
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	4a09      	ldr	r2, [pc, #36]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c20:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c22:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c26:	4a06      	ldr	r2, [pc, #24]	@ (8003c40 <HAL_RCC_OscConfig+0x4d4>)
 8003c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fa7b 	bl	8002130 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3c:	e019      	b.n	8003c72 <HAL_RCC_OscConfig+0x506>
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	0800723c 	.word	0x0800723c
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	42470020 	.word	0x42470020
 8003c54:	42470680 	.word	0x42470680
 8003c58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fa68 	bl	8002130 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0a3      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c72:	4b54      	ldr	r3, [pc, #336]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ee      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4f0>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fe fa56 	bl	8002130 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fa52 	bl	8002130 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e08d      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b44      	ldr	r3, [pc, #272]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	4a43      	ldr	r2, [pc, #268]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d079      	beq.n	8003db8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d13b      	bne.n	8003d4a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc8 <HAL_RCC_OscConfig+0x65c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fa2a 	bl	8002130 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe fa26 	bl	8002130 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e063      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfe:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	4319      	orrs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	430b      	orrs	r3, r1
 8003d16:	492b      	ldr	r1, [pc, #172]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_RCC_OscConfig+0x65c>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fa05 	bl	8002130 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe fa01 	bl	8002130 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e03e      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d3c:	4b21      	ldr	r3, [pc, #132]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x5be>
 8003d48:	e036      	b.n	8003db8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <HAL_RCC_OscConfig+0x65c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe f9ee 	bl	8002130 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe f9ea 	bl	8002130 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e027      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5ec>
 8003d76:	e01f      	b.n	8003db8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e01a      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <HAL_RCC_OscConfig+0x658>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470060 	.word	0x42470060

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e11a      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b8f      	ldr	r3, [pc, #572]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d919      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x34>
 8003df4:	4b8a      	ldr	r3, [pc, #552]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a89      	ldr	r2, [pc, #548]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b87      	ldr	r3, [pc, #540]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 0201 	bic.w	r2, r3, #1
 8003e08:	4985      	ldr	r1, [pc, #532]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e10:	4b83      	ldr	r3, [pc, #524]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0f9      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	497a      	ldr	r1, [pc, #488]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 808e 	beq.w	8003f6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e56:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0d7      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d115      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0cb      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e86:	4b67      	ldr	r3, [pc, #412]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0bf      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e96:	4b63      	ldr	r3, [pc, #396]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0b7      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	495c      	ldr	r1, [pc, #368]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe f93a 	bl	8002130 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d112      	bne.n	8003eec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fe f932 	bl	8002130 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e09b      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ede:	4b51      	ldr	r3, [pc, #324]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xfc>
 8003eea:	e03e      	b.n	8003f6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d112      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef6:	f7fe f91b 	bl	8002130 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e084      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0c:	4b45      	ldr	r3, [pc, #276]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x12a>
 8003f18:	e027      	b.n	8003f6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d11d      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe f904 	bl	8002130 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e06d      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x158>
 8003f46:	e010      	b.n	8003f6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fe f8f2 	bl	8002130 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e05b      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f5e:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ee      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d219      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1be>
 8003f7e:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b25      	ldr	r3, [pc, #148]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	4923      	ldr	r1, [pc, #140]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <HAL_RCC_ClockConfig+0x254>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e034      	b.n	8004016 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4917      	ldr	r1, [pc, #92]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490f      	ldr	r1, [pc, #60]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f823 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <HAL_RCC_ClockConfig+0x258>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490b      	ldr	r1, [pc, #44]	@ (8004028 <HAL_RCC_ClockConfig+0x25c>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <HAL_RCC_ClockConfig+0x260>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004006:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x264>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f844 	bl	8002098 <HAL_InitTick>
 8004010:	4603      	mov	r3, r0
 8004012:	72fb      	strb	r3, [r7, #11]

  return status;
 8004014:	7afb      	ldrb	r3, [r7, #11]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	0800723c 	.word	0x0800723c
 800402c:	20000000 	.word	0x20000000
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b092      	sub	sp, #72	@ 0x48
 800403a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800403c:	4b79      	ldr	r3, [pc, #484]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x34>
 800404c:	2b0c      	cmp	r3, #12
 800404e:	f200 80d5 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1c8>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x28>
 8004056:	2b08      	cmp	r3, #8
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x2e>
 800405a:	e0cf      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b72      	ldr	r3, [pc, #456]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800405e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004060:	e0da      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b72      	ldr	r3, [pc, #456]	@ (800422c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004066:	e0d7      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	4b6f      	ldr	r3, [pc, #444]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004078:	0d9b      	lsrs	r3, r3, #22
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004082:	4b68      	ldr	r3, [pc, #416]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d05d      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2200      	movs	r2, #0
 8004092:	4618      	mov	r0, r3
 8004094:	4611      	mov	r1, r2
 8004096:	4604      	mov	r4, r0
 8004098:	460d      	mov	r5, r1
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040cc:	4659      	mov	r1, fp
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4651      	mov	r1, sl
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	46d4      	mov	ip, sl
 80040dc:	ebb2 080c 	subs.w	r8, r2, ip
 80040e0:	4659      	mov	r1, fp
 80040e2:	eb63 0901 	sbc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	462b      	mov	r3, r5
 8004108:	eb49 0303 	adc.w	r3, r9, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411a:	4629      	mov	r1, r5
 800411c:	024b      	lsls	r3, r1, #9
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	4604      	mov	r4, r0
 8004124:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004128:	4601      	mov	r1, r0
 800412a:	024a      	lsls	r2, r1, #9
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	2200      	movs	r2, #0
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800413c:	f7fc ff90 	bl	8001060 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	647b      	str	r3, [r7, #68]	@ 0x44
 8004148:	e055      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2200      	movs	r2, #0
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	627a      	str	r2, [r7, #36]	@ 0x24
 8004152:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004156:	4642      	mov	r2, r8
 8004158:	464b      	mov	r3, r9
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	0159      	lsls	r1, r3, #5
 8004164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004168:	0150      	lsls	r0, r2, #5
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	46c4      	mov	ip, r8
 8004170:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004174:	4640      	mov	r0, r8
 8004176:	4649      	mov	r1, r9
 8004178:	468c      	mov	ip, r1
 800417a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800418a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800418e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004192:	ebb2 040a 	subs.w	r4, r2, sl
 8004196:	eb63 050b 	sbc.w	r5, r3, fp
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	00eb      	lsls	r3, r5, #3
 80041a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a8:	00e2      	lsls	r2, r4, #3
 80041aa:	4614      	mov	r4, r2
 80041ac:	461d      	mov	r5, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	18e3      	adds	r3, r4, r3
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	460b      	mov	r3, r1
 80041b6:	eb45 0303 	adc.w	r3, r5, r3
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c8:	4629      	mov	r1, r5
 80041ca:	028b      	lsls	r3, r1, #10
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	4604      	mov	r4, r0
 80041d2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80041d6:	4601      	mov	r1, r0
 80041d8:	028a      	lsls	r2, r1, #10
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	2200      	movs	r2, #0
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ea:	f7fc ff39 	bl	8001060 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4613      	mov	r3, r2
 80041f4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80041f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80041fa:	e00d      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	0b5b      	lsrs	r3, r3, #13
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	3301      	adds	r3, #1
 800420c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800421a:	4618      	mov	r0, r3
 800421c:	3748      	adds	r7, #72	@ 0x48
 800421e:	46bd      	mov	sp, r7
 8004220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200
 8004230:	08007230 	.word	0x08007230

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <HAL_RCC_GetHCLKFreq+0x10>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff2 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	0800724c 	.word	0x0800724c

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004274:	f7ff ffde 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0adb      	lsrs	r3, r3, #11
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800724c 	.word	0x0800724c

08004298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042a4:	4b29      	ldr	r3, [pc, #164]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12c      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042b0:	4b26      	ldr	r3, [pc, #152]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80042bc:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e016      	b.n	80042f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	4b20      	ldr	r3, [pc, #128]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	6253      	str	r3, [r2, #36]	@ 0x24
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80042e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ea:	4b18      	ldr	r3, [pc, #96]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	4a17      	ldr	r2, [pc, #92]	@ (800434c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80042fc:	d105      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004304:	d101      	bne.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004306:	2301      	movs	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004310:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0f      	ldr	r2, [pc, #60]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	490b      	ldr	r1, [pc, #44]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000
 8004354:	40023c00 	.word	0x40023c00

08004358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e042      	b.n	80043f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fd08 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	@ 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f971 	bl	8004684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	@ 0x28
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b20      	cmp	r3, #32
 8004416:	d175      	bne.n	8004504 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Transmit+0x2c>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e06e      	b.n	8004506 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2221      	movs	r2, #33	@ 0x21
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004436:	f7fd fe7b 	bl	8002130 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d108      	bne.n	8004464 <HAL_UART_Transmit+0x6c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e003      	b.n	800446c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800446c:	e02e      	b.n	80044cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2180      	movs	r1, #128	@ 0x80
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f848 	bl	800450e <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e03a      	b.n	8004506 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3302      	adds	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e007      	b.n	80044be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1cb      	bne.n	800446e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	2140      	movs	r1, #64	@ 0x40
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f814 	bl	800450e <UART_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e006      	b.n	8004506 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e000      	b.n	8004506 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451e:	e03b      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d037      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fd fe02 	bl	8002130 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <UART_WaitOnFlagUntilTimeout+0x30>
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e03a      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d023      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b80      	cmp	r3, #128	@ 0x80
 8004554:	d020      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d01d      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b08      	cmp	r3, #8
 8004568:	d116      	bne.n	8004598 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f81d 	bl	80045c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2208      	movs	r2, #8
 800458a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d0b4      	beq.n	8004520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b095      	sub	sp, #84	@ 0x54
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80045ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800461c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	60bb      	str	r3, [r7, #8]
   return(result);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0310 	bic.w	r3, r3, #16
 800464e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004658:	61ba      	str	r2, [r7, #24]
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800467a:	bf00      	nop
 800467c:	3754      	adds	r7, #84	@ 0x54
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80046c4:	f023 030c 	bic.w	r3, r3, #12
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	430b      	orrs	r3, r1
 80046d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a55      	ldr	r2, [pc, #340]	@ (8004844 <UART_SetConfig+0x1c0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d103      	bne.n	80046fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046f2:	f7ff fdbd 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	e002      	b.n	8004700 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046fa:	f7ff fda5 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80046fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004708:	d14c      	bne.n	80047a4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	4a49      	ldr	r2, [pc, #292]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	0119      	lsls	r1, r3, #4
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004740:	4b41      	ldr	r3, [pc, #260]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004742:	fba3 0302 	umull	r0, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2064      	movs	r0, #100	@ 0x64
 800474a:	fb00 f303 	mul.w	r3, r0, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	3332      	adds	r3, #50	@ 0x32
 8004754:	4a3c      	ldr	r2, [pc, #240]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004762:	4419      	add	r1, r3
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009a      	lsls	r2, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fbb2 f2f3 	udiv	r2, r2, r3
 800477a:	4b33      	ldr	r3, [pc, #204]	@ (8004848 <UART_SetConfig+0x1c4>)
 800477c:	fba3 0302 	umull	r0, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2064      	movs	r0, #100	@ 0x64
 8004784:	fb00 f303 	mul.w	r3, r0, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	3332      	adds	r3, #50	@ 0x32
 800478e:	4a2e      	ldr	r2, [pc, #184]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 0207 	and.w	r2, r3, #7
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	440a      	add	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a2:	e04a      	b.n	800483a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009a      	lsls	r2, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	4a23      	ldr	r2, [pc, #140]	@ (8004848 <UART_SetConfig+0x1c4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	0119      	lsls	r1, r3, #4
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009a      	lsls	r2, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <UART_SetConfig+0x1c4>)
 80047dc:	fba3 0302 	umull	r0, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2064      	movs	r0, #100	@ 0x64
 80047e4:	fb00 f303 	mul.w	r3, r0, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	@ 0x32
 80047ee:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <UART_SetConfig+0x1c4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047fa:	4419      	add	r1, r3
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009a      	lsls	r2, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004814:	fba3 0302 	umull	r0, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2064      	movs	r0, #100	@ 0x64
 800481c:	fb00 f303 	mul.w	r3, r0, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	3332      	adds	r3, #50	@ 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	@ (8004848 <UART_SetConfig+0x1c4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 020f 	and.w	r2, r3, #15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	440a      	add	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40013800 	.word	0x40013800
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <__cvt>:
 800484c:	2b00      	cmp	r3, #0
 800484e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004852:	461d      	mov	r5, r3
 8004854:	bfbb      	ittet	lt
 8004856:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800485a:	461d      	movlt	r5, r3
 800485c:	2300      	movge	r3, #0
 800485e:	232d      	movlt	r3, #45	@ 0x2d
 8004860:	b088      	sub	sp, #32
 8004862:	4614      	mov	r4, r2
 8004864:	bfb8      	it	lt
 8004866:	4614      	movlt	r4, r2
 8004868:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800486a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800486c:	7013      	strb	r3, [r2, #0]
 800486e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004870:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004874:	f023 0820 	bic.w	r8, r3, #32
 8004878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800487c:	d005      	beq.n	800488a <__cvt+0x3e>
 800487e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004882:	d100      	bne.n	8004886 <__cvt+0x3a>
 8004884:	3601      	adds	r6, #1
 8004886:	2302      	movs	r3, #2
 8004888:	e000      	b.n	800488c <__cvt+0x40>
 800488a:	2303      	movs	r3, #3
 800488c:	aa07      	add	r2, sp, #28
 800488e:	9204      	str	r2, [sp, #16]
 8004890:	aa06      	add	r2, sp, #24
 8004892:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004896:	e9cd 3600 	strd	r3, r6, [sp]
 800489a:	4622      	mov	r2, r4
 800489c:	462b      	mov	r3, r5
 800489e:	f000 fe67 	bl	8005570 <_dtoa_r>
 80048a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048a6:	4607      	mov	r7, r0
 80048a8:	d119      	bne.n	80048de <__cvt+0x92>
 80048aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048ac:	07db      	lsls	r3, r3, #31
 80048ae:	d50e      	bpl.n	80048ce <__cvt+0x82>
 80048b0:	eb00 0906 	add.w	r9, r0, r6
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
 80048b8:	4620      	mov	r0, r4
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7fc f88c 	bl	80009d8 <__aeabi_dcmpeq>
 80048c0:	b108      	cbz	r0, 80048c6 <__cvt+0x7a>
 80048c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80048c6:	2230      	movs	r2, #48	@ 0x30
 80048c8:	9b07      	ldr	r3, [sp, #28]
 80048ca:	454b      	cmp	r3, r9
 80048cc:	d31e      	bcc.n	800490c <__cvt+0xc0>
 80048ce:	4638      	mov	r0, r7
 80048d0:	9b07      	ldr	r3, [sp, #28]
 80048d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80048d4:	1bdb      	subs	r3, r3, r7
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	b008      	add	sp, #32
 80048da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048e2:	eb00 0906 	add.w	r9, r0, r6
 80048e6:	d1e5      	bne.n	80048b4 <__cvt+0x68>
 80048e8:	7803      	ldrb	r3, [r0, #0]
 80048ea:	2b30      	cmp	r3, #48	@ 0x30
 80048ec:	d10a      	bne.n	8004904 <__cvt+0xb8>
 80048ee:	2200      	movs	r2, #0
 80048f0:	2300      	movs	r3, #0
 80048f2:	4620      	mov	r0, r4
 80048f4:	4629      	mov	r1, r5
 80048f6:	f7fc f86f 	bl	80009d8 <__aeabi_dcmpeq>
 80048fa:	b918      	cbnz	r0, 8004904 <__cvt+0xb8>
 80048fc:	f1c6 0601 	rsb	r6, r6, #1
 8004900:	f8ca 6000 	str.w	r6, [sl]
 8004904:	f8da 3000 	ldr.w	r3, [sl]
 8004908:	4499      	add	r9, r3
 800490a:	e7d3      	b.n	80048b4 <__cvt+0x68>
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	9107      	str	r1, [sp, #28]
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e7d9      	b.n	80048c8 <__cvt+0x7c>

08004914 <__exponent>:
 8004914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004916:	2900      	cmp	r1, #0
 8004918:	bfb6      	itet	lt
 800491a:	232d      	movlt	r3, #45	@ 0x2d
 800491c:	232b      	movge	r3, #43	@ 0x2b
 800491e:	4249      	neglt	r1, r1
 8004920:	2909      	cmp	r1, #9
 8004922:	7002      	strb	r2, [r0, #0]
 8004924:	7043      	strb	r3, [r0, #1]
 8004926:	dd29      	ble.n	800497c <__exponent+0x68>
 8004928:	f10d 0307 	add.w	r3, sp, #7
 800492c:	461d      	mov	r5, r3
 800492e:	270a      	movs	r7, #10
 8004930:	fbb1 f6f7 	udiv	r6, r1, r7
 8004934:	461a      	mov	r2, r3
 8004936:	fb07 1416 	mls	r4, r7, r6, r1
 800493a:	3430      	adds	r4, #48	@ 0x30
 800493c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004940:	460c      	mov	r4, r1
 8004942:	2c63      	cmp	r4, #99	@ 0x63
 8004944:	4631      	mov	r1, r6
 8004946:	f103 33ff 	add.w	r3, r3, #4294967295
 800494a:	dcf1      	bgt.n	8004930 <__exponent+0x1c>
 800494c:	3130      	adds	r1, #48	@ 0x30
 800494e:	1e94      	subs	r4, r2, #2
 8004950:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004954:	4623      	mov	r3, r4
 8004956:	1c41      	adds	r1, r0, #1
 8004958:	42ab      	cmp	r3, r5
 800495a:	d30a      	bcc.n	8004972 <__exponent+0x5e>
 800495c:	f10d 0309 	add.w	r3, sp, #9
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	42ac      	cmp	r4, r5
 8004964:	bf88      	it	hi
 8004966:	2300      	movhi	r3, #0
 8004968:	3302      	adds	r3, #2
 800496a:	4403      	add	r3, r0
 800496c:	1a18      	subs	r0, r3, r0
 800496e:	b003      	add	sp, #12
 8004970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004972:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004976:	f801 6f01 	strb.w	r6, [r1, #1]!
 800497a:	e7ed      	b.n	8004958 <__exponent+0x44>
 800497c:	2330      	movs	r3, #48	@ 0x30
 800497e:	3130      	adds	r1, #48	@ 0x30
 8004980:	7083      	strb	r3, [r0, #2]
 8004982:	70c1      	strb	r1, [r0, #3]
 8004984:	1d03      	adds	r3, r0, #4
 8004986:	e7f1      	b.n	800496c <__exponent+0x58>

08004988 <_printf_float>:
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498c:	b091      	sub	sp, #68	@ 0x44
 800498e:	460c      	mov	r4, r1
 8004990:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004994:	4616      	mov	r6, r2
 8004996:	461f      	mov	r7, r3
 8004998:	4605      	mov	r5, r0
 800499a:	f000 fcd9 	bl	8005350 <_localeconv_r>
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	9308      	str	r3, [sp, #32]
 80049a4:	f7fb fbec 	bl	8000180 <strlen>
 80049a8:	2300      	movs	r3, #0
 80049aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80049ac:	f8d8 3000 	ldr.w	r3, [r8]
 80049b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80049b2:	3307      	adds	r3, #7
 80049b4:	f023 0307 	bic.w	r3, r3, #7
 80049b8:	f103 0208 	add.w	r2, r3, #8
 80049bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049c0:	f8d4 b000 	ldr.w	fp, [r4]
 80049c4:	f8c8 2000 	str.w	r2, [r8]
 80049c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295
 80049da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c54 <_printf_float+0x2cc>)
 80049e4:	f7fc f82a 	bl	8000a3c <__aeabi_dcmpun>
 80049e8:	bb70      	cbnz	r0, 8004a48 <_printf_float+0xc0>
 80049ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	4b98      	ldr	r3, [pc, #608]	@ (8004c54 <_printf_float+0x2cc>)
 80049f4:	f7fc f804 	bl	8000a00 <__aeabi_dcmple>
 80049f8:	bb30      	cbnz	r0, 8004a48 <_printf_float+0xc0>
 80049fa:	2200      	movs	r2, #0
 80049fc:	2300      	movs	r3, #0
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fb fff3 	bl	80009ec <__aeabi_dcmplt>
 8004a06:	b110      	cbz	r0, 8004a0e <_printf_float+0x86>
 8004a08:	232d      	movs	r3, #45	@ 0x2d
 8004a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0e:	4a92      	ldr	r2, [pc, #584]	@ (8004c58 <_printf_float+0x2d0>)
 8004a10:	4b92      	ldr	r3, [pc, #584]	@ (8004c5c <_printf_float+0x2d4>)
 8004a12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a16:	bf8c      	ite	hi
 8004a18:	4690      	movhi	r8, r2
 8004a1a:	4698      	movls	r8, r3
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	f04f 0900 	mov.w	r9, #0
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	f02b 0304 	bic.w	r3, fp, #4
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	4633      	mov	r3, r6
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	9700      	str	r7, [sp, #0]
 8004a32:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a34:	f000 f9d4 	bl	8004de0 <_printf_common>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	f040 8090 	bne.w	8004b5e <_printf_float+0x1d6>
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	b011      	add	sp, #68	@ 0x44
 8004a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fb fff4 	bl	8000a3c <__aeabi_dcmpun>
 8004a54:	b148      	cbz	r0, 8004a6a <_printf_float+0xe2>
 8004a56:	464b      	mov	r3, r9
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bfb8      	it	lt
 8004a5c:	232d      	movlt	r3, #45	@ 0x2d
 8004a5e:	4a80      	ldr	r2, [pc, #512]	@ (8004c60 <_printf_float+0x2d8>)
 8004a60:	bfb8      	it	lt
 8004a62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a66:	4b7f      	ldr	r3, [pc, #508]	@ (8004c64 <_printf_float+0x2dc>)
 8004a68:	e7d3      	b.n	8004a12 <_printf_float+0x8a>
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	d13f      	bne.n	8004af4 <_printf_float+0x16c>
 8004a74:	2306      	movs	r3, #6
 8004a76:	6063      	str	r3, [r4, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	9206      	str	r2, [sp, #24]
 8004a82:	aa0e      	add	r2, sp, #56	@ 0x38
 8004a84:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004a88:	aa0d      	add	r2, sp, #52	@ 0x34
 8004a8a:	9203      	str	r2, [sp, #12]
 8004a8c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004a90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	4642      	mov	r2, r8
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004aa0:	f7ff fed4 	bl	800484c <__cvt>
 8004aa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	2947      	cmp	r1, #71	@ 0x47
 8004aaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004aac:	d128      	bne.n	8004b00 <_printf_float+0x178>
 8004aae:	1cc8      	adds	r0, r1, #3
 8004ab0:	db02      	blt.n	8004ab8 <_printf_float+0x130>
 8004ab2:	6863      	ldr	r3, [r4, #4]
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	dd40      	ble.n	8004b3a <_printf_float+0x1b2>
 8004ab8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004abc:	fa5f fa8a 	uxtb.w	sl, sl
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	3901      	subs	r1, #1
 8004ac4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ac8:	910d      	str	r1, [sp, #52]	@ 0x34
 8004aca:	f7ff ff23 	bl	8004914 <__exponent>
 8004ace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ad0:	4681      	mov	r9, r0
 8004ad2:	1813      	adds	r3, r2, r0
 8004ad4:	2a01      	cmp	r2, #1
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	dc02      	bgt.n	8004ae0 <_printf_float+0x158>
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	07d2      	lsls	r2, r2, #31
 8004ade:	d501      	bpl.n	8004ae4 <_printf_float+0x15c>
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d09e      	beq.n	8004a2a <_printf_float+0xa2>
 8004aec:	232d      	movs	r3, #45	@ 0x2d
 8004aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004af2:	e79a      	b.n	8004a2a <_printf_float+0xa2>
 8004af4:	2947      	cmp	r1, #71	@ 0x47
 8004af6:	d1bf      	bne.n	8004a78 <_printf_float+0xf0>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1bd      	bne.n	8004a78 <_printf_float+0xf0>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e7ba      	b.n	8004a76 <_printf_float+0xee>
 8004b00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b04:	d9dc      	bls.n	8004ac0 <_printf_float+0x138>
 8004b06:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b0a:	d118      	bne.n	8004b3e <_printf_float+0x1b6>
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	dd0b      	ble.n	8004b2a <_printf_float+0x1a2>
 8004b12:	6121      	str	r1, [r4, #16]
 8004b14:	b913      	cbnz	r3, 8004b1c <_printf_float+0x194>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	07d0      	lsls	r0, r2, #31
 8004b1a:	d502      	bpl.n	8004b22 <_printf_float+0x19a>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	440b      	add	r3, r1
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	f04f 0900 	mov.w	r9, #0
 8004b26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b28:	e7dc      	b.n	8004ae4 <_printf_float+0x15c>
 8004b2a:	b913      	cbnz	r3, 8004b32 <_printf_float+0x1aa>
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	07d2      	lsls	r2, r2, #31
 8004b30:	d501      	bpl.n	8004b36 <_printf_float+0x1ae>
 8004b32:	3302      	adds	r3, #2
 8004b34:	e7f4      	b.n	8004b20 <_printf_float+0x198>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e7f2      	b.n	8004b20 <_printf_float+0x198>
 8004b3a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b40:	4299      	cmp	r1, r3
 8004b42:	db05      	blt.n	8004b50 <_printf_float+0x1c8>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	6121      	str	r1, [r4, #16]
 8004b48:	07d8      	lsls	r0, r3, #31
 8004b4a:	d5ea      	bpl.n	8004b22 <_printf_float+0x19a>
 8004b4c:	1c4b      	adds	r3, r1, #1
 8004b4e:	e7e7      	b.n	8004b20 <_printf_float+0x198>
 8004b50:	2900      	cmp	r1, #0
 8004b52:	bfcc      	ite	gt
 8004b54:	2201      	movgt	r2, #1
 8004b56:	f1c1 0202 	rsble	r2, r1, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	e7e0      	b.n	8004b20 <_printf_float+0x198>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	055a      	lsls	r2, r3, #21
 8004b62:	d407      	bmi.n	8004b74 <_printf_float+0x1ec>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	4642      	mov	r2, r8
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d12b      	bne.n	8004bca <_printf_float+0x242>
 8004b72:	e764      	b.n	8004a3e <_printf_float+0xb6>
 8004b74:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b78:	f240 80dc 	bls.w	8004d34 <_printf_float+0x3ac>
 8004b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b80:	2200      	movs	r2, #0
 8004b82:	2300      	movs	r3, #0
 8004b84:	f7fb ff28 	bl	80009d8 <__aeabi_dcmpeq>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d033      	beq.n	8004bf4 <_printf_float+0x26c>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <_printf_float+0x2e0>)
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f af51 	beq.w	8004a3e <_printf_float+0xb6>
 8004b9c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004ba0:	4543      	cmp	r3, r8
 8004ba2:	db02      	blt.n	8004baa <_printf_float+0x222>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	07d8      	lsls	r0, r3, #31
 8004ba8:	d50f      	bpl.n	8004bca <_printf_float+0x242>
 8004baa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f43f af42 	beq.w	8004a3e <_printf_float+0xb6>
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bc2:	f104 0a1a 	add.w	sl, r4, #26
 8004bc6:	45c8      	cmp	r8, r9
 8004bc8:	dc09      	bgt.n	8004bde <_printf_float+0x256>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	079b      	lsls	r3, r3, #30
 8004bce:	f100 8102 	bmi.w	8004dd6 <_printf_float+0x44e>
 8004bd2:	68e0      	ldr	r0, [r4, #12]
 8004bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	bfb8      	it	lt
 8004bda:	4618      	movlt	r0, r3
 8004bdc:	e731      	b.n	8004a42 <_printf_float+0xba>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f af28 	beq.w	8004a3e <_printf_float+0xb6>
 8004bee:	f109 0901 	add.w	r9, r9, #1
 8004bf2:	e7e8      	b.n	8004bc6 <_printf_float+0x23e>
 8004bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dc38      	bgt.n	8004c6c <_printf_float+0x2e4>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <_printf_float+0x2e0>)
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f af1a 	beq.w	8004a3e <_printf_float+0xb6>
 8004c0a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c0e:	ea59 0303 	orrs.w	r3, r9, r3
 8004c12:	d102      	bne.n	8004c1a <_printf_float+0x292>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	d5d7      	bpl.n	8004bca <_printf_float+0x242>
 8004c1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	f43f af0a 	beq.w	8004a3e <_printf_float+0xb6>
 8004c2a:	f04f 0a00 	mov.w	sl, #0
 8004c2e:	f104 0b1a 	add.w	fp, r4, #26
 8004c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c34:	425b      	negs	r3, r3
 8004c36:	4553      	cmp	r3, sl
 8004c38:	dc01      	bgt.n	8004c3e <_printf_float+0x2b6>
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	e793      	b.n	8004b66 <_printf_float+0x1de>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	465a      	mov	r2, fp
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f aef8 	beq.w	8004a3e <_printf_float+0xb6>
 8004c4e:	f10a 0a01 	add.w	sl, sl, #1
 8004c52:	e7ee      	b.n	8004c32 <_printf_float+0x2aa>
 8004c54:	7fefffff 	.word	0x7fefffff
 8004c58:	08007258 	.word	0x08007258
 8004c5c:	08007254 	.word	0x08007254
 8004c60:	08007260 	.word	0x08007260
 8004c64:	0800725c 	.word	0x0800725c
 8004c68:	08007264 	.word	0x08007264
 8004c6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c6e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c72:	4553      	cmp	r3, sl
 8004c74:	bfa8      	it	ge
 8004c76:	4653      	movge	r3, sl
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	4699      	mov	r9, r3
 8004c7c:	dc36      	bgt.n	8004cec <_printf_float+0x364>
 8004c7e:	f04f 0b00 	mov.w	fp, #0
 8004c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c86:	f104 021a 	add.w	r2, r4, #26
 8004c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c8e:	eba3 0309 	sub.w	r3, r3, r9
 8004c92:	455b      	cmp	r3, fp
 8004c94:	dc31      	bgt.n	8004cfa <_printf_float+0x372>
 8004c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c98:	459a      	cmp	sl, r3
 8004c9a:	dc3a      	bgt.n	8004d12 <_printf_float+0x38a>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	07da      	lsls	r2, r3, #31
 8004ca0:	d437      	bmi.n	8004d12 <_printf_float+0x38a>
 8004ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ca4:	ebaa 0903 	sub.w	r9, sl, r3
 8004ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004caa:	ebaa 0303 	sub.w	r3, sl, r3
 8004cae:	4599      	cmp	r9, r3
 8004cb0:	bfa8      	it	ge
 8004cb2:	4699      	movge	r9, r3
 8004cb4:	f1b9 0f00 	cmp.w	r9, #0
 8004cb8:	dc33      	bgt.n	8004d22 <_printf_float+0x39a>
 8004cba:	f04f 0800 	mov.w	r8, #0
 8004cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc2:	f104 0b1a 	add.w	fp, r4, #26
 8004cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8004ccc:	eba3 0309 	sub.w	r3, r3, r9
 8004cd0:	4543      	cmp	r3, r8
 8004cd2:	f77f af7a 	ble.w	8004bca <_printf_float+0x242>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	465a      	mov	r2, fp
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f43f aeac 	beq.w	8004a3e <_printf_float+0xb6>
 8004ce6:	f108 0801 	add.w	r8, r8, #1
 8004cea:	e7ec      	b.n	8004cc6 <_printf_float+0x33e>
 8004cec:	4642      	mov	r2, r8
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	47b8      	blx	r7
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d1c2      	bne.n	8004c7e <_printf_float+0x2f6>
 8004cf8:	e6a1      	b.n	8004a3e <_printf_float+0xb6>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f ae9a 	beq.w	8004a3e <_printf_float+0xb6>
 8004d0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d0c:	f10b 0b01 	add.w	fp, fp, #1
 8004d10:	e7bb      	b.n	8004c8a <_printf_float+0x302>
 8004d12:	4631      	mov	r1, r6
 8004d14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d1c0      	bne.n	8004ca2 <_printf_float+0x31a>
 8004d20:	e68d      	b.n	8004a3e <_printf_float+0xb6>
 8004d22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d24:	464b      	mov	r3, r9
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	4442      	add	r2, r8
 8004d2c:	47b8      	blx	r7
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d1c3      	bne.n	8004cba <_printf_float+0x332>
 8004d32:	e684      	b.n	8004a3e <_printf_float+0xb6>
 8004d34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d38:	f1ba 0f01 	cmp.w	sl, #1
 8004d3c:	dc01      	bgt.n	8004d42 <_printf_float+0x3ba>
 8004d3e:	07db      	lsls	r3, r3, #31
 8004d40:	d536      	bpl.n	8004db0 <_printf_float+0x428>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4642      	mov	r2, r8
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f ae76 	beq.w	8004a3e <_printf_float+0xb6>
 8004d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	f43f ae6e 	beq.w	8004a3e <_printf_float+0xb6>
 8004d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d66:	2200      	movs	r2, #0
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d6e:	f7fb fe33 	bl	80009d8 <__aeabi_dcmpeq>
 8004d72:	b9c0      	cbnz	r0, 8004da6 <_printf_float+0x41e>
 8004d74:	4653      	mov	r3, sl
 8004d76:	f108 0201 	add.w	r2, r8, #1
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	d10c      	bne.n	8004d9e <_printf_float+0x416>
 8004d84:	e65b      	b.n	8004a3e <_printf_float+0xb6>
 8004d86:	2301      	movs	r3, #1
 8004d88:	465a      	mov	r2, fp
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b8      	blx	r7
 8004d90:	3001      	adds	r0, #1
 8004d92:	f43f ae54 	beq.w	8004a3e <_printf_float+0xb6>
 8004d96:	f108 0801 	add.w	r8, r8, #1
 8004d9a:	45d0      	cmp	r8, sl
 8004d9c:	dbf3      	blt.n	8004d86 <_printf_float+0x3fe>
 8004d9e:	464b      	mov	r3, r9
 8004da0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004da4:	e6e0      	b.n	8004b68 <_printf_float+0x1e0>
 8004da6:	f04f 0800 	mov.w	r8, #0
 8004daa:	f104 0b1a 	add.w	fp, r4, #26
 8004dae:	e7f4      	b.n	8004d9a <_printf_float+0x412>
 8004db0:	2301      	movs	r3, #1
 8004db2:	4642      	mov	r2, r8
 8004db4:	e7e1      	b.n	8004d7a <_printf_float+0x3f2>
 8004db6:	2301      	movs	r3, #1
 8004db8:	464a      	mov	r2, r9
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	f43f ae3c 	beq.w	8004a3e <_printf_float+0xb6>
 8004dc6:	f108 0801 	add.w	r8, r8, #1
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004dce:	1a5b      	subs	r3, r3, r1
 8004dd0:	4543      	cmp	r3, r8
 8004dd2:	dcf0      	bgt.n	8004db6 <_printf_float+0x42e>
 8004dd4:	e6fd      	b.n	8004bd2 <_printf_float+0x24a>
 8004dd6:	f04f 0800 	mov.w	r8, #0
 8004dda:	f104 0919 	add.w	r9, r4, #25
 8004dde:	e7f4      	b.n	8004dca <_printf_float+0x442>

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4698      	mov	r8, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	4607      	mov	r7, r0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bfb8      	it	lt
 8004df2:	4613      	movlt	r3, r2
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc2b      	bgt.n	8004e80 <_printf_common+0xa0>
 8004e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	3b00      	subs	r3, #0
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d430      	bmi.n	8004e9a <_printf_common+0xba>
 8004e38:	4641      	mov	r1, r8
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e40:	47c8      	blx	r9
 8004e42:	3001      	adds	r0, #1
 8004e44:	d023      	beq.n	8004e8e <_printf_common+0xae>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	6922      	ldr	r2, [r4, #16]
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf14      	ite	ne
 8004e52:	2500      	movne	r5, #0
 8004e54:	6833      	ldreq	r3, [r6, #0]
 8004e56:	f04f 0600 	mov.w	r6, #0
 8004e5a:	bf08      	it	eq
 8004e5c:	68e5      	ldreq	r5, [r4, #12]
 8004e5e:	f104 041a 	add.w	r4, r4, #26
 8004e62:	bf08      	it	eq
 8004e64:	1aed      	subeq	r5, r5, r3
 8004e66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e6a:	bf08      	it	eq
 8004e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bfc4      	itt	gt
 8004e74:	1a9b      	subgt	r3, r3, r2
 8004e76:	18ed      	addgt	r5, r5, r3
 8004e78:	42b5      	cmp	r5, r6
 8004e7a:	d11a      	bne.n	8004eb2 <_printf_common+0xd2>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e008      	b.n	8004e92 <_printf_common+0xb2>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4652      	mov	r2, sl
 8004e84:	4641      	mov	r1, r8
 8004e86:	4638      	mov	r0, r7
 8004e88:	47c8      	blx	r9
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d103      	bne.n	8004e96 <_printf_common+0xb6>
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e96:	3501      	adds	r5, #1
 8004e98:	e7c1      	b.n	8004e1e <_printf_common+0x3e>
 8004e9a:	2030      	movs	r0, #48	@ 0x30
 8004e9c:	18e1      	adds	r1, r4, r3
 8004e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ea8:	4422      	add	r2, r4
 8004eaa:	3302      	adds	r3, #2
 8004eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eb0:	e7c2      	b.n	8004e38 <_printf_common+0x58>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	4638      	mov	r0, r7
 8004eba:	47c8      	blx	r9
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d0e6      	beq.n	8004e8e <_printf_common+0xae>
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7d9      	b.n	8004e78 <_printf_common+0x98>

08004ec4 <_printf_i>:
 8004ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	7e0f      	ldrb	r7, [r1, #24]
 8004eca:	4691      	mov	r9, r2
 8004ecc:	2f78      	cmp	r7, #120	@ 0x78
 8004ece:	4680      	mov	r8, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	469a      	mov	sl, r3
 8004ed4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eda:	d807      	bhi.n	8004eec <_printf_i+0x28>
 8004edc:	2f62      	cmp	r7, #98	@ 0x62
 8004ede:	d80a      	bhi.n	8004ef6 <_printf_i+0x32>
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	f000 80d1 	beq.w	8005088 <_printf_i+0x1c4>
 8004ee6:	2f58      	cmp	r7, #88	@ 0x58
 8004ee8:	f000 80b8 	beq.w	800505c <_printf_i+0x198>
 8004eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ef4:	e03a      	b.n	8004f6c <_printf_i+0xa8>
 8004ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004efa:	2b15      	cmp	r3, #21
 8004efc:	d8f6      	bhi.n	8004eec <_printf_i+0x28>
 8004efe:	a101      	add	r1, pc, #4	@ (adr r1, 8004f04 <_printf_i+0x40>)
 8004f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f71 	.word	0x08004f71
 8004f0c:	08004eed 	.word	0x08004eed
 8004f10:	08004eed 	.word	0x08004eed
 8004f14:	08004eed 	.word	0x08004eed
 8004f18:	08004eed 	.word	0x08004eed
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004eed 	.word	0x08004eed
 8004f24:	08004eed 	.word	0x08004eed
 8004f28:	08004eed 	.word	0x08004eed
 8004f2c:	08004eed 	.word	0x08004eed
 8004f30:	0800506f 	.word	0x0800506f
 8004f34:	08004f9b 	.word	0x08004f9b
 8004f38:	08005029 	.word	0x08005029
 8004f3c:	08004eed 	.word	0x08004eed
 8004f40:	08004eed 	.word	0x08004eed
 8004f44:	08005091 	.word	0x08005091
 8004f48:	08004eed 	.word	0x08004eed
 8004f4c:	08004f9b 	.word	0x08004f9b
 8004f50:	08004eed 	.word	0x08004eed
 8004f54:	08004eed 	.word	0x08004eed
 8004f58:	08005031 	.word	0x08005031
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6032      	str	r2, [r6, #0]
 8004f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e09c      	b.n	80050aa <_printf_i+0x1e6>
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	1d19      	adds	r1, r3, #4
 8004f76:	6031      	str	r1, [r6, #0]
 8004f78:	0606      	lsls	r6, r0, #24
 8004f7a:	d501      	bpl.n	8004f80 <_printf_i+0xbc>
 8004f7c:	681d      	ldr	r5, [r3, #0]
 8004f7e:	e003      	b.n	8004f88 <_printf_i+0xc4>
 8004f80:	0645      	lsls	r5, r0, #25
 8004f82:	d5fb      	bpl.n	8004f7c <_printf_i+0xb8>
 8004f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	da03      	bge.n	8004f94 <_printf_i+0xd0>
 8004f8c:	232d      	movs	r3, #45	@ 0x2d
 8004f8e:	426d      	negs	r5, r5
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f94:	230a      	movs	r3, #10
 8004f96:	4858      	ldr	r0, [pc, #352]	@ (80050f8 <_printf_i+0x234>)
 8004f98:	e011      	b.n	8004fbe <_printf_i+0xfa>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	0608      	lsls	r0, r1, #24
 8004fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fa4:	d402      	bmi.n	8004fac <_printf_i+0xe8>
 8004fa6:	0649      	lsls	r1, r1, #25
 8004fa8:	bf48      	it	mi
 8004faa:	b2ad      	uxthmi	r5, r5
 8004fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	bf14      	ite	ne
 8004fb2:	230a      	movne	r3, #10
 8004fb4:	2308      	moveq	r3, #8
 8004fb6:	4850      	ldr	r0, [pc, #320]	@ (80050f8 <_printf_i+0x234>)
 8004fb8:	2100      	movs	r1, #0
 8004fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fbe:	6866      	ldr	r6, [r4, #4]
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	60a6      	str	r6, [r4, #8]
 8004fc4:	db05      	blt.n	8004fd2 <_printf_i+0x10e>
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	432e      	orrs	r6, r5
 8004fca:	f021 0104 	bic.w	r1, r1, #4
 8004fce:	6021      	str	r1, [r4, #0]
 8004fd0:	d04b      	beq.n	800506a <_printf_i+0x1a6>
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fd8:	fb03 5711 	mls	r7, r3, r1, r5
 8004fdc:	5dc7      	ldrb	r7, [r0, r7]
 8004fde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe2:	462f      	mov	r7, r5
 8004fe4:	42bb      	cmp	r3, r7
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	d9f4      	bls.n	8004fd4 <_printf_i+0x110>
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d10b      	bne.n	8005006 <_printf_i+0x142>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	07df      	lsls	r7, r3, #31
 8004ff2:	d508      	bpl.n	8005006 <_printf_i+0x142>
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	6861      	ldr	r1, [r4, #4]
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	bfde      	ittt	le
 8004ffc:	2330      	movle	r3, #48	@ 0x30
 8004ffe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005002:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005006:	1b92      	subs	r2, r2, r6
 8005008:	6122      	str	r2, [r4, #16]
 800500a:	464b      	mov	r3, r9
 800500c:	4621      	mov	r1, r4
 800500e:	4640      	mov	r0, r8
 8005010:	f8cd a000 	str.w	sl, [sp]
 8005014:	aa03      	add	r2, sp, #12
 8005016:	f7ff fee3 	bl	8004de0 <_printf_common>
 800501a:	3001      	adds	r0, #1
 800501c:	d14a      	bne.n	80050b4 <_printf_i+0x1f0>
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
 8005022:	b004      	add	sp, #16
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	2778      	movs	r7, #120	@ 0x78
 8005032:	4832      	ldr	r0, [pc, #200]	@ (80050fc <_printf_i+0x238>)
 8005034:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	061f      	lsls	r7, r3, #24
 800503e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005042:	d402      	bmi.n	800504a <_printf_i+0x186>
 8005044:	065f      	lsls	r7, r3, #25
 8005046:	bf48      	it	mi
 8005048:	b2ad      	uxthmi	r5, r5
 800504a:	6031      	str	r1, [r6, #0]
 800504c:	07d9      	lsls	r1, r3, #31
 800504e:	bf44      	itt	mi
 8005050:	f043 0320 	orrmi.w	r3, r3, #32
 8005054:	6023      	strmi	r3, [r4, #0]
 8005056:	b11d      	cbz	r5, 8005060 <_printf_i+0x19c>
 8005058:	2310      	movs	r3, #16
 800505a:	e7ad      	b.n	8004fb8 <_printf_i+0xf4>
 800505c:	4826      	ldr	r0, [pc, #152]	@ (80050f8 <_printf_i+0x234>)
 800505e:	e7e9      	b.n	8005034 <_printf_i+0x170>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	e7f6      	b.n	8005058 <_printf_i+0x194>
 800506a:	4616      	mov	r6, r2
 800506c:	e7bd      	b.n	8004fea <_printf_i+0x126>
 800506e:	6833      	ldr	r3, [r6, #0]
 8005070:	6825      	ldr	r5, [r4, #0]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6961      	ldr	r1, [r4, #20]
 8005076:	6030      	str	r0, [r6, #0]
 8005078:	062e      	lsls	r6, r5, #24
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	d501      	bpl.n	8005082 <_printf_i+0x1be>
 800507e:	6019      	str	r1, [r3, #0]
 8005080:	e002      	b.n	8005088 <_printf_i+0x1c4>
 8005082:	0668      	lsls	r0, r5, #25
 8005084:	d5fb      	bpl.n	800507e <_printf_i+0x1ba>
 8005086:	8019      	strh	r1, [r3, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	4616      	mov	r6, r2
 800508c:	6123      	str	r3, [r4, #16]
 800508e:	e7bc      	b.n	800500a <_printf_i+0x146>
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	2100      	movs	r1, #0
 8005094:	1d1a      	adds	r2, r3, #4
 8005096:	6032      	str	r2, [r6, #0]
 8005098:	681e      	ldr	r6, [r3, #0]
 800509a:	6862      	ldr	r2, [r4, #4]
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f9ce 	bl	800543e <memchr>
 80050a2:	b108      	cbz	r0, 80050a8 <_printf_i+0x1e4>
 80050a4:	1b80      	subs	r0, r0, r6
 80050a6:	6060      	str	r0, [r4, #4]
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	2300      	movs	r3, #0
 80050ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b2:	e7aa      	b.n	800500a <_printf_i+0x146>
 80050b4:	4632      	mov	r2, r6
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	47d0      	blx	sl
 80050be:	3001      	adds	r0, #1
 80050c0:	d0ad      	beq.n	800501e <_printf_i+0x15a>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	079b      	lsls	r3, r3, #30
 80050c6:	d413      	bmi.n	80050f0 <_printf_i+0x22c>
 80050c8:	68e0      	ldr	r0, [r4, #12]
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	4298      	cmp	r0, r3
 80050ce:	bfb8      	it	lt
 80050d0:	4618      	movlt	r0, r3
 80050d2:	e7a6      	b.n	8005022 <_printf_i+0x15e>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4632      	mov	r2, r6
 80050d8:	4649      	mov	r1, r9
 80050da:	4640      	mov	r0, r8
 80050dc:	47d0      	blx	sl
 80050de:	3001      	adds	r0, #1
 80050e0:	d09d      	beq.n	800501e <_printf_i+0x15a>
 80050e2:	3501      	adds	r5, #1
 80050e4:	68e3      	ldr	r3, [r4, #12]
 80050e6:	9903      	ldr	r1, [sp, #12]
 80050e8:	1a5b      	subs	r3, r3, r1
 80050ea:	42ab      	cmp	r3, r5
 80050ec:	dcf2      	bgt.n	80050d4 <_printf_i+0x210>
 80050ee:	e7eb      	b.n	80050c8 <_printf_i+0x204>
 80050f0:	2500      	movs	r5, #0
 80050f2:	f104 0619 	add.w	r6, r4, #25
 80050f6:	e7f5      	b.n	80050e4 <_printf_i+0x220>
 80050f8:	08007266 	.word	0x08007266
 80050fc:	08007277 	.word	0x08007277

08005100 <std>:
 8005100:	2300      	movs	r3, #0
 8005102:	b510      	push	{r4, lr}
 8005104:	4604      	mov	r4, r0
 8005106:	e9c0 3300 	strd	r3, r3, [r0]
 800510a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800510e:	6083      	str	r3, [r0, #8]
 8005110:	8181      	strh	r1, [r0, #12]
 8005112:	6643      	str	r3, [r0, #100]	@ 0x64
 8005114:	81c2      	strh	r2, [r0, #14]
 8005116:	6183      	str	r3, [r0, #24]
 8005118:	4619      	mov	r1, r3
 800511a:	2208      	movs	r2, #8
 800511c:	305c      	adds	r0, #92	@ 0x5c
 800511e:	f000 f90e 	bl	800533e <memset>
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <std+0x58>)
 8005124:	6224      	str	r4, [r4, #32]
 8005126:	6263      	str	r3, [r4, #36]	@ 0x24
 8005128:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <std+0x5c>)
 800512a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800512c:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <std+0x60>)
 800512e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005130:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <std+0x64>)
 8005132:	6323      	str	r3, [r4, #48]	@ 0x30
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <std+0x68>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d006      	beq.n	8005148 <std+0x48>
 800513a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800513e:	4294      	cmp	r4, r2
 8005140:	d002      	beq.n	8005148 <std+0x48>
 8005142:	33d0      	adds	r3, #208	@ 0xd0
 8005144:	429c      	cmp	r4, r3
 8005146:	d105      	bne.n	8005154 <std+0x54>
 8005148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005150:	f000 b972 	b.w	8005438 <__retarget_lock_init_recursive>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop
 8005158:	080052b9 	.word	0x080052b9
 800515c:	080052db 	.word	0x080052db
 8005160:	08005313 	.word	0x08005313
 8005164:	08005337 	.word	0x08005337
 8005168:	200002fc 	.word	0x200002fc

0800516c <stdio_exit_handler>:
 800516c:	4a02      	ldr	r2, [pc, #8]	@ (8005178 <stdio_exit_handler+0xc>)
 800516e:	4903      	ldr	r1, [pc, #12]	@ (800517c <stdio_exit_handler+0x10>)
 8005170:	4803      	ldr	r0, [pc, #12]	@ (8005180 <stdio_exit_handler+0x14>)
 8005172:	f000 b869 	b.w	8005248 <_fwalk_sglue>
 8005176:	bf00      	nop
 8005178:	2000000c 	.word	0x2000000c
 800517c:	08006d89 	.word	0x08006d89
 8005180:	2000001c 	.word	0x2000001c

08005184 <cleanup_stdio>:
 8005184:	6841      	ldr	r1, [r0, #4]
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <cleanup_stdio+0x34>)
 8005188:	b510      	push	{r4, lr}
 800518a:	4299      	cmp	r1, r3
 800518c:	4604      	mov	r4, r0
 800518e:	d001      	beq.n	8005194 <cleanup_stdio+0x10>
 8005190:	f001 fdfa 	bl	8006d88 <_fflush_r>
 8005194:	68a1      	ldr	r1, [r4, #8]
 8005196:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <cleanup_stdio+0x38>)
 8005198:	4299      	cmp	r1, r3
 800519a:	d002      	beq.n	80051a2 <cleanup_stdio+0x1e>
 800519c:	4620      	mov	r0, r4
 800519e:	f001 fdf3 	bl	8006d88 <_fflush_r>
 80051a2:	68e1      	ldr	r1, [r4, #12]
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <cleanup_stdio+0x3c>)
 80051a6:	4299      	cmp	r1, r3
 80051a8:	d004      	beq.n	80051b4 <cleanup_stdio+0x30>
 80051aa:	4620      	mov	r0, r4
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f001 bdea 	b.w	8006d88 <_fflush_r>
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	200002fc 	.word	0x200002fc
 80051bc:	20000364 	.word	0x20000364
 80051c0:	200003cc 	.word	0x200003cc

080051c4 <global_stdio_init.part.0>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <global_stdio_init.part.0+0x30>)
 80051c8:	4c0b      	ldr	r4, [pc, #44]	@ (80051f8 <global_stdio_init.part.0+0x34>)
 80051ca:	4a0c      	ldr	r2, [pc, #48]	@ (80051fc <global_stdio_init.part.0+0x38>)
 80051cc:	4620      	mov	r0, r4
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	2104      	movs	r1, #4
 80051d2:	2200      	movs	r2, #0
 80051d4:	f7ff ff94 	bl	8005100 <std>
 80051d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051dc:	2201      	movs	r2, #1
 80051de:	2109      	movs	r1, #9
 80051e0:	f7ff ff8e 	bl	8005100 <std>
 80051e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051e8:	2202      	movs	r2, #2
 80051ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ee:	2112      	movs	r1, #18
 80051f0:	f7ff bf86 	b.w	8005100 <std>
 80051f4:	20000434 	.word	0x20000434
 80051f8:	200002fc 	.word	0x200002fc
 80051fc:	0800516d 	.word	0x0800516d

08005200 <__sfp_lock_acquire>:
 8005200:	4801      	ldr	r0, [pc, #4]	@ (8005208 <__sfp_lock_acquire+0x8>)
 8005202:	f000 b91a 	b.w	800543a <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	2000043d 	.word	0x2000043d

0800520c <__sfp_lock_release>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__sfp_lock_release+0x8>)
 800520e:	f000 b915 	b.w	800543c <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	2000043d 	.word	0x2000043d

08005218 <__sinit>:
 8005218:	b510      	push	{r4, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	f7ff fff0 	bl	8005200 <__sfp_lock_acquire>
 8005220:	6a23      	ldr	r3, [r4, #32]
 8005222:	b11b      	cbz	r3, 800522c <__sinit+0x14>
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005228:	f7ff bff0 	b.w	800520c <__sfp_lock_release>
 800522c:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <__sinit+0x28>)
 800522e:	6223      	str	r3, [r4, #32]
 8005230:	4b04      	ldr	r3, [pc, #16]	@ (8005244 <__sinit+0x2c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f5      	bne.n	8005224 <__sinit+0xc>
 8005238:	f7ff ffc4 	bl	80051c4 <global_stdio_init.part.0>
 800523c:	e7f2      	b.n	8005224 <__sinit+0xc>
 800523e:	bf00      	nop
 8005240:	08005185 	.word	0x08005185
 8005244:	20000434 	.word	0x20000434

08005248 <_fwalk_sglue>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	4607      	mov	r7, r0
 800524e:	4688      	mov	r8, r1
 8005250:	4614      	mov	r4, r2
 8005252:	2600      	movs	r6, #0
 8005254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005258:	f1b9 0901 	subs.w	r9, r9, #1
 800525c:	d505      	bpl.n	800526a <_fwalk_sglue+0x22>
 800525e:	6824      	ldr	r4, [r4, #0]
 8005260:	2c00      	cmp	r4, #0
 8005262:	d1f7      	bne.n	8005254 <_fwalk_sglue+0xc>
 8005264:	4630      	mov	r0, r6
 8005266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526a:	89ab      	ldrh	r3, [r5, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d907      	bls.n	8005280 <_fwalk_sglue+0x38>
 8005270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005274:	3301      	adds	r3, #1
 8005276:	d003      	beq.n	8005280 <_fwalk_sglue+0x38>
 8005278:	4629      	mov	r1, r5
 800527a:	4638      	mov	r0, r7
 800527c:	47c0      	blx	r8
 800527e:	4306      	orrs	r6, r0
 8005280:	3568      	adds	r5, #104	@ 0x68
 8005282:	e7e9      	b.n	8005258 <_fwalk_sglue+0x10>

08005284 <iprintf>:
 8005284:	b40f      	push	{r0, r1, r2, r3}
 8005286:	b507      	push	{r0, r1, r2, lr}
 8005288:	4906      	ldr	r1, [pc, #24]	@ (80052a4 <iprintf+0x20>)
 800528a:	ab04      	add	r3, sp, #16
 800528c:	6808      	ldr	r0, [r1, #0]
 800528e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005292:	6881      	ldr	r1, [r0, #8]
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	f001 fbdf 	bl	8006a58 <_vfiprintf_r>
 800529a:	b003      	add	sp, #12
 800529c:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a0:	b004      	add	sp, #16
 80052a2:	4770      	bx	lr
 80052a4:	20000018 	.word	0x20000018

080052a8 <putchar>:
 80052a8:	4b02      	ldr	r3, [pc, #8]	@ (80052b4 <putchar+0xc>)
 80052aa:	4601      	mov	r1, r0
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	6882      	ldr	r2, [r0, #8]
 80052b0:	f001 bd92 	b.w	8006dd8 <_putc_r>
 80052b4:	20000018 	.word	0x20000018

080052b8 <__sread>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f86c 	bl	800539c <_read_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	bfab      	itete	ge
 80052c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052ca:	89a3      	ldrhlt	r3, [r4, #12]
 80052cc:	181b      	addge	r3, r3, r0
 80052ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052d2:	bfac      	ite	ge
 80052d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052d6:	81a3      	strhlt	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__swrite>:
 80052da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052de:	461f      	mov	r7, r3
 80052e0:	898b      	ldrh	r3, [r1, #12]
 80052e2:	4605      	mov	r5, r0
 80052e4:	05db      	lsls	r3, r3, #23
 80052e6:	460c      	mov	r4, r1
 80052e8:	4616      	mov	r6, r2
 80052ea:	d505      	bpl.n	80052f8 <__swrite+0x1e>
 80052ec:	2302      	movs	r3, #2
 80052ee:	2200      	movs	r2, #0
 80052f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f4:	f000 f840 	bl	8005378 <_lseek_r>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	4632      	mov	r2, r6
 80052fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	4628      	mov	r0, r5
 8005304:	463b      	mov	r3, r7
 8005306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	f000 b857 	b.w	80053c0 <_write_r>

08005312 <__sseek>:
 8005312:	b510      	push	{r4, lr}
 8005314:	460c      	mov	r4, r1
 8005316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531a:	f000 f82d 	bl	8005378 <_lseek_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	bf15      	itete	ne
 8005324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800532a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800532e:	81a3      	strheq	r3, [r4, #12]
 8005330:	bf18      	it	ne
 8005332:	81a3      	strhne	r3, [r4, #12]
 8005334:	bd10      	pop	{r4, pc}

08005336 <__sclose>:
 8005336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533a:	f000 b80d 	b.w	8005358 <_close_r>

0800533e <memset>:
 800533e:	4603      	mov	r3, r0
 8005340:	4402      	add	r2, r0
 8005342:	4293      	cmp	r3, r2
 8005344:	d100      	bne.n	8005348 <memset+0xa>
 8005346:	4770      	bx	lr
 8005348:	f803 1b01 	strb.w	r1, [r3], #1
 800534c:	e7f9      	b.n	8005342 <memset+0x4>
	...

08005350 <_localeconv_r>:
 8005350:	4800      	ldr	r0, [pc, #0]	@ (8005354 <_localeconv_r+0x4>)
 8005352:	4770      	bx	lr
 8005354:	20000158 	.word	0x20000158

08005358 <_close_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	2300      	movs	r3, #0
 800535c:	4d05      	ldr	r5, [pc, #20]	@ (8005374 <_close_r+0x1c>)
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fc fded 	bl	8001f42 <_close>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_close_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_close_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20000438 	.word	0x20000438

08005378 <_lseek_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	2200      	movs	r2, #0
 8005382:	4d05      	ldr	r5, [pc, #20]	@ (8005398 <_lseek_r+0x20>)
 8005384:	602a      	str	r2, [r5, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f7fc fdff 	bl	8001f8a <_lseek>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_lseek_r+0x1e>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_lseek_r+0x1e>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20000438 	.word	0x20000438

0800539c <_read_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	2200      	movs	r2, #0
 80053a6:	4d05      	ldr	r5, [pc, #20]	@ (80053bc <_read_r+0x20>)
 80053a8:	602a      	str	r2, [r5, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f7fc fd90 	bl	8001ed0 <_read>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_read_r+0x1e>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_read_r+0x1e>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000438 	.word	0x20000438

080053c0 <_write_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	2200      	movs	r2, #0
 80053ca:	4d05      	ldr	r5, [pc, #20]	@ (80053e0 <_write_r+0x20>)
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fc fd9b 	bl	8001f0a <_write>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_write_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_write_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000438 	.word	0x20000438

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	@ (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000018 	.word	0x20000018

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	2600      	movs	r6, #0
 80053f4:	4d0c      	ldr	r5, [pc, #48]	@ (8005428 <__libc_init_array+0x38>)
 80053f6:	4c0d      	ldr	r4, [pc, #52]	@ (800542c <__libc_init_array+0x3c>)
 80053f8:	1b64      	subs	r4, r4, r5
 80053fa:	10a4      	asrs	r4, r4, #2
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	f001 ff04 	bl	800720c <_init>
 8005404:	2600      	movs	r6, #0
 8005406:	4d0a      	ldr	r5, [pc, #40]	@ (8005430 <__libc_init_array+0x40>)
 8005408:	4c0a      	ldr	r4, [pc, #40]	@ (8005434 <__libc_init_array+0x44>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	080075d4 	.word	0x080075d4
 800542c:	080075d4 	.word	0x080075d4
 8005430:	080075d4 	.word	0x080075d4
 8005434:	080075d8 	.word	0x080075d8

08005438 <__retarget_lock_init_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_acquire_recursive>:
 800543a:	4770      	bx	lr

0800543c <__retarget_lock_release_recursive>:
 800543c:	4770      	bx	lr

0800543e <memchr>:
 800543e:	4603      	mov	r3, r0
 8005440:	b510      	push	{r4, lr}
 8005442:	b2c9      	uxtb	r1, r1
 8005444:	4402      	add	r2, r0
 8005446:	4293      	cmp	r3, r2
 8005448:	4618      	mov	r0, r3
 800544a:	d101      	bne.n	8005450 <memchr+0x12>
 800544c:	2000      	movs	r0, #0
 800544e:	e003      	b.n	8005458 <memchr+0x1a>
 8005450:	7804      	ldrb	r4, [r0, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	428c      	cmp	r4, r1
 8005456:	d1f6      	bne.n	8005446 <memchr+0x8>
 8005458:	bd10      	pop	{r4, pc}

0800545a <quorem>:
 800545a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545e:	6903      	ldr	r3, [r0, #16]
 8005460:	690c      	ldr	r4, [r1, #16]
 8005462:	4607      	mov	r7, r0
 8005464:	42a3      	cmp	r3, r4
 8005466:	db7e      	blt.n	8005566 <quorem+0x10c>
 8005468:	3c01      	subs	r4, #1
 800546a:	00a3      	lsls	r3, r4, #2
 800546c:	f100 0514 	add.w	r5, r0, #20
 8005470:	f101 0814 	add.w	r8, r1, #20
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005484:	3301      	adds	r3, #1
 8005486:	429a      	cmp	r2, r3
 8005488:	fbb2 f6f3 	udiv	r6, r2, r3
 800548c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005490:	d32e      	bcc.n	80054f0 <quorem+0x96>
 8005492:	f04f 0a00 	mov.w	sl, #0
 8005496:	46c4      	mov	ip, r8
 8005498:	46ae      	mov	lr, r5
 800549a:	46d3      	mov	fp, sl
 800549c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054a0:	b298      	uxth	r0, r3
 80054a2:	fb06 a000 	mla	r0, r6, r0, sl
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	0c02      	lsrs	r2, r0, #16
 80054aa:	fb06 2303 	mla	r3, r6, r3, r2
 80054ae:	f8de 2000 	ldr.w	r2, [lr]
 80054b2:	b280      	uxth	r0, r0
 80054b4:	b292      	uxth	r2, r2
 80054b6:	1a12      	subs	r2, r2, r0
 80054b8:	445a      	add	r2, fp
 80054ba:	f8de 0000 	ldr.w	r0, [lr]
 80054be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054cc:	b292      	uxth	r2, r2
 80054ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80054d2:	45e1      	cmp	r9, ip
 80054d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80054d8:	f84e 2b04 	str.w	r2, [lr], #4
 80054dc:	d2de      	bcs.n	800549c <quorem+0x42>
 80054de:	9b00      	ldr	r3, [sp, #0]
 80054e0:	58eb      	ldr	r3, [r5, r3]
 80054e2:	b92b      	cbnz	r3, 80054f0 <quorem+0x96>
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	3b04      	subs	r3, #4
 80054e8:	429d      	cmp	r5, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	d32f      	bcc.n	800554e <quorem+0xf4>
 80054ee:	613c      	str	r4, [r7, #16]
 80054f0:	4638      	mov	r0, r7
 80054f2:	f001 f981 	bl	80067f8 <__mcmp>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	db25      	blt.n	8005546 <quorem+0xec>
 80054fa:	4629      	mov	r1, r5
 80054fc:	2000      	movs	r0, #0
 80054fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005502:	f8d1 c000 	ldr.w	ip, [r1]
 8005506:	fa1f fe82 	uxth.w	lr, r2
 800550a:	fa1f f38c 	uxth.w	r3, ip
 800550e:	eba3 030e 	sub.w	r3, r3, lr
 8005512:	4403      	add	r3, r0
 8005514:	0c12      	lsrs	r2, r2, #16
 8005516:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800551a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005524:	45c1      	cmp	r9, r8
 8005526:	ea4f 4022 	mov.w	r0, r2, asr #16
 800552a:	f841 3b04 	str.w	r3, [r1], #4
 800552e:	d2e6      	bcs.n	80054fe <quorem+0xa4>
 8005530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005538:	b922      	cbnz	r2, 8005544 <quorem+0xea>
 800553a:	3b04      	subs	r3, #4
 800553c:	429d      	cmp	r5, r3
 800553e:	461a      	mov	r2, r3
 8005540:	d30b      	bcc.n	800555a <quorem+0x100>
 8005542:	613c      	str	r4, [r7, #16]
 8005544:	3601      	adds	r6, #1
 8005546:	4630      	mov	r0, r6
 8005548:	b003      	add	sp, #12
 800554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	3b04      	subs	r3, #4
 8005552:	2a00      	cmp	r2, #0
 8005554:	d1cb      	bne.n	80054ee <quorem+0x94>
 8005556:	3c01      	subs	r4, #1
 8005558:	e7c6      	b.n	80054e8 <quorem+0x8e>
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	3b04      	subs	r3, #4
 800555e:	2a00      	cmp	r2, #0
 8005560:	d1ef      	bne.n	8005542 <quorem+0xe8>
 8005562:	3c01      	subs	r4, #1
 8005564:	e7ea      	b.n	800553c <quorem+0xe2>
 8005566:	2000      	movs	r0, #0
 8005568:	e7ee      	b.n	8005548 <quorem+0xee>
 800556a:	0000      	movs	r0, r0
 800556c:	0000      	movs	r0, r0
	...

08005570 <_dtoa_r>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	4614      	mov	r4, r2
 8005576:	461d      	mov	r5, r3
 8005578:	69c7      	ldr	r7, [r0, #28]
 800557a:	b097      	sub	sp, #92	@ 0x5c
 800557c:	4681      	mov	r9, r0
 800557e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005582:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005584:	b97f      	cbnz	r7, 80055a6 <_dtoa_r+0x36>
 8005586:	2010      	movs	r0, #16
 8005588:	f000 fe0e 	bl	80061a8 <malloc>
 800558c:	4602      	mov	r2, r0
 800558e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005592:	b920      	cbnz	r0, 800559e <_dtoa_r+0x2e>
 8005594:	21ef      	movs	r1, #239	@ 0xef
 8005596:	4bac      	ldr	r3, [pc, #688]	@ (8005848 <_dtoa_r+0x2d8>)
 8005598:	48ac      	ldr	r0, [pc, #688]	@ (800584c <_dtoa_r+0x2dc>)
 800559a:	f001 fd03 	bl	8006fa4 <__assert_func>
 800559e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80055a2:	6007      	str	r7, [r0, #0]
 80055a4:	60c7      	str	r7, [r0, #12]
 80055a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	b159      	cbz	r1, 80055c6 <_dtoa_r+0x56>
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	2301      	movs	r3, #1
 80055b2:	4093      	lsls	r3, r2
 80055b4:	604a      	str	r2, [r1, #4]
 80055b6:	608b      	str	r3, [r1, #8]
 80055b8:	4648      	mov	r0, r9
 80055ba:	f000 feeb 	bl	8006394 <_Bfree>
 80055be:	2200      	movs	r2, #0
 80055c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	1e2b      	subs	r3, r5, #0
 80055c8:	bfaf      	iteee	ge
 80055ca:	2300      	movge	r3, #0
 80055cc:	2201      	movlt	r2, #1
 80055ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80055d2:	9307      	strlt	r3, [sp, #28]
 80055d4:	bfa8      	it	ge
 80055d6:	6033      	strge	r3, [r6, #0]
 80055d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80055dc:	4b9c      	ldr	r3, [pc, #624]	@ (8005850 <_dtoa_r+0x2e0>)
 80055de:	bfb8      	it	lt
 80055e0:	6032      	strlt	r2, [r6, #0]
 80055e2:	ea33 0308 	bics.w	r3, r3, r8
 80055e6:	d112      	bne.n	800560e <_dtoa_r+0x9e>
 80055e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80055ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80055f4:	4323      	orrs	r3, r4
 80055f6:	f000 855e 	beq.w	80060b6 <_dtoa_r+0xb46>
 80055fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80055fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005854 <_dtoa_r+0x2e4>
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8560 	beq.w	80060c6 <_dtoa_r+0xb56>
 8005606:	f10a 0303 	add.w	r3, sl, #3
 800560a:	f000 bd5a 	b.w	80060c2 <_dtoa_r+0xb52>
 800560e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005612:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800561a:	2200      	movs	r2, #0
 800561c:	2300      	movs	r3, #0
 800561e:	f7fb f9db 	bl	80009d8 <__aeabi_dcmpeq>
 8005622:	4607      	mov	r7, r0
 8005624:	b158      	cbz	r0, 800563e <_dtoa_r+0xce>
 8005626:	2301      	movs	r3, #1
 8005628:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800562e:	b113      	cbz	r3, 8005636 <_dtoa_r+0xc6>
 8005630:	4b89      	ldr	r3, [pc, #548]	@ (8005858 <_dtoa_r+0x2e8>)
 8005632:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800585c <_dtoa_r+0x2ec>
 800563a:	f000 bd44 	b.w	80060c6 <_dtoa_r+0xb56>
 800563e:	ab14      	add	r3, sp, #80	@ 0x50
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	ab15      	add	r3, sp, #84	@ 0x54
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4648      	mov	r0, r9
 8005648:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800564c:	f001 f984 	bl	8006958 <__d2b>
 8005650:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005654:	9003      	str	r0, [sp, #12]
 8005656:	2e00      	cmp	r6, #0
 8005658:	d078      	beq.n	800574c <_dtoa_r+0x1dc>
 800565a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800565e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005660:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005668:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800566c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005670:	9712      	str	r7, [sp, #72]	@ 0x48
 8005672:	4619      	mov	r1, r3
 8005674:	2200      	movs	r2, #0
 8005676:	4b7a      	ldr	r3, [pc, #488]	@ (8005860 <_dtoa_r+0x2f0>)
 8005678:	f7fa fd8e 	bl	8000198 <__aeabi_dsub>
 800567c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005830 <_dtoa_r+0x2c0>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fa ff41 	bl	8000508 <__aeabi_dmul>
 8005686:	a36c      	add	r3, pc, #432	@ (adr r3, 8005838 <_dtoa_r+0x2c8>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f7fa fd86 	bl	800019c <__adddf3>
 8005690:	4604      	mov	r4, r0
 8005692:	4630      	mov	r0, r6
 8005694:	460d      	mov	r5, r1
 8005696:	f7fa fecd 	bl	8000434 <__aeabi_i2d>
 800569a:	a369      	add	r3, pc, #420	@ (adr r3, 8005840 <_dtoa_r+0x2d0>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ff32 	bl	8000508 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa fd76 	bl	800019c <__adddf3>
 80056b0:	4604      	mov	r4, r0
 80056b2:	460d      	mov	r5, r1
 80056b4:	f7fb f9d8 	bl	8000a68 <__aeabi_d2iz>
 80056b8:	2200      	movs	r2, #0
 80056ba:	4607      	mov	r7, r0
 80056bc:	2300      	movs	r3, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fb f993 	bl	80009ec <__aeabi_dcmplt>
 80056c6:	b140      	cbz	r0, 80056da <_dtoa_r+0x16a>
 80056c8:	4638      	mov	r0, r7
 80056ca:	f7fa feb3 	bl	8000434 <__aeabi_i2d>
 80056ce:	4622      	mov	r2, r4
 80056d0:	462b      	mov	r3, r5
 80056d2:	f7fb f981 	bl	80009d8 <__aeabi_dcmpeq>
 80056d6:	b900      	cbnz	r0, 80056da <_dtoa_r+0x16a>
 80056d8:	3f01      	subs	r7, #1
 80056da:	2f16      	cmp	r7, #22
 80056dc:	d854      	bhi.n	8005788 <_dtoa_r+0x218>
 80056de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056e2:	4b60      	ldr	r3, [pc, #384]	@ (8005864 <_dtoa_r+0x2f4>)
 80056e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fb f97e 	bl	80009ec <__aeabi_dcmplt>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d04b      	beq.n	800578c <_dtoa_r+0x21c>
 80056f4:	2300      	movs	r3, #0
 80056f6:	3f01      	subs	r7, #1
 80056f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80056fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056fc:	1b9b      	subs	r3, r3, r6
 80056fe:	1e5a      	subs	r2, r3, #1
 8005700:	bf49      	itett	mi
 8005702:	f1c3 0301 	rsbmi	r3, r3, #1
 8005706:	2300      	movpl	r3, #0
 8005708:	9304      	strmi	r3, [sp, #16]
 800570a:	2300      	movmi	r3, #0
 800570c:	9209      	str	r2, [sp, #36]	@ 0x24
 800570e:	bf54      	ite	pl
 8005710:	9304      	strpl	r3, [sp, #16]
 8005712:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005714:	2f00      	cmp	r7, #0
 8005716:	db3b      	blt.n	8005790 <_dtoa_r+0x220>
 8005718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571a:	970e      	str	r7, [sp, #56]	@ 0x38
 800571c:	443b      	add	r3, r7
 800571e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005720:	2300      	movs	r3, #0
 8005722:	930a      	str	r3, [sp, #40]	@ 0x28
 8005724:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005726:	2b09      	cmp	r3, #9
 8005728:	d865      	bhi.n	80057f6 <_dtoa_r+0x286>
 800572a:	2b05      	cmp	r3, #5
 800572c:	bfc4      	itt	gt
 800572e:	3b04      	subgt	r3, #4
 8005730:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005734:	bfc8      	it	gt
 8005736:	2400      	movgt	r4, #0
 8005738:	f1a3 0302 	sub.w	r3, r3, #2
 800573c:	bfd8      	it	le
 800573e:	2401      	movle	r4, #1
 8005740:	2b03      	cmp	r3, #3
 8005742:	d864      	bhi.n	800580e <_dtoa_r+0x29e>
 8005744:	e8df f003 	tbb	[pc, r3]
 8005748:	2c385553 	.word	0x2c385553
 800574c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005750:	441e      	add	r6, r3
 8005752:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005756:	2b20      	cmp	r3, #32
 8005758:	bfc1      	itttt	gt
 800575a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800575e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005762:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005766:	fa24 f303 	lsrgt.w	r3, r4, r3
 800576a:	bfd6      	itet	le
 800576c:	f1c3 0320 	rsble	r3, r3, #32
 8005770:	ea48 0003 	orrgt.w	r0, r8, r3
 8005774:	fa04 f003 	lslle.w	r0, r4, r3
 8005778:	f7fa fe4c 	bl	8000414 <__aeabi_ui2d>
 800577c:	2201      	movs	r2, #1
 800577e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005782:	3e01      	subs	r6, #1
 8005784:	9212      	str	r2, [sp, #72]	@ 0x48
 8005786:	e774      	b.n	8005672 <_dtoa_r+0x102>
 8005788:	2301      	movs	r3, #1
 800578a:	e7b5      	b.n	80056f8 <_dtoa_r+0x188>
 800578c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800578e:	e7b4      	b.n	80056fa <_dtoa_r+0x18a>
 8005790:	9b04      	ldr	r3, [sp, #16]
 8005792:	1bdb      	subs	r3, r3, r7
 8005794:	9304      	str	r3, [sp, #16]
 8005796:	427b      	negs	r3, r7
 8005798:	930a      	str	r3, [sp, #40]	@ 0x28
 800579a:	2300      	movs	r3, #0
 800579c:	930e      	str	r3, [sp, #56]	@ 0x38
 800579e:	e7c1      	b.n	8005724 <_dtoa_r+0x1b4>
 80057a0:	2301      	movs	r3, #1
 80057a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057a6:	eb07 0b03 	add.w	fp, r7, r3
 80057aa:	f10b 0301 	add.w	r3, fp, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	bfb8      	it	lt
 80057b4:	2301      	movlt	r3, #1
 80057b6:	e006      	b.n	80057c6 <_dtoa_r+0x256>
 80057b8:	2301      	movs	r3, #1
 80057ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dd28      	ble.n	8005814 <_dtoa_r+0x2a4>
 80057c2:	469b      	mov	fp, r3
 80057c4:	9308      	str	r3, [sp, #32]
 80057c6:	2100      	movs	r1, #0
 80057c8:	2204      	movs	r2, #4
 80057ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80057ce:	f102 0514 	add.w	r5, r2, #20
 80057d2:	429d      	cmp	r5, r3
 80057d4:	d926      	bls.n	8005824 <_dtoa_r+0x2b4>
 80057d6:	6041      	str	r1, [r0, #4]
 80057d8:	4648      	mov	r0, r9
 80057da:	f000 fd9b 	bl	8006314 <_Balloc>
 80057de:	4682      	mov	sl, r0
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d143      	bne.n	800586c <_dtoa_r+0x2fc>
 80057e4:	4602      	mov	r2, r0
 80057e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80057ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005868 <_dtoa_r+0x2f8>)
 80057ec:	e6d4      	b.n	8005598 <_dtoa_r+0x28>
 80057ee:	2300      	movs	r3, #0
 80057f0:	e7e3      	b.n	80057ba <_dtoa_r+0x24a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	e7d5      	b.n	80057a2 <_dtoa_r+0x232>
 80057f6:	2401      	movs	r4, #1
 80057f8:	2300      	movs	r3, #0
 80057fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80057fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80057fe:	f04f 3bff 	mov.w	fp, #4294967295
 8005802:	2200      	movs	r2, #0
 8005804:	2312      	movs	r3, #18
 8005806:	f8cd b020 	str.w	fp, [sp, #32]
 800580a:	9221      	str	r2, [sp, #132]	@ 0x84
 800580c:	e7db      	b.n	80057c6 <_dtoa_r+0x256>
 800580e:	2301      	movs	r3, #1
 8005810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005812:	e7f4      	b.n	80057fe <_dtoa_r+0x28e>
 8005814:	f04f 0b01 	mov.w	fp, #1
 8005818:	465b      	mov	r3, fp
 800581a:	f8cd b020 	str.w	fp, [sp, #32]
 800581e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005822:	e7d0      	b.n	80057c6 <_dtoa_r+0x256>
 8005824:	3101      	adds	r1, #1
 8005826:	0052      	lsls	r2, r2, #1
 8005828:	e7d1      	b.n	80057ce <_dtoa_r+0x25e>
 800582a:	bf00      	nop
 800582c:	f3af 8000 	nop.w
 8005830:	636f4361 	.word	0x636f4361
 8005834:	3fd287a7 	.word	0x3fd287a7
 8005838:	8b60c8b3 	.word	0x8b60c8b3
 800583c:	3fc68a28 	.word	0x3fc68a28
 8005840:	509f79fb 	.word	0x509f79fb
 8005844:	3fd34413 	.word	0x3fd34413
 8005848:	08007295 	.word	0x08007295
 800584c:	080072ac 	.word	0x080072ac
 8005850:	7ff00000 	.word	0x7ff00000
 8005854:	08007291 	.word	0x08007291
 8005858:	08007265 	.word	0x08007265
 800585c:	08007264 	.word	0x08007264
 8005860:	3ff80000 	.word	0x3ff80000
 8005864:	08007400 	.word	0x08007400
 8005868:	08007304 	.word	0x08007304
 800586c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005870:	6018      	str	r0, [r3, #0]
 8005872:	9b08      	ldr	r3, [sp, #32]
 8005874:	2b0e      	cmp	r3, #14
 8005876:	f200 80a1 	bhi.w	80059bc <_dtoa_r+0x44c>
 800587a:	2c00      	cmp	r4, #0
 800587c:	f000 809e 	beq.w	80059bc <_dtoa_r+0x44c>
 8005880:	2f00      	cmp	r7, #0
 8005882:	dd33      	ble.n	80058ec <_dtoa_r+0x37c>
 8005884:	4b9c      	ldr	r3, [pc, #624]	@ (8005af8 <_dtoa_r+0x588>)
 8005886:	f007 020f 	and.w	r2, r7, #15
 800588a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800588e:	05f8      	lsls	r0, r7, #23
 8005890:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005894:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800589c:	d516      	bpl.n	80058cc <_dtoa_r+0x35c>
 800589e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058a2:	4b96      	ldr	r3, [pc, #600]	@ (8005afc <_dtoa_r+0x58c>)
 80058a4:	2603      	movs	r6, #3
 80058a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058aa:	f7fa ff57 	bl	800075c <__aeabi_ddiv>
 80058ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058b2:	f004 040f 	and.w	r4, r4, #15
 80058b6:	4d91      	ldr	r5, [pc, #580]	@ (8005afc <_dtoa_r+0x58c>)
 80058b8:	b954      	cbnz	r4, 80058d0 <_dtoa_r+0x360>
 80058ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c2:	f7fa ff4b 	bl	800075c <__aeabi_ddiv>
 80058c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058ca:	e028      	b.n	800591e <_dtoa_r+0x3ae>
 80058cc:	2602      	movs	r6, #2
 80058ce:	e7f2      	b.n	80058b6 <_dtoa_r+0x346>
 80058d0:	07e1      	lsls	r1, r4, #31
 80058d2:	d508      	bpl.n	80058e6 <_dtoa_r+0x376>
 80058d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058dc:	f7fa fe14 	bl	8000508 <__aeabi_dmul>
 80058e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058e4:	3601      	adds	r6, #1
 80058e6:	1064      	asrs	r4, r4, #1
 80058e8:	3508      	adds	r5, #8
 80058ea:	e7e5      	b.n	80058b8 <_dtoa_r+0x348>
 80058ec:	f000 80af 	beq.w	8005a4e <_dtoa_r+0x4de>
 80058f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058f4:	427c      	negs	r4, r7
 80058f6:	4b80      	ldr	r3, [pc, #512]	@ (8005af8 <_dtoa_r+0x588>)
 80058f8:	f004 020f 	and.w	r2, r4, #15
 80058fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fe00 	bl	8000508 <__aeabi_dmul>
 8005908:	2602      	movs	r6, #2
 800590a:	2300      	movs	r3, #0
 800590c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005910:	4d7a      	ldr	r5, [pc, #488]	@ (8005afc <_dtoa_r+0x58c>)
 8005912:	1124      	asrs	r4, r4, #4
 8005914:	2c00      	cmp	r4, #0
 8005916:	f040 808f 	bne.w	8005a38 <_dtoa_r+0x4c8>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1d3      	bne.n	80058c6 <_dtoa_r+0x356>
 800591e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005922:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8094 	beq.w	8005a52 <_dtoa_r+0x4e2>
 800592a:	2200      	movs	r2, #0
 800592c:	4620      	mov	r0, r4
 800592e:	4629      	mov	r1, r5
 8005930:	4b73      	ldr	r3, [pc, #460]	@ (8005b00 <_dtoa_r+0x590>)
 8005932:	f7fb f85b 	bl	80009ec <__aeabi_dcmplt>
 8005936:	2800      	cmp	r0, #0
 8005938:	f000 808b 	beq.w	8005a52 <_dtoa_r+0x4e2>
 800593c:	9b08      	ldr	r3, [sp, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8087 	beq.w	8005a52 <_dtoa_r+0x4e2>
 8005944:	f1bb 0f00 	cmp.w	fp, #0
 8005948:	dd34      	ble.n	80059b4 <_dtoa_r+0x444>
 800594a:	4620      	mov	r0, r4
 800594c:	2200      	movs	r2, #0
 800594e:	4629      	mov	r1, r5
 8005950:	4b6c      	ldr	r3, [pc, #432]	@ (8005b04 <_dtoa_r+0x594>)
 8005952:	f7fa fdd9 	bl	8000508 <__aeabi_dmul>
 8005956:	465c      	mov	r4, fp
 8005958:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800595c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005960:	3601      	adds	r6, #1
 8005962:	4630      	mov	r0, r6
 8005964:	f7fa fd66 	bl	8000434 <__aeabi_i2d>
 8005968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800596c:	f7fa fdcc 	bl	8000508 <__aeabi_dmul>
 8005970:	2200      	movs	r2, #0
 8005972:	4b65      	ldr	r3, [pc, #404]	@ (8005b08 <_dtoa_r+0x598>)
 8005974:	f7fa fc12 	bl	800019c <__adddf3>
 8005978:	4605      	mov	r5, r0
 800597a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800597e:	2c00      	cmp	r4, #0
 8005980:	d16a      	bne.n	8005a58 <_dtoa_r+0x4e8>
 8005982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005986:	2200      	movs	r2, #0
 8005988:	4b60      	ldr	r3, [pc, #384]	@ (8005b0c <_dtoa_r+0x59c>)
 800598a:	f7fa fc05 	bl	8000198 <__aeabi_dsub>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005996:	462a      	mov	r2, r5
 8005998:	4633      	mov	r3, r6
 800599a:	f7fb f845 	bl	8000a28 <__aeabi_dcmpgt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	f040 8298 	bne.w	8005ed4 <_dtoa_r+0x964>
 80059a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a8:	462a      	mov	r2, r5
 80059aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80059ae:	f7fb f81d 	bl	80009ec <__aeabi_dcmplt>
 80059b2:	bb38      	cbnz	r0, 8005a04 <_dtoa_r+0x494>
 80059b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80059b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f2c0 8157 	blt.w	8005c72 <_dtoa_r+0x702>
 80059c4:	2f0e      	cmp	r7, #14
 80059c6:	f300 8154 	bgt.w	8005c72 <_dtoa_r+0x702>
 80059ca:	4b4b      	ldr	r3, [pc, #300]	@ (8005af8 <_dtoa_r+0x588>)
 80059cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f280 80e5 	bge.w	8005baa <_dtoa_r+0x63a>
 80059e0:	9b08      	ldr	r3, [sp, #32]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f300 80e1 	bgt.w	8005baa <_dtoa_r+0x63a>
 80059e8:	d10c      	bne.n	8005a04 <_dtoa_r+0x494>
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	2200      	movs	r2, #0
 80059f0:	4b46      	ldr	r3, [pc, #280]	@ (8005b0c <_dtoa_r+0x59c>)
 80059f2:	f7fa fd89 	bl	8000508 <__aeabi_dmul>
 80059f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059fa:	f7fb f80b 	bl	8000a14 <__aeabi_dcmpge>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f000 8266 	beq.w	8005ed0 <_dtoa_r+0x960>
 8005a04:	2400      	movs	r4, #0
 8005a06:	4625      	mov	r5, r4
 8005a08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a0a:	4656      	mov	r6, sl
 8005a0c:	ea6f 0803 	mvn.w	r8, r3
 8005a10:	2700      	movs	r7, #0
 8005a12:	4621      	mov	r1, r4
 8005a14:	4648      	mov	r0, r9
 8005a16:	f000 fcbd 	bl	8006394 <_Bfree>
 8005a1a:	2d00      	cmp	r5, #0
 8005a1c:	f000 80bd 	beq.w	8005b9a <_dtoa_r+0x62a>
 8005a20:	b12f      	cbz	r7, 8005a2e <_dtoa_r+0x4be>
 8005a22:	42af      	cmp	r7, r5
 8005a24:	d003      	beq.n	8005a2e <_dtoa_r+0x4be>
 8005a26:	4639      	mov	r1, r7
 8005a28:	4648      	mov	r0, r9
 8005a2a:	f000 fcb3 	bl	8006394 <_Bfree>
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4648      	mov	r0, r9
 8005a32:	f000 fcaf 	bl	8006394 <_Bfree>
 8005a36:	e0b0      	b.n	8005b9a <_dtoa_r+0x62a>
 8005a38:	07e2      	lsls	r2, r4, #31
 8005a3a:	d505      	bpl.n	8005a48 <_dtoa_r+0x4d8>
 8005a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a40:	f7fa fd62 	bl	8000508 <__aeabi_dmul>
 8005a44:	2301      	movs	r3, #1
 8005a46:	3601      	adds	r6, #1
 8005a48:	1064      	asrs	r4, r4, #1
 8005a4a:	3508      	adds	r5, #8
 8005a4c:	e762      	b.n	8005914 <_dtoa_r+0x3a4>
 8005a4e:	2602      	movs	r6, #2
 8005a50:	e765      	b.n	800591e <_dtoa_r+0x3ae>
 8005a52:	46b8      	mov	r8, r7
 8005a54:	9c08      	ldr	r4, [sp, #32]
 8005a56:	e784      	b.n	8005962 <_dtoa_r+0x3f2>
 8005a58:	4b27      	ldr	r3, [pc, #156]	@ (8005af8 <_dtoa_r+0x588>)
 8005a5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a64:	4454      	add	r4, sl
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d054      	beq.n	8005b14 <_dtoa_r+0x5a4>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	4928      	ldr	r1, [pc, #160]	@ (8005b10 <_dtoa_r+0x5a0>)
 8005a6e:	f7fa fe75 	bl	800075c <__aeabi_ddiv>
 8005a72:	4633      	mov	r3, r6
 8005a74:	462a      	mov	r2, r5
 8005a76:	f7fa fb8f 	bl	8000198 <__aeabi_dsub>
 8005a7a:	4656      	mov	r6, sl
 8005a7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a84:	f7fa fff0 	bl	8000a68 <__aeabi_d2iz>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f7fa fcd3 	bl	8000434 <__aeabi_i2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a96:	f7fa fb7f 	bl	8000198 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	3530      	adds	r5, #48	@ 0x30
 8005aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005aa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005aa8:	f806 5b01 	strb.w	r5, [r6], #1
 8005aac:	f7fa ff9e 	bl	80009ec <__aeabi_dcmplt>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d172      	bne.n	8005b9a <_dtoa_r+0x62a>
 8005ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4911      	ldr	r1, [pc, #68]	@ (8005b00 <_dtoa_r+0x590>)
 8005abc:	f7fa fb6c 	bl	8000198 <__aeabi_dsub>
 8005ac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ac4:	f7fa ff92 	bl	80009ec <__aeabi_dcmplt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f040 80b4 	bne.w	8005c36 <_dtoa_r+0x6c6>
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	f43f af70 	beq.w	80059b4 <_dtoa_r+0x444>
 8005ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <_dtoa_r+0x594>)
 8005adc:	f7fa fd14 	bl	8000508 <__aeabi_dmul>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aea:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <_dtoa_r+0x594>)
 8005aec:	f7fa fd0c 	bl	8000508 <__aeabi_dmul>
 8005af0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005af4:	e7c4      	b.n	8005a80 <_dtoa_r+0x510>
 8005af6:	bf00      	nop
 8005af8:	08007400 	.word	0x08007400
 8005afc:	080073d8 	.word	0x080073d8
 8005b00:	3ff00000 	.word	0x3ff00000
 8005b04:	40240000 	.word	0x40240000
 8005b08:	401c0000 	.word	0x401c0000
 8005b0c:	40140000 	.word	0x40140000
 8005b10:	3fe00000 	.word	0x3fe00000
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7fa fcf6 	bl	8000508 <__aeabi_dmul>
 8005b1c:	4656      	mov	r6, sl
 8005b1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b22:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b28:	f7fa ff9e 	bl	8000a68 <__aeabi_d2iz>
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	f7fa fc81 	bl	8000434 <__aeabi_i2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b3a:	f7fa fb2d 	bl	8000198 <__aeabi_dsub>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	3530      	adds	r5, #48	@ 0x30
 8005b44:	f806 5b01 	strb.w	r5, [r6], #1
 8005b48:	42a6      	cmp	r6, r4
 8005b4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	d124      	bne.n	8005b9e <_dtoa_r+0x62e>
 8005b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b58:	4bae      	ldr	r3, [pc, #696]	@ (8005e14 <_dtoa_r+0x8a4>)
 8005b5a:	f7fa fb1f 	bl	800019c <__adddf3>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b66:	f7fa ff5f 	bl	8000a28 <__aeabi_dcmpgt>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d163      	bne.n	8005c36 <_dtoa_r+0x6c6>
 8005b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b72:	2000      	movs	r0, #0
 8005b74:	49a7      	ldr	r1, [pc, #668]	@ (8005e14 <_dtoa_r+0x8a4>)
 8005b76:	f7fa fb0f 	bl	8000198 <__aeabi_dsub>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b82:	f7fa ff33 	bl	80009ec <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f af14 	beq.w	80059b4 <_dtoa_r+0x444>
 8005b8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005b8e:	1e73      	subs	r3, r6, #1
 8005b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b96:	2b30      	cmp	r3, #48	@ 0x30
 8005b98:	d0f8      	beq.n	8005b8c <_dtoa_r+0x61c>
 8005b9a:	4647      	mov	r7, r8
 8005b9c:	e03b      	b.n	8005c16 <_dtoa_r+0x6a6>
 8005b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8005e18 <_dtoa_r+0x8a8>)
 8005ba0:	f7fa fcb2 	bl	8000508 <__aeabi_dmul>
 8005ba4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ba8:	e7bc      	b.n	8005b24 <_dtoa_r+0x5b4>
 8005baa:	4656      	mov	r6, sl
 8005bac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7fa fdd0 	bl	800075c <__aeabi_ddiv>
 8005bbc:	f7fa ff54 	bl	8000a68 <__aeabi_d2iz>
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	f7fa fc37 	bl	8000434 <__aeabi_i2d>
 8005bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bca:	f7fa fc9d 	bl	8000508 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fadf 	bl	8000198 <__aeabi_dsub>
 8005bda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bde:	9d08      	ldr	r5, [sp, #32]
 8005be0:	f806 4b01 	strb.w	r4, [r6], #1
 8005be4:	eba6 040a 	sub.w	r4, r6, sl
 8005be8:	42a5      	cmp	r5, r4
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	d133      	bne.n	8005c58 <_dtoa_r+0x6e8>
 8005bf0:	f7fa fad4 	bl	800019c <__adddf3>
 8005bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	f7fa ff14 	bl	8000a28 <__aeabi_dcmpgt>
 8005c00:	b9c0      	cbnz	r0, 8005c34 <_dtoa_r+0x6c4>
 8005c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fee5 	bl	80009d8 <__aeabi_dcmpeq>
 8005c0e:	b110      	cbz	r0, 8005c16 <_dtoa_r+0x6a6>
 8005c10:	f018 0f01 	tst.w	r8, #1
 8005c14:	d10e      	bne.n	8005c34 <_dtoa_r+0x6c4>
 8005c16:	4648      	mov	r0, r9
 8005c18:	9903      	ldr	r1, [sp, #12]
 8005c1a:	f000 fbbb 	bl	8006394 <_Bfree>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	7033      	strb	r3, [r6, #0]
 8005c22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c24:	3701      	adds	r7, #1
 8005c26:	601f      	str	r7, [r3, #0]
 8005c28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 824b 	beq.w	80060c6 <_dtoa_r+0xb56>
 8005c30:	601e      	str	r6, [r3, #0]
 8005c32:	e248      	b.n	80060c6 <_dtoa_r+0xb56>
 8005c34:	46b8      	mov	r8, r7
 8005c36:	4633      	mov	r3, r6
 8005c38:	461e      	mov	r6, r3
 8005c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c3e:	2a39      	cmp	r2, #57	@ 0x39
 8005c40:	d106      	bne.n	8005c50 <_dtoa_r+0x6e0>
 8005c42:	459a      	cmp	sl, r3
 8005c44:	d1f8      	bne.n	8005c38 <_dtoa_r+0x6c8>
 8005c46:	2230      	movs	r2, #48	@ 0x30
 8005c48:	f108 0801 	add.w	r8, r8, #1
 8005c4c:	f88a 2000 	strb.w	r2, [sl]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	3201      	adds	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e7a0      	b.n	8005b9a <_dtoa_r+0x62a>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005e18 <_dtoa_r+0x8a8>)
 8005c5c:	f7fa fc54 	bl	8000508 <__aeabi_dmul>
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	f7fa feb6 	bl	80009d8 <__aeabi_dcmpeq>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d09f      	beq.n	8005bb0 <_dtoa_r+0x640>
 8005c70:	e7d1      	b.n	8005c16 <_dtoa_r+0x6a6>
 8005c72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	f000 80ea 	beq.w	8005e4e <_dtoa_r+0x8de>
 8005c7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c7c:	2a01      	cmp	r2, #1
 8005c7e:	f300 80cd 	bgt.w	8005e1c <_dtoa_r+0x8ac>
 8005c82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	f000 80c1 	beq.w	8005e0c <_dtoa_r+0x89c>
 8005c8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005c8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c90:	9e04      	ldr	r6, [sp, #16]
 8005c92:	9a04      	ldr	r2, [sp, #16]
 8005c94:	2101      	movs	r1, #1
 8005c96:	441a      	add	r2, r3
 8005c98:	9204      	str	r2, [sp, #16]
 8005c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c9c:	4648      	mov	r0, r9
 8005c9e:	441a      	add	r2, r3
 8005ca0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca2:	f000 fc2b 	bl	80064fc <__i2b>
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	b166      	cbz	r6, 8005cc4 <_dtoa_r+0x754>
 8005caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	dd09      	ble.n	8005cc4 <_dtoa_r+0x754>
 8005cb0:	42b3      	cmp	r3, r6
 8005cb2:	bfa8      	it	ge
 8005cb4:	4633      	movge	r3, r6
 8005cb6:	9a04      	ldr	r2, [sp, #16]
 8005cb8:	1af6      	subs	r6, r6, r3
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	9204      	str	r2, [sp, #16]
 8005cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cc6:	b30b      	cbz	r3, 8005d0c <_dtoa_r+0x79c>
 8005cc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80c6 	beq.w	8005e5c <_dtoa_r+0x8ec>
 8005cd0:	2c00      	cmp	r4, #0
 8005cd2:	f000 80c0 	beq.w	8005e56 <_dtoa_r+0x8e6>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4622      	mov	r2, r4
 8005cda:	4648      	mov	r0, r9
 8005cdc:	f000 fcc6 	bl	800666c <__pow5mult>
 8005ce0:	9a03      	ldr	r2, [sp, #12]
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 fc1e 	bl	8006528 <__multiply>
 8005cec:	9903      	ldr	r1, [sp, #12]
 8005cee:	4680      	mov	r8, r0
 8005cf0:	4648      	mov	r0, r9
 8005cf2:	f000 fb4f 	bl	8006394 <_Bfree>
 8005cf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf8:	1b1b      	subs	r3, r3, r4
 8005cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cfc:	f000 80b1 	beq.w	8005e62 <_dtoa_r+0x8f2>
 8005d00:	4641      	mov	r1, r8
 8005d02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d04:	4648      	mov	r0, r9
 8005d06:	f000 fcb1 	bl	800666c <__pow5mult>
 8005d0a:	9003      	str	r0, [sp, #12]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4648      	mov	r0, r9
 8005d10:	f000 fbf4 	bl	80064fc <__i2b>
 8005d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d16:	4604      	mov	r4, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 81d8 	beq.w	80060ce <_dtoa_r+0xb5e>
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4601      	mov	r1, r0
 8005d22:	4648      	mov	r0, r9
 8005d24:	f000 fca2 	bl	800666c <__pow5mult>
 8005d28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f300 809f 	bgt.w	8005e70 <_dtoa_r+0x900>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 8097 	bne.w	8005e68 <_dtoa_r+0x8f8>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 8093 	bne.w	8005e6c <_dtoa_r+0x8fc>
 8005d46:	9b07      	ldr	r3, [sp, #28]
 8005d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d4c:	0d1b      	lsrs	r3, r3, #20
 8005d4e:	051b      	lsls	r3, r3, #20
 8005d50:	b133      	cbz	r3, 8005d60 <_dtoa_r+0x7f0>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	3301      	adds	r3, #1
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d5e:	2301      	movs	r3, #1
 8005d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 81b8 	beq.w	80060da <_dtoa_r+0xb6a>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d70:	6918      	ldr	r0, [r3, #16]
 8005d72:	f000 fb77 	bl	8006464 <__hi0bits>
 8005d76:	f1c0 0020 	rsb	r0, r0, #32
 8005d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d7c:	4418      	add	r0, r3
 8005d7e:	f010 001f 	ands.w	r0, r0, #31
 8005d82:	f000 8082 	beq.w	8005e8a <_dtoa_r+0x91a>
 8005d86:	f1c0 0320 	rsb	r3, r0, #32
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	dd73      	ble.n	8005e76 <_dtoa_r+0x906>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	f1c0 001c 	rsb	r0, r0, #28
 8005d94:	4403      	add	r3, r0
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d9a:	4406      	add	r6, r0
 8005d9c:	4403      	add	r3, r0
 8005d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005da0:	9b04      	ldr	r3, [sp, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd05      	ble.n	8005db2 <_dtoa_r+0x842>
 8005da6:	461a      	mov	r2, r3
 8005da8:	4648      	mov	r0, r9
 8005daa:	9903      	ldr	r1, [sp, #12]
 8005dac:	f000 fcb8 	bl	8006720 <__lshift>
 8005db0:	9003      	str	r0, [sp, #12]
 8005db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dd05      	ble.n	8005dc4 <_dtoa_r+0x854>
 8005db8:	4621      	mov	r1, r4
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4648      	mov	r0, r9
 8005dbe:	f000 fcaf 	bl	8006720 <__lshift>
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d061      	beq.n	8005e8e <_dtoa_r+0x91e>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	9803      	ldr	r0, [sp, #12]
 8005dce:	f000 fd13 	bl	80067f8 <__mcmp>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	da5b      	bge.n	8005e8e <_dtoa_r+0x91e>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4648      	mov	r0, r9
 8005ddc:	9903      	ldr	r1, [sp, #12]
 8005dde:	f000 fafb 	bl	80063d8 <__multadd>
 8005de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005de4:	f107 38ff 	add.w	r8, r7, #4294967295
 8005de8:	9003      	str	r0, [sp, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8177 	beq.w	80060de <_dtoa_r+0xb6e>
 8005df0:	4629      	mov	r1, r5
 8005df2:	2300      	movs	r3, #0
 8005df4:	220a      	movs	r2, #10
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 faee 	bl	80063d8 <__multadd>
 8005dfc:	f1bb 0f00 	cmp.w	fp, #0
 8005e00:	4605      	mov	r5, r0
 8005e02:	dc6f      	bgt.n	8005ee4 <_dtoa_r+0x974>
 8005e04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	dc49      	bgt.n	8005e9e <_dtoa_r+0x92e>
 8005e0a:	e06b      	b.n	8005ee4 <_dtoa_r+0x974>
 8005e0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e12:	e73c      	b.n	8005c8e <_dtoa_r+0x71e>
 8005e14:	3fe00000 	.word	0x3fe00000
 8005e18:	40240000 	.word	0x40240000
 8005e1c:	9b08      	ldr	r3, [sp, #32]
 8005e1e:	1e5c      	subs	r4, r3, #1
 8005e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	db09      	blt.n	8005e3a <_dtoa_r+0x8ca>
 8005e26:	1b1c      	subs	r4, r3, r4
 8005e28:	9b08      	ldr	r3, [sp, #32]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f6bf af30 	bge.w	8005c90 <_dtoa_r+0x720>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	9a08      	ldr	r2, [sp, #32]
 8005e34:	1a9e      	subs	r6, r3, r2
 8005e36:	2300      	movs	r3, #0
 8005e38:	e72b      	b.n	8005c92 <_dtoa_r+0x722>
 8005e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e3e:	1ae3      	subs	r3, r4, r3
 8005e40:	441a      	add	r2, r3
 8005e42:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e44:	9e04      	ldr	r6, [sp, #16]
 8005e46:	2400      	movs	r4, #0
 8005e48:	9b08      	ldr	r3, [sp, #32]
 8005e4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e4c:	e721      	b.n	8005c92 <_dtoa_r+0x722>
 8005e4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e50:	9e04      	ldr	r6, [sp, #16]
 8005e52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005e54:	e728      	b.n	8005ca8 <_dtoa_r+0x738>
 8005e56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e5a:	e751      	b.n	8005d00 <_dtoa_r+0x790>
 8005e5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e5e:	9903      	ldr	r1, [sp, #12]
 8005e60:	e750      	b.n	8005d04 <_dtoa_r+0x794>
 8005e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e66:	e751      	b.n	8005d0c <_dtoa_r+0x79c>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e779      	b.n	8005d60 <_dtoa_r+0x7f0>
 8005e6c:	9b06      	ldr	r3, [sp, #24]
 8005e6e:	e777      	b.n	8005d60 <_dtoa_r+0x7f0>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e74:	e779      	b.n	8005d6a <_dtoa_r+0x7fa>
 8005e76:	d093      	beq.n	8005da0 <_dtoa_r+0x830>
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	331c      	adds	r3, #28
 8005e7c:	441a      	add	r2, r3
 8005e7e:	9204      	str	r2, [sp, #16]
 8005e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e82:	441e      	add	r6, r3
 8005e84:	441a      	add	r2, r3
 8005e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e88:	e78a      	b.n	8005da0 <_dtoa_r+0x830>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	e7f4      	b.n	8005e78 <_dtoa_r+0x908>
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	46b8      	mov	r8, r7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dc20      	bgt.n	8005ed8 <_dtoa_r+0x968>
 8005e96:	469b      	mov	fp, r3
 8005e98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	dd1e      	ble.n	8005edc <_dtoa_r+0x96c>
 8005e9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ea2:	f47f adb1 	bne.w	8005a08 <_dtoa_r+0x498>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	465b      	mov	r3, fp
 8005eaa:	2205      	movs	r2, #5
 8005eac:	4648      	mov	r0, r9
 8005eae:	f000 fa93 	bl	80063d8 <__multadd>
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	9803      	ldr	r0, [sp, #12]
 8005eb8:	f000 fc9e 	bl	80067f8 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f77f ada3 	ble.w	8005a08 <_dtoa_r+0x498>
 8005ec2:	4656      	mov	r6, sl
 8005ec4:	2331      	movs	r3, #49	@ 0x31
 8005ec6:	f108 0801 	add.w	r8, r8, #1
 8005eca:	f806 3b01 	strb.w	r3, [r6], #1
 8005ece:	e59f      	b.n	8005a10 <_dtoa_r+0x4a0>
 8005ed0:	46b8      	mov	r8, r7
 8005ed2:	9c08      	ldr	r4, [sp, #32]
 8005ed4:	4625      	mov	r5, r4
 8005ed6:	e7f4      	b.n	8005ec2 <_dtoa_r+0x952>
 8005ed8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8101 	beq.w	80060e6 <_dtoa_r+0xb76>
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	dd05      	ble.n	8005ef4 <_dtoa_r+0x984>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4632      	mov	r2, r6
 8005eec:	4648      	mov	r0, r9
 8005eee:	f000 fc17 	bl	8006720 <__lshift>
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d05c      	beq.n	8005fb4 <_dtoa_r+0xa44>
 8005efa:	4648      	mov	r0, r9
 8005efc:	6869      	ldr	r1, [r5, #4]
 8005efe:	f000 fa09 	bl	8006314 <_Balloc>
 8005f02:	4606      	mov	r6, r0
 8005f04:	b928      	cbnz	r0, 8005f12 <_dtoa_r+0x9a2>
 8005f06:	4602      	mov	r2, r0
 8005f08:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f0c:	4b80      	ldr	r3, [pc, #512]	@ (8006110 <_dtoa_r+0xba0>)
 8005f0e:	f7ff bb43 	b.w	8005598 <_dtoa_r+0x28>
 8005f12:	692a      	ldr	r2, [r5, #16]
 8005f14:	f105 010c 	add.w	r1, r5, #12
 8005f18:	3202      	adds	r2, #2
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	300c      	adds	r0, #12
 8005f1e:	f001 f833 	bl	8006f88 <memcpy>
 8005f22:	2201      	movs	r2, #1
 8005f24:	4631      	mov	r1, r6
 8005f26:	4648      	mov	r0, r9
 8005f28:	f000 fbfa 	bl	8006720 <__lshift>
 8005f2c:	462f      	mov	r7, r5
 8005f2e:	4605      	mov	r5, r0
 8005f30:	f10a 0301 	add.w	r3, sl, #1
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	eb0a 030b 	add.w	r3, sl, fp
 8005f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f3c:	9b06      	ldr	r3, [sp, #24]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	4621      	mov	r1, r4
 8005f48:	9803      	ldr	r0, [sp, #12]
 8005f4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f4e:	f7ff fa84 	bl	800545a <quorem>
 8005f52:	4603      	mov	r3, r0
 8005f54:	4639      	mov	r1, r7
 8005f56:	3330      	adds	r3, #48	@ 0x30
 8005f58:	9006      	str	r0, [sp, #24]
 8005f5a:	9803      	ldr	r0, [sp, #12]
 8005f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f5e:	f000 fc4b 	bl	80067f8 <__mcmp>
 8005f62:	462a      	mov	r2, r5
 8005f64:	9008      	str	r0, [sp, #32]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4648      	mov	r0, r9
 8005f6a:	f000 fc61 	bl	8006830 <__mdiff>
 8005f6e:	68c2      	ldr	r2, [r0, #12]
 8005f70:	4606      	mov	r6, r0
 8005f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f74:	bb02      	cbnz	r2, 8005fb8 <_dtoa_r+0xa48>
 8005f76:	4601      	mov	r1, r0
 8005f78:	9803      	ldr	r0, [sp, #12]
 8005f7a:	f000 fc3d 	bl	80067f8 <__mcmp>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f82:	4631      	mov	r1, r6
 8005f84:	4648      	mov	r0, r9
 8005f86:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005f8a:	f000 fa03 	bl	8006394 <_Bfree>
 8005f8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f92:	9e04      	ldr	r6, [sp, #16]
 8005f94:	ea42 0103 	orr.w	r1, r2, r3
 8005f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9a:	4319      	orrs	r1, r3
 8005f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f9e:	d10d      	bne.n	8005fbc <_dtoa_r+0xa4c>
 8005fa0:	2b39      	cmp	r3, #57	@ 0x39
 8005fa2:	d027      	beq.n	8005ff4 <_dtoa_r+0xa84>
 8005fa4:	9a08      	ldr	r2, [sp, #32]
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	dd01      	ble.n	8005fae <_dtoa_r+0xa3e>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	3331      	adds	r3, #49	@ 0x31
 8005fae:	f88b 3000 	strb.w	r3, [fp]
 8005fb2:	e52e      	b.n	8005a12 <_dtoa_r+0x4a2>
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	e7b9      	b.n	8005f2c <_dtoa_r+0x9bc>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	e7e2      	b.n	8005f82 <_dtoa_r+0xa12>
 8005fbc:	9908      	ldr	r1, [sp, #32]
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	db04      	blt.n	8005fcc <_dtoa_r+0xa5c>
 8005fc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005fc4:	4301      	orrs	r1, r0
 8005fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fc8:	4301      	orrs	r1, r0
 8005fca:	d120      	bne.n	800600e <_dtoa_r+0xa9e>
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	ddee      	ble.n	8005fae <_dtoa_r+0xa3e>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	9903      	ldr	r1, [sp, #12]
 8005fd4:	4648      	mov	r0, r9
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	f000 fba2 	bl	8006720 <__lshift>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	9003      	str	r0, [sp, #12]
 8005fe0:	f000 fc0a 	bl	80067f8 <__mcmp>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	dc02      	bgt.n	8005ff0 <_dtoa_r+0xa80>
 8005fea:	d1e0      	bne.n	8005fae <_dtoa_r+0xa3e>
 8005fec:	07da      	lsls	r2, r3, #31
 8005fee:	d5de      	bpl.n	8005fae <_dtoa_r+0xa3e>
 8005ff0:	2b39      	cmp	r3, #57	@ 0x39
 8005ff2:	d1da      	bne.n	8005faa <_dtoa_r+0xa3a>
 8005ff4:	2339      	movs	r3, #57	@ 0x39
 8005ff6:	f88b 3000 	strb.w	r3, [fp]
 8005ffa:	4633      	mov	r3, r6
 8005ffc:	461e      	mov	r6, r3
 8005ffe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006002:	3b01      	subs	r3, #1
 8006004:	2a39      	cmp	r2, #57	@ 0x39
 8006006:	d04e      	beq.n	80060a6 <_dtoa_r+0xb36>
 8006008:	3201      	adds	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e501      	b.n	8005a12 <_dtoa_r+0x4a2>
 800600e:	2a00      	cmp	r2, #0
 8006010:	dd03      	ble.n	800601a <_dtoa_r+0xaaa>
 8006012:	2b39      	cmp	r3, #57	@ 0x39
 8006014:	d0ee      	beq.n	8005ff4 <_dtoa_r+0xa84>
 8006016:	3301      	adds	r3, #1
 8006018:	e7c9      	b.n	8005fae <_dtoa_r+0xa3e>
 800601a:	9a04      	ldr	r2, [sp, #16]
 800601c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800601e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006022:	428a      	cmp	r2, r1
 8006024:	d028      	beq.n	8006078 <_dtoa_r+0xb08>
 8006026:	2300      	movs	r3, #0
 8006028:	220a      	movs	r2, #10
 800602a:	9903      	ldr	r1, [sp, #12]
 800602c:	4648      	mov	r0, r9
 800602e:	f000 f9d3 	bl	80063d8 <__multadd>
 8006032:	42af      	cmp	r7, r5
 8006034:	9003      	str	r0, [sp, #12]
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	f04f 020a 	mov.w	r2, #10
 800603e:	4639      	mov	r1, r7
 8006040:	4648      	mov	r0, r9
 8006042:	d107      	bne.n	8006054 <_dtoa_r+0xae4>
 8006044:	f000 f9c8 	bl	80063d8 <__multadd>
 8006048:	4607      	mov	r7, r0
 800604a:	4605      	mov	r5, r0
 800604c:	9b04      	ldr	r3, [sp, #16]
 800604e:	3301      	adds	r3, #1
 8006050:	9304      	str	r3, [sp, #16]
 8006052:	e777      	b.n	8005f44 <_dtoa_r+0x9d4>
 8006054:	f000 f9c0 	bl	80063d8 <__multadd>
 8006058:	4629      	mov	r1, r5
 800605a:	4607      	mov	r7, r0
 800605c:	2300      	movs	r3, #0
 800605e:	220a      	movs	r2, #10
 8006060:	4648      	mov	r0, r9
 8006062:	f000 f9b9 	bl	80063d8 <__multadd>
 8006066:	4605      	mov	r5, r0
 8006068:	e7f0      	b.n	800604c <_dtoa_r+0xadc>
 800606a:	f1bb 0f00 	cmp.w	fp, #0
 800606e:	bfcc      	ite	gt
 8006070:	465e      	movgt	r6, fp
 8006072:	2601      	movle	r6, #1
 8006074:	2700      	movs	r7, #0
 8006076:	4456      	add	r6, sl
 8006078:	2201      	movs	r2, #1
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	4648      	mov	r0, r9
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	f000 fb4e 	bl	8006720 <__lshift>
 8006084:	4621      	mov	r1, r4
 8006086:	9003      	str	r0, [sp, #12]
 8006088:	f000 fbb6 	bl	80067f8 <__mcmp>
 800608c:	2800      	cmp	r0, #0
 800608e:	dcb4      	bgt.n	8005ffa <_dtoa_r+0xa8a>
 8006090:	d102      	bne.n	8006098 <_dtoa_r+0xb28>
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	07db      	lsls	r3, r3, #31
 8006096:	d4b0      	bmi.n	8005ffa <_dtoa_r+0xa8a>
 8006098:	4633      	mov	r3, r6
 800609a:	461e      	mov	r6, r3
 800609c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a0:	2a30      	cmp	r2, #48	@ 0x30
 80060a2:	d0fa      	beq.n	800609a <_dtoa_r+0xb2a>
 80060a4:	e4b5      	b.n	8005a12 <_dtoa_r+0x4a2>
 80060a6:	459a      	cmp	sl, r3
 80060a8:	d1a8      	bne.n	8005ffc <_dtoa_r+0xa8c>
 80060aa:	2331      	movs	r3, #49	@ 0x31
 80060ac:	f108 0801 	add.w	r8, r8, #1
 80060b0:	f88a 3000 	strb.w	r3, [sl]
 80060b4:	e4ad      	b.n	8005a12 <_dtoa_r+0x4a2>
 80060b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006114 <_dtoa_r+0xba4>
 80060bc:	b11b      	cbz	r3, 80060c6 <_dtoa_r+0xb56>
 80060be:	f10a 0308 	add.w	r3, sl, #8
 80060c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4650      	mov	r0, sl
 80060c8:	b017      	add	sp, #92	@ 0x5c
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	f77f ae2e 	ble.w	8005d32 <_dtoa_r+0x7c2>
 80060d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060da:	2001      	movs	r0, #1
 80060dc:	e64d      	b.n	8005d7a <_dtoa_r+0x80a>
 80060de:	f1bb 0f00 	cmp.w	fp, #0
 80060e2:	f77f aed9 	ble.w	8005e98 <_dtoa_r+0x928>
 80060e6:	4656      	mov	r6, sl
 80060e8:	4621      	mov	r1, r4
 80060ea:	9803      	ldr	r0, [sp, #12]
 80060ec:	f7ff f9b5 	bl	800545a <quorem>
 80060f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80060f4:	f806 3b01 	strb.w	r3, [r6], #1
 80060f8:	eba6 020a 	sub.w	r2, r6, sl
 80060fc:	4593      	cmp	fp, r2
 80060fe:	ddb4      	ble.n	800606a <_dtoa_r+0xafa>
 8006100:	2300      	movs	r3, #0
 8006102:	220a      	movs	r2, #10
 8006104:	4648      	mov	r0, r9
 8006106:	9903      	ldr	r1, [sp, #12]
 8006108:	f000 f966 	bl	80063d8 <__multadd>
 800610c:	9003      	str	r0, [sp, #12]
 800610e:	e7eb      	b.n	80060e8 <_dtoa_r+0xb78>
 8006110:	08007304 	.word	0x08007304
 8006114:	08007288 	.word	0x08007288

08006118 <_free_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	2900      	cmp	r1, #0
 800611e:	d040      	beq.n	80061a2 <_free_r+0x8a>
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f0c      	subs	r4, r1, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfb8      	it	lt
 800612a:	18e4      	addlt	r4, r4, r3
 800612c:	f000 f8e6 	bl	80062fc <__malloc_lock>
 8006130:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <_free_r+0x8c>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	b933      	cbnz	r3, 8006144 <_free_r+0x2c>
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	4628      	mov	r0, r5
 800613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006140:	f000 b8e2 	b.w	8006308 <__malloc_unlock>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d908      	bls.n	800615a <_free_r+0x42>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	1821      	adds	r1, r4, r0
 800614c:	428b      	cmp	r3, r1
 800614e:	bf01      	itttt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	e7ed      	b.n	8006136 <_free_r+0x1e>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x4c>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x42>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1850      	adds	r0, r2, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x6c>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1850      	adds	r0, r2, r1
 8006172:	4283      	cmp	r3, r0
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1e0      	bne.n	800613a <_free_r+0x22>
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4408      	add	r0, r1
 800617e:	6010      	str	r0, [r2, #0]
 8006180:	6053      	str	r3, [r2, #4]
 8006182:	e7da      	b.n	800613a <_free_r+0x22>
 8006184:	d902      	bls.n	800618c <_free_r+0x74>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d6      	b.n	800613a <_free_r+0x22>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1809      	addeq	r1, r1, r0
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	6063      	str	r3, [r4, #4]
 800619e:	6054      	str	r4, [r2, #4]
 80061a0:	e7cb      	b.n	800613a <_free_r+0x22>
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000444 	.word	0x20000444

080061a8 <malloc>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	@ (80061b4 <malloc+0xc>)
 80061aa:	4601      	mov	r1, r0
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f000 b825 	b.w	80061fc <_malloc_r>
 80061b2:	bf00      	nop
 80061b4:	20000018 	.word	0x20000018

080061b8 <sbrk_aligned>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4e0f      	ldr	r6, [pc, #60]	@ (80061f8 <sbrk_aligned+0x40>)
 80061bc:	460c      	mov	r4, r1
 80061be:	6831      	ldr	r1, [r6, #0]
 80061c0:	4605      	mov	r5, r0
 80061c2:	b911      	cbnz	r1, 80061ca <sbrk_aligned+0x12>
 80061c4:	f000 fed0 	bl	8006f68 <_sbrk_r>
 80061c8:	6030      	str	r0, [r6, #0]
 80061ca:	4621      	mov	r1, r4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 fecb 	bl	8006f68 <_sbrk_r>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d103      	bne.n	80061de <sbrk_aligned+0x26>
 80061d6:	f04f 34ff 	mov.w	r4, #4294967295
 80061da:	4620      	mov	r0, r4
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	1cc4      	adds	r4, r0, #3
 80061e0:	f024 0403 	bic.w	r4, r4, #3
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d0f8      	beq.n	80061da <sbrk_aligned+0x22>
 80061e8:	1a21      	subs	r1, r4, r0
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 febc 	bl	8006f68 <_sbrk_r>
 80061f0:	3001      	adds	r0, #1
 80061f2:	d1f2      	bne.n	80061da <sbrk_aligned+0x22>
 80061f4:	e7ef      	b.n	80061d6 <sbrk_aligned+0x1e>
 80061f6:	bf00      	nop
 80061f8:	20000440 	.word	0x20000440

080061fc <_malloc_r>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	1ccd      	adds	r5, r1, #3
 8006202:	f025 0503 	bic.w	r5, r5, #3
 8006206:	3508      	adds	r5, #8
 8006208:	2d0c      	cmp	r5, #12
 800620a:	bf38      	it	cc
 800620c:	250c      	movcc	r5, #12
 800620e:	2d00      	cmp	r5, #0
 8006210:	4606      	mov	r6, r0
 8006212:	db01      	blt.n	8006218 <_malloc_r+0x1c>
 8006214:	42a9      	cmp	r1, r5
 8006216:	d904      	bls.n	8006222 <_malloc_r+0x26>
 8006218:	230c      	movs	r3, #12
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006222:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062f8 <_malloc_r+0xfc>
 8006226:	f000 f869 	bl	80062fc <__malloc_lock>
 800622a:	f8d8 3000 	ldr.w	r3, [r8]
 800622e:	461c      	mov	r4, r3
 8006230:	bb44      	cbnz	r4, 8006284 <_malloc_r+0x88>
 8006232:	4629      	mov	r1, r5
 8006234:	4630      	mov	r0, r6
 8006236:	f7ff ffbf 	bl	80061b8 <sbrk_aligned>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	4604      	mov	r4, r0
 800623e:	d158      	bne.n	80062f2 <_malloc_r+0xf6>
 8006240:	f8d8 4000 	ldr.w	r4, [r8]
 8006244:	4627      	mov	r7, r4
 8006246:	2f00      	cmp	r7, #0
 8006248:	d143      	bne.n	80062d2 <_malloc_r+0xd6>
 800624a:	2c00      	cmp	r4, #0
 800624c:	d04b      	beq.n	80062e6 <_malloc_r+0xea>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	4639      	mov	r1, r7
 8006252:	4630      	mov	r0, r6
 8006254:	eb04 0903 	add.w	r9, r4, r3
 8006258:	f000 fe86 	bl	8006f68 <_sbrk_r>
 800625c:	4581      	cmp	r9, r0
 800625e:	d142      	bne.n	80062e6 <_malloc_r+0xea>
 8006260:	6821      	ldr	r1, [r4, #0]
 8006262:	4630      	mov	r0, r6
 8006264:	1a6d      	subs	r5, r5, r1
 8006266:	4629      	mov	r1, r5
 8006268:	f7ff ffa6 	bl	80061b8 <sbrk_aligned>
 800626c:	3001      	adds	r0, #1
 800626e:	d03a      	beq.n	80062e6 <_malloc_r+0xea>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	442b      	add	r3, r5
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	f8d8 3000 	ldr.w	r3, [r8]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	bb62      	cbnz	r2, 80062d8 <_malloc_r+0xdc>
 800627e:	f8c8 7000 	str.w	r7, [r8]
 8006282:	e00f      	b.n	80062a4 <_malloc_r+0xa8>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	1b52      	subs	r2, r2, r5
 8006288:	d420      	bmi.n	80062cc <_malloc_r+0xd0>
 800628a:	2a0b      	cmp	r2, #11
 800628c:	d917      	bls.n	80062be <_malloc_r+0xc2>
 800628e:	1961      	adds	r1, r4, r5
 8006290:	42a3      	cmp	r3, r4
 8006292:	6025      	str	r5, [r4, #0]
 8006294:	bf18      	it	ne
 8006296:	6059      	strne	r1, [r3, #4]
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	bf08      	it	eq
 800629c:	f8c8 1000 	streq.w	r1, [r8]
 80062a0:	5162      	str	r2, [r4, r5]
 80062a2:	604b      	str	r3, [r1, #4]
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f82f 	bl	8006308 <__malloc_unlock>
 80062aa:	f104 000b 	add.w	r0, r4, #11
 80062ae:	1d23      	adds	r3, r4, #4
 80062b0:	f020 0007 	bic.w	r0, r0, #7
 80062b4:	1ac2      	subs	r2, r0, r3
 80062b6:	bf1c      	itt	ne
 80062b8:	1a1b      	subne	r3, r3, r0
 80062ba:	50a3      	strne	r3, [r4, r2]
 80062bc:	e7af      	b.n	800621e <_malloc_r+0x22>
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	bf0c      	ite	eq
 80062c4:	f8c8 2000 	streq.w	r2, [r8]
 80062c8:	605a      	strne	r2, [r3, #4]
 80062ca:	e7eb      	b.n	80062a4 <_malloc_r+0xa8>
 80062cc:	4623      	mov	r3, r4
 80062ce:	6864      	ldr	r4, [r4, #4]
 80062d0:	e7ae      	b.n	8006230 <_malloc_r+0x34>
 80062d2:	463c      	mov	r4, r7
 80062d4:	687f      	ldr	r7, [r7, #4]
 80062d6:	e7b6      	b.n	8006246 <_malloc_r+0x4a>
 80062d8:	461a      	mov	r2, r3
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d1fb      	bne.n	80062d8 <_malloc_r+0xdc>
 80062e0:	2300      	movs	r3, #0
 80062e2:	6053      	str	r3, [r2, #4]
 80062e4:	e7de      	b.n	80062a4 <_malloc_r+0xa8>
 80062e6:	230c      	movs	r3, #12
 80062e8:	4630      	mov	r0, r6
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	f000 f80c 	bl	8006308 <__malloc_unlock>
 80062f0:	e794      	b.n	800621c <_malloc_r+0x20>
 80062f2:	6005      	str	r5, [r0, #0]
 80062f4:	e7d6      	b.n	80062a4 <_malloc_r+0xa8>
 80062f6:	bf00      	nop
 80062f8:	20000444 	.word	0x20000444

080062fc <__malloc_lock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_lock+0x8>)
 80062fe:	f7ff b89c 	b.w	800543a <__retarget_lock_acquire_recursive>
 8006302:	bf00      	nop
 8006304:	2000043c 	.word	0x2000043c

08006308 <__malloc_unlock>:
 8006308:	4801      	ldr	r0, [pc, #4]	@ (8006310 <__malloc_unlock+0x8>)
 800630a:	f7ff b897 	b.w	800543c <__retarget_lock_release_recursive>
 800630e:	bf00      	nop
 8006310:	2000043c 	.word	0x2000043c

08006314 <_Balloc>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	69c6      	ldr	r6, [r0, #28]
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	b976      	cbnz	r6, 800633c <_Balloc+0x28>
 800631e:	2010      	movs	r0, #16
 8006320:	f7ff ff42 	bl	80061a8 <malloc>
 8006324:	4602      	mov	r2, r0
 8006326:	61e0      	str	r0, [r4, #28]
 8006328:	b920      	cbnz	r0, 8006334 <_Balloc+0x20>
 800632a:	216b      	movs	r1, #107	@ 0x6b
 800632c:	4b17      	ldr	r3, [pc, #92]	@ (800638c <_Balloc+0x78>)
 800632e:	4818      	ldr	r0, [pc, #96]	@ (8006390 <_Balloc+0x7c>)
 8006330:	f000 fe38 	bl	8006fa4 <__assert_func>
 8006334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006338:	6006      	str	r6, [r0, #0]
 800633a:	60c6      	str	r6, [r0, #12]
 800633c:	69e6      	ldr	r6, [r4, #28]
 800633e:	68f3      	ldr	r3, [r6, #12]
 8006340:	b183      	cbz	r3, 8006364 <_Balloc+0x50>
 8006342:	69e3      	ldr	r3, [r4, #28]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800634a:	b9b8      	cbnz	r0, 800637c <_Balloc+0x68>
 800634c:	2101      	movs	r1, #1
 800634e:	fa01 f605 	lsl.w	r6, r1, r5
 8006352:	1d72      	adds	r2, r6, #5
 8006354:	4620      	mov	r0, r4
 8006356:	0092      	lsls	r2, r2, #2
 8006358:	f000 fe42 	bl	8006fe0 <_calloc_r>
 800635c:	b160      	cbz	r0, 8006378 <_Balloc+0x64>
 800635e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006362:	e00e      	b.n	8006382 <_Balloc+0x6e>
 8006364:	2221      	movs	r2, #33	@ 0x21
 8006366:	2104      	movs	r1, #4
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fe39 	bl	8006fe0 <_calloc_r>
 800636e:	69e3      	ldr	r3, [r4, #28]
 8006370:	60f0      	str	r0, [r6, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e4      	bne.n	8006342 <_Balloc+0x2e>
 8006378:	2000      	movs	r0, #0
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	6802      	ldr	r2, [r0, #0]
 800637e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006382:	2300      	movs	r3, #0
 8006384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006388:	e7f7      	b.n	800637a <_Balloc+0x66>
 800638a:	bf00      	nop
 800638c:	08007295 	.word	0x08007295
 8006390:	08007315 	.word	0x08007315

08006394 <_Bfree>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	69c6      	ldr	r6, [r0, #28]
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b976      	cbnz	r6, 80063bc <_Bfree+0x28>
 800639e:	2010      	movs	r0, #16
 80063a0:	f7ff ff02 	bl	80061a8 <malloc>
 80063a4:	4602      	mov	r2, r0
 80063a6:	61e8      	str	r0, [r5, #28]
 80063a8:	b920      	cbnz	r0, 80063b4 <_Bfree+0x20>
 80063aa:	218f      	movs	r1, #143	@ 0x8f
 80063ac:	4b08      	ldr	r3, [pc, #32]	@ (80063d0 <_Bfree+0x3c>)
 80063ae:	4809      	ldr	r0, [pc, #36]	@ (80063d4 <_Bfree+0x40>)
 80063b0:	f000 fdf8 	bl	8006fa4 <__assert_func>
 80063b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063b8:	6006      	str	r6, [r0, #0]
 80063ba:	60c6      	str	r6, [r0, #12]
 80063bc:	b13c      	cbz	r4, 80063ce <_Bfree+0x3a>
 80063be:	69eb      	ldr	r3, [r5, #28]
 80063c0:	6862      	ldr	r2, [r4, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063c8:	6021      	str	r1, [r4, #0]
 80063ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	08007295 	.word	0x08007295
 80063d4:	08007315 	.word	0x08007315

080063d8 <__multadd>:
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	4607      	mov	r7, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	461e      	mov	r6, r3
 80063e2:	2000      	movs	r0, #0
 80063e4:	690d      	ldr	r5, [r1, #16]
 80063e6:	f101 0c14 	add.w	ip, r1, #20
 80063ea:	f8dc 3000 	ldr.w	r3, [ip]
 80063ee:	3001      	adds	r0, #1
 80063f0:	b299      	uxth	r1, r3
 80063f2:	fb02 6101 	mla	r1, r2, r1, r6
 80063f6:	0c1e      	lsrs	r6, r3, #16
 80063f8:	0c0b      	lsrs	r3, r1, #16
 80063fa:	fb02 3306 	mla	r3, r2, r6, r3
 80063fe:	b289      	uxth	r1, r1
 8006400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006404:	4285      	cmp	r5, r0
 8006406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800640a:	f84c 1b04 	str.w	r1, [ip], #4
 800640e:	dcec      	bgt.n	80063ea <__multadd+0x12>
 8006410:	b30e      	cbz	r6, 8006456 <__multadd+0x7e>
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	42ab      	cmp	r3, r5
 8006416:	dc19      	bgt.n	800644c <__multadd+0x74>
 8006418:	6861      	ldr	r1, [r4, #4]
 800641a:	4638      	mov	r0, r7
 800641c:	3101      	adds	r1, #1
 800641e:	f7ff ff79 	bl	8006314 <_Balloc>
 8006422:	4680      	mov	r8, r0
 8006424:	b928      	cbnz	r0, 8006432 <__multadd+0x5a>
 8006426:	4602      	mov	r2, r0
 8006428:	21ba      	movs	r1, #186	@ 0xba
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <__multadd+0x84>)
 800642c:	480c      	ldr	r0, [pc, #48]	@ (8006460 <__multadd+0x88>)
 800642e:	f000 fdb9 	bl	8006fa4 <__assert_func>
 8006432:	6922      	ldr	r2, [r4, #16]
 8006434:	f104 010c 	add.w	r1, r4, #12
 8006438:	3202      	adds	r2, #2
 800643a:	0092      	lsls	r2, r2, #2
 800643c:	300c      	adds	r0, #12
 800643e:	f000 fda3 	bl	8006f88 <memcpy>
 8006442:	4621      	mov	r1, r4
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ffa5 	bl	8006394 <_Bfree>
 800644a:	4644      	mov	r4, r8
 800644c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006450:	3501      	adds	r5, #1
 8006452:	615e      	str	r6, [r3, #20]
 8006454:	6125      	str	r5, [r4, #16]
 8006456:	4620      	mov	r0, r4
 8006458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645c:	08007304 	.word	0x08007304
 8006460:	08007315 	.word	0x08007315

08006464 <__hi0bits>:
 8006464:	4603      	mov	r3, r0
 8006466:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800646a:	bf3a      	itte	cc
 800646c:	0403      	lslcc	r3, r0, #16
 800646e:	2010      	movcc	r0, #16
 8006470:	2000      	movcs	r0, #0
 8006472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006476:	bf3c      	itt	cc
 8006478:	021b      	lslcc	r3, r3, #8
 800647a:	3008      	addcc	r0, #8
 800647c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006480:	bf3c      	itt	cc
 8006482:	011b      	lslcc	r3, r3, #4
 8006484:	3004      	addcc	r0, #4
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648a:	bf3c      	itt	cc
 800648c:	009b      	lslcc	r3, r3, #2
 800648e:	3002      	addcc	r0, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	db05      	blt.n	80064a0 <__hi0bits+0x3c>
 8006494:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006498:	f100 0001 	add.w	r0, r0, #1
 800649c:	bf08      	it	eq
 800649e:	2020      	moveq	r0, #32
 80064a0:	4770      	bx	lr

080064a2 <__lo0bits>:
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	4602      	mov	r2, r0
 80064a6:	f013 0007 	ands.w	r0, r3, #7
 80064aa:	d00b      	beq.n	80064c4 <__lo0bits+0x22>
 80064ac:	07d9      	lsls	r1, r3, #31
 80064ae:	d421      	bmi.n	80064f4 <__lo0bits+0x52>
 80064b0:	0798      	lsls	r0, r3, #30
 80064b2:	bf49      	itett	mi
 80064b4:	085b      	lsrmi	r3, r3, #1
 80064b6:	089b      	lsrpl	r3, r3, #2
 80064b8:	2001      	movmi	r0, #1
 80064ba:	6013      	strmi	r3, [r2, #0]
 80064bc:	bf5c      	itt	pl
 80064be:	2002      	movpl	r0, #2
 80064c0:	6013      	strpl	r3, [r2, #0]
 80064c2:	4770      	bx	lr
 80064c4:	b299      	uxth	r1, r3
 80064c6:	b909      	cbnz	r1, 80064cc <__lo0bits+0x2a>
 80064c8:	2010      	movs	r0, #16
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	b2d9      	uxtb	r1, r3
 80064ce:	b909      	cbnz	r1, 80064d4 <__lo0bits+0x32>
 80064d0:	3008      	adds	r0, #8
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	0719      	lsls	r1, r3, #28
 80064d6:	bf04      	itt	eq
 80064d8:	091b      	lsreq	r3, r3, #4
 80064da:	3004      	addeq	r0, #4
 80064dc:	0799      	lsls	r1, r3, #30
 80064de:	bf04      	itt	eq
 80064e0:	089b      	lsreq	r3, r3, #2
 80064e2:	3002      	addeq	r0, #2
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d403      	bmi.n	80064f0 <__lo0bits+0x4e>
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	f100 0001 	add.w	r0, r0, #1
 80064ee:	d003      	beq.n	80064f8 <__lo0bits+0x56>
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4770      	bx	lr
 80064f4:	2000      	movs	r0, #0
 80064f6:	4770      	bx	lr
 80064f8:	2020      	movs	r0, #32
 80064fa:	4770      	bx	lr

080064fc <__i2b>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	460c      	mov	r4, r1
 8006500:	2101      	movs	r1, #1
 8006502:	f7ff ff07 	bl	8006314 <_Balloc>
 8006506:	4602      	mov	r2, r0
 8006508:	b928      	cbnz	r0, 8006516 <__i2b+0x1a>
 800650a:	f240 1145 	movw	r1, #325	@ 0x145
 800650e:	4b04      	ldr	r3, [pc, #16]	@ (8006520 <__i2b+0x24>)
 8006510:	4804      	ldr	r0, [pc, #16]	@ (8006524 <__i2b+0x28>)
 8006512:	f000 fd47 	bl	8006fa4 <__assert_func>
 8006516:	2301      	movs	r3, #1
 8006518:	6144      	str	r4, [r0, #20]
 800651a:	6103      	str	r3, [r0, #16]
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	08007304 	.word	0x08007304
 8006524:	08007315 	.word	0x08007315

08006528 <__multiply>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4617      	mov	r7, r2
 800652e:	690a      	ldr	r2, [r1, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4689      	mov	r9, r1
 8006534:	429a      	cmp	r2, r3
 8006536:	bfa2      	ittt	ge
 8006538:	463b      	movge	r3, r7
 800653a:	460f      	movge	r7, r1
 800653c:	4699      	movge	r9, r3
 800653e:	693d      	ldr	r5, [r7, #16]
 8006540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	eb05 060a 	add.w	r6, r5, sl
 800654c:	42b3      	cmp	r3, r6
 800654e:	b085      	sub	sp, #20
 8006550:	bfb8      	it	lt
 8006552:	3101      	addlt	r1, #1
 8006554:	f7ff fede 	bl	8006314 <_Balloc>
 8006558:	b930      	cbnz	r0, 8006568 <__multiply+0x40>
 800655a:	4602      	mov	r2, r0
 800655c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006560:	4b40      	ldr	r3, [pc, #256]	@ (8006664 <__multiply+0x13c>)
 8006562:	4841      	ldr	r0, [pc, #260]	@ (8006668 <__multiply+0x140>)
 8006564:	f000 fd1e 	bl	8006fa4 <__assert_func>
 8006568:	f100 0414 	add.w	r4, r0, #20
 800656c:	4623      	mov	r3, r4
 800656e:	2200      	movs	r2, #0
 8006570:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006574:	4573      	cmp	r3, lr
 8006576:	d320      	bcc.n	80065ba <__multiply+0x92>
 8006578:	f107 0814 	add.w	r8, r7, #20
 800657c:	f109 0114 	add.w	r1, r9, #20
 8006580:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006584:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006588:	9302      	str	r3, [sp, #8]
 800658a:	1beb      	subs	r3, r5, r7
 800658c:	3b15      	subs	r3, #21
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	3304      	adds	r3, #4
 8006594:	3715      	adds	r7, #21
 8006596:	42bd      	cmp	r5, r7
 8006598:	bf38      	it	cc
 800659a:	2304      	movcc	r3, #4
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	428b      	cmp	r3, r1
 80065a4:	d80c      	bhi.n	80065c0 <__multiply+0x98>
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	dd03      	ble.n	80065b2 <__multiply+0x8a>
 80065aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d055      	beq.n	800665e <__multiply+0x136>
 80065b2:	6106      	str	r6, [r0, #16]
 80065b4:	b005      	add	sp, #20
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	f843 2b04 	str.w	r2, [r3], #4
 80065be:	e7d9      	b.n	8006574 <__multiply+0x4c>
 80065c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80065c4:	f1ba 0f00 	cmp.w	sl, #0
 80065c8:	d01f      	beq.n	800660a <__multiply+0xe2>
 80065ca:	46c4      	mov	ip, r8
 80065cc:	46a1      	mov	r9, r4
 80065ce:	2700      	movs	r7, #0
 80065d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065d4:	f8d9 3000 	ldr.w	r3, [r9]
 80065d8:	fa1f fb82 	uxth.w	fp, r2
 80065dc:	b29b      	uxth	r3, r3
 80065de:	fb0a 330b 	mla	r3, sl, fp, r3
 80065e2:	443b      	add	r3, r7
 80065e4:	f8d9 7000 	ldr.w	r7, [r9]
 80065e8:	0c12      	lsrs	r2, r2, #16
 80065ea:	0c3f      	lsrs	r7, r7, #16
 80065ec:	fb0a 7202 	mla	r2, sl, r2, r7
 80065f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fa:	4565      	cmp	r5, ip
 80065fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006600:	f849 3b04 	str.w	r3, [r9], #4
 8006604:	d8e4      	bhi.n	80065d0 <__multiply+0xa8>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	50e7      	str	r7, [r4, r3]
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	3104      	adds	r1, #4
 800660e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	d020      	beq.n	800665a <__multiply+0x132>
 8006618:	4647      	mov	r7, r8
 800661a:	46a4      	mov	ip, r4
 800661c:	f04f 0a00 	mov.w	sl, #0
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	f8b7 b000 	ldrh.w	fp, [r7]
 8006626:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800662a:	b29b      	uxth	r3, r3
 800662c:	fb09 220b 	mla	r2, r9, fp, r2
 8006630:	4452      	add	r2, sl
 8006632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006636:	f84c 3b04 	str.w	r3, [ip], #4
 800663a:	f857 3b04 	ldr.w	r3, [r7], #4
 800663e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006642:	f8bc 3000 	ldrh.w	r3, [ip]
 8006646:	42bd      	cmp	r5, r7
 8006648:	fb09 330a 	mla	r3, r9, sl, r3
 800664c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006650:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006654:	d8e5      	bhi.n	8006622 <__multiply+0xfa>
 8006656:	9a01      	ldr	r2, [sp, #4]
 8006658:	50a3      	str	r3, [r4, r2]
 800665a:	3404      	adds	r4, #4
 800665c:	e79f      	b.n	800659e <__multiply+0x76>
 800665e:	3e01      	subs	r6, #1
 8006660:	e7a1      	b.n	80065a6 <__multiply+0x7e>
 8006662:	bf00      	nop
 8006664:	08007304 	.word	0x08007304
 8006668:	08007315 	.word	0x08007315

0800666c <__pow5mult>:
 800666c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006670:	4615      	mov	r5, r2
 8006672:	f012 0203 	ands.w	r2, r2, #3
 8006676:	4607      	mov	r7, r0
 8006678:	460e      	mov	r6, r1
 800667a:	d007      	beq.n	800668c <__pow5mult+0x20>
 800667c:	4c25      	ldr	r4, [pc, #148]	@ (8006714 <__pow5mult+0xa8>)
 800667e:	3a01      	subs	r2, #1
 8006680:	2300      	movs	r3, #0
 8006682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006686:	f7ff fea7 	bl	80063d8 <__multadd>
 800668a:	4606      	mov	r6, r0
 800668c:	10ad      	asrs	r5, r5, #2
 800668e:	d03d      	beq.n	800670c <__pow5mult+0xa0>
 8006690:	69fc      	ldr	r4, [r7, #28]
 8006692:	b97c      	cbnz	r4, 80066b4 <__pow5mult+0x48>
 8006694:	2010      	movs	r0, #16
 8006696:	f7ff fd87 	bl	80061a8 <malloc>
 800669a:	4602      	mov	r2, r0
 800669c:	61f8      	str	r0, [r7, #28]
 800669e:	b928      	cbnz	r0, 80066ac <__pow5mult+0x40>
 80066a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80066a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006718 <__pow5mult+0xac>)
 80066a6:	481d      	ldr	r0, [pc, #116]	@ (800671c <__pow5mult+0xb0>)
 80066a8:	f000 fc7c 	bl	8006fa4 <__assert_func>
 80066ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066b0:	6004      	str	r4, [r0, #0]
 80066b2:	60c4      	str	r4, [r0, #12]
 80066b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066bc:	b94c      	cbnz	r4, 80066d2 <__pow5mult+0x66>
 80066be:	f240 2171 	movw	r1, #625	@ 0x271
 80066c2:	4638      	mov	r0, r7
 80066c4:	f7ff ff1a 	bl	80064fc <__i2b>
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80066d0:	6003      	str	r3, [r0, #0]
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	07eb      	lsls	r3, r5, #31
 80066d8:	d50a      	bpl.n	80066f0 <__pow5mult+0x84>
 80066da:	4631      	mov	r1, r6
 80066dc:	4622      	mov	r2, r4
 80066de:	4638      	mov	r0, r7
 80066e0:	f7ff ff22 	bl	8006528 <__multiply>
 80066e4:	4680      	mov	r8, r0
 80066e6:	4631      	mov	r1, r6
 80066e8:	4638      	mov	r0, r7
 80066ea:	f7ff fe53 	bl	8006394 <_Bfree>
 80066ee:	4646      	mov	r6, r8
 80066f0:	106d      	asrs	r5, r5, #1
 80066f2:	d00b      	beq.n	800670c <__pow5mult+0xa0>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	b938      	cbnz	r0, 8006708 <__pow5mult+0x9c>
 80066f8:	4622      	mov	r2, r4
 80066fa:	4621      	mov	r1, r4
 80066fc:	4638      	mov	r0, r7
 80066fe:	f7ff ff13 	bl	8006528 <__multiply>
 8006702:	6020      	str	r0, [r4, #0]
 8006704:	f8c0 9000 	str.w	r9, [r0]
 8006708:	4604      	mov	r4, r0
 800670a:	e7e4      	b.n	80066d6 <__pow5mult+0x6a>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	bf00      	nop
 8006714:	080073c8 	.word	0x080073c8
 8006718:	08007295 	.word	0x08007295
 800671c:	08007315 	.word	0x08007315

08006720 <__lshift>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	4607      	mov	r7, r0
 8006728:	4691      	mov	r9, r2
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	6849      	ldr	r1, [r1, #4]
 800672e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006738:	f108 0601 	add.w	r6, r8, #1
 800673c:	42b3      	cmp	r3, r6
 800673e:	db0b      	blt.n	8006758 <__lshift+0x38>
 8006740:	4638      	mov	r0, r7
 8006742:	f7ff fde7 	bl	8006314 <_Balloc>
 8006746:	4605      	mov	r5, r0
 8006748:	b948      	cbnz	r0, 800675e <__lshift+0x3e>
 800674a:	4602      	mov	r2, r0
 800674c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006750:	4b27      	ldr	r3, [pc, #156]	@ (80067f0 <__lshift+0xd0>)
 8006752:	4828      	ldr	r0, [pc, #160]	@ (80067f4 <__lshift+0xd4>)
 8006754:	f000 fc26 	bl	8006fa4 <__assert_func>
 8006758:	3101      	adds	r1, #1
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	e7ee      	b.n	800673c <__lshift+0x1c>
 800675e:	2300      	movs	r3, #0
 8006760:	f100 0114 	add.w	r1, r0, #20
 8006764:	f100 0210 	add.w	r2, r0, #16
 8006768:	4618      	mov	r0, r3
 800676a:	4553      	cmp	r3, sl
 800676c:	db33      	blt.n	80067d6 <__lshift+0xb6>
 800676e:	6920      	ldr	r0, [r4, #16]
 8006770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006774:	f104 0314 	add.w	r3, r4, #20
 8006778:	f019 091f 	ands.w	r9, r9, #31
 800677c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006784:	d02b      	beq.n	80067de <__lshift+0xbe>
 8006786:	468a      	mov	sl, r1
 8006788:	2200      	movs	r2, #0
 800678a:	f1c9 0e20 	rsb	lr, r9, #32
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	fa00 f009 	lsl.w	r0, r0, r9
 8006794:	4310      	orrs	r0, r2
 8006796:	f84a 0b04 	str.w	r0, [sl], #4
 800679a:	f853 2b04 	ldr.w	r2, [r3], #4
 800679e:	459c      	cmp	ip, r3
 80067a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80067a4:	d8f3      	bhi.n	800678e <__lshift+0x6e>
 80067a6:	ebac 0304 	sub.w	r3, ip, r4
 80067aa:	3b15      	subs	r3, #21
 80067ac:	f023 0303 	bic.w	r3, r3, #3
 80067b0:	3304      	adds	r3, #4
 80067b2:	f104 0015 	add.w	r0, r4, #21
 80067b6:	4560      	cmp	r0, ip
 80067b8:	bf88      	it	hi
 80067ba:	2304      	movhi	r3, #4
 80067bc:	50ca      	str	r2, [r1, r3]
 80067be:	b10a      	cbz	r2, 80067c4 <__lshift+0xa4>
 80067c0:	f108 0602 	add.w	r6, r8, #2
 80067c4:	3e01      	subs	r6, #1
 80067c6:	4638      	mov	r0, r7
 80067c8:	4621      	mov	r1, r4
 80067ca:	612e      	str	r6, [r5, #16]
 80067cc:	f7ff fde2 	bl	8006394 <_Bfree>
 80067d0:	4628      	mov	r0, r5
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80067da:	3301      	adds	r3, #1
 80067dc:	e7c5      	b.n	800676a <__lshift+0x4a>
 80067de:	3904      	subs	r1, #4
 80067e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e4:	459c      	cmp	ip, r3
 80067e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80067ea:	d8f9      	bhi.n	80067e0 <__lshift+0xc0>
 80067ec:	e7ea      	b.n	80067c4 <__lshift+0xa4>
 80067ee:	bf00      	nop
 80067f0:	08007304 	.word	0x08007304
 80067f4:	08007315 	.word	0x08007315

080067f8 <__mcmp>:
 80067f8:	4603      	mov	r3, r0
 80067fa:	690a      	ldr	r2, [r1, #16]
 80067fc:	6900      	ldr	r0, [r0, #16]
 80067fe:	b530      	push	{r4, r5, lr}
 8006800:	1a80      	subs	r0, r0, r2
 8006802:	d10e      	bne.n	8006822 <__mcmp+0x2a>
 8006804:	3314      	adds	r3, #20
 8006806:	3114      	adds	r1, #20
 8006808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800680c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006818:	4295      	cmp	r5, r2
 800681a:	d003      	beq.n	8006824 <__mcmp+0x2c>
 800681c:	d205      	bcs.n	800682a <__mcmp+0x32>
 800681e:	f04f 30ff 	mov.w	r0, #4294967295
 8006822:	bd30      	pop	{r4, r5, pc}
 8006824:	42a3      	cmp	r3, r4
 8006826:	d3f3      	bcc.n	8006810 <__mcmp+0x18>
 8006828:	e7fb      	b.n	8006822 <__mcmp+0x2a>
 800682a:	2001      	movs	r0, #1
 800682c:	e7f9      	b.n	8006822 <__mcmp+0x2a>
	...

08006830 <__mdiff>:
 8006830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	4689      	mov	r9, r1
 8006836:	4606      	mov	r6, r0
 8006838:	4611      	mov	r1, r2
 800683a:	4648      	mov	r0, r9
 800683c:	4614      	mov	r4, r2
 800683e:	f7ff ffdb 	bl	80067f8 <__mcmp>
 8006842:	1e05      	subs	r5, r0, #0
 8006844:	d112      	bne.n	800686c <__mdiff+0x3c>
 8006846:	4629      	mov	r1, r5
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff fd63 	bl	8006314 <_Balloc>
 800684e:	4602      	mov	r2, r0
 8006850:	b928      	cbnz	r0, 800685e <__mdiff+0x2e>
 8006852:	f240 2137 	movw	r1, #567	@ 0x237
 8006856:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <__mdiff+0x120>)
 8006858:	483e      	ldr	r0, [pc, #248]	@ (8006954 <__mdiff+0x124>)
 800685a:	f000 fba3 	bl	8006fa4 <__assert_func>
 800685e:	2301      	movs	r3, #1
 8006860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006864:	4610      	mov	r0, r2
 8006866:	b003      	add	sp, #12
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	bfbc      	itt	lt
 800686e:	464b      	movlt	r3, r9
 8006870:	46a1      	movlt	r9, r4
 8006872:	4630      	mov	r0, r6
 8006874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006878:	bfba      	itte	lt
 800687a:	461c      	movlt	r4, r3
 800687c:	2501      	movlt	r5, #1
 800687e:	2500      	movge	r5, #0
 8006880:	f7ff fd48 	bl	8006314 <_Balloc>
 8006884:	4602      	mov	r2, r0
 8006886:	b918      	cbnz	r0, 8006890 <__mdiff+0x60>
 8006888:	f240 2145 	movw	r1, #581	@ 0x245
 800688c:	4b30      	ldr	r3, [pc, #192]	@ (8006950 <__mdiff+0x120>)
 800688e:	e7e3      	b.n	8006858 <__mdiff+0x28>
 8006890:	f100 0b14 	add.w	fp, r0, #20
 8006894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006898:	f109 0310 	add.w	r3, r9, #16
 800689c:	60c5      	str	r5, [r0, #12]
 800689e:	f04f 0c00 	mov.w	ip, #0
 80068a2:	f109 0514 	add.w	r5, r9, #20
 80068a6:	46d9      	mov	r9, fp
 80068a8:	6926      	ldr	r6, [r4, #16]
 80068aa:	f104 0e14 	add.w	lr, r4, #20
 80068ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80068b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80068c2:	b281      	uxth	r1, r0
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	fa1f f38a 	uxth.w	r3, sl
 80068ca:	1a5b      	subs	r3, r3, r1
 80068cc:	0c00      	lsrs	r0, r0, #16
 80068ce:	4463      	add	r3, ip
 80068d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80068d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80068de:	4576      	cmp	r6, lr
 80068e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068e4:	f849 3b04 	str.w	r3, [r9], #4
 80068e8:	d8e6      	bhi.n	80068b8 <__mdiff+0x88>
 80068ea:	1b33      	subs	r3, r6, r4
 80068ec:	3b15      	subs	r3, #21
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	3415      	adds	r4, #21
 80068f4:	3304      	adds	r3, #4
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	bf38      	it	cc
 80068fa:	2304      	movcc	r3, #4
 80068fc:	441d      	add	r5, r3
 80068fe:	445b      	add	r3, fp
 8006900:	461e      	mov	r6, r3
 8006902:	462c      	mov	r4, r5
 8006904:	4544      	cmp	r4, r8
 8006906:	d30e      	bcc.n	8006926 <__mdiff+0xf6>
 8006908:	f108 0103 	add.w	r1, r8, #3
 800690c:	1b49      	subs	r1, r1, r5
 800690e:	f021 0103 	bic.w	r1, r1, #3
 8006912:	3d03      	subs	r5, #3
 8006914:	45a8      	cmp	r8, r5
 8006916:	bf38      	it	cc
 8006918:	2100      	movcc	r1, #0
 800691a:	440b      	add	r3, r1
 800691c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006920:	b199      	cbz	r1, 800694a <__mdiff+0x11a>
 8006922:	6117      	str	r7, [r2, #16]
 8006924:	e79e      	b.n	8006864 <__mdiff+0x34>
 8006926:	46e6      	mov	lr, ip
 8006928:	f854 1b04 	ldr.w	r1, [r4], #4
 800692c:	fa1f fc81 	uxth.w	ip, r1
 8006930:	44f4      	add	ip, lr
 8006932:	0c08      	lsrs	r0, r1, #16
 8006934:	4471      	add	r1, lr
 8006936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800693a:	b289      	uxth	r1, r1
 800693c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006940:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006944:	f846 1b04 	str.w	r1, [r6], #4
 8006948:	e7dc      	b.n	8006904 <__mdiff+0xd4>
 800694a:	3f01      	subs	r7, #1
 800694c:	e7e6      	b.n	800691c <__mdiff+0xec>
 800694e:	bf00      	nop
 8006950:	08007304 	.word	0x08007304
 8006954:	08007315 	.word	0x08007315

08006958 <__d2b>:
 8006958:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800695c:	2101      	movs	r1, #1
 800695e:	4690      	mov	r8, r2
 8006960:	4699      	mov	r9, r3
 8006962:	9e08      	ldr	r6, [sp, #32]
 8006964:	f7ff fcd6 	bl	8006314 <_Balloc>
 8006968:	4604      	mov	r4, r0
 800696a:	b930      	cbnz	r0, 800697a <__d2b+0x22>
 800696c:	4602      	mov	r2, r0
 800696e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006972:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <__d2b+0xa8>)
 8006974:	4823      	ldr	r0, [pc, #140]	@ (8006a04 <__d2b+0xac>)
 8006976:	f000 fb15 	bl	8006fa4 <__assert_func>
 800697a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800697e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006982:	b10d      	cbz	r5, 8006988 <__d2b+0x30>
 8006984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	f1b8 0300 	subs.w	r3, r8, #0
 800698e:	d024      	beq.n	80069da <__d2b+0x82>
 8006990:	4668      	mov	r0, sp
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	f7ff fd85 	bl	80064a2 <__lo0bits>
 8006998:	e9dd 1200 	ldrd	r1, r2, [sp]
 800699c:	b1d8      	cbz	r0, 80069d6 <__d2b+0x7e>
 800699e:	f1c0 0320 	rsb	r3, r0, #32
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	430b      	orrs	r3, r1
 80069a8:	40c2      	lsrs	r2, r0
 80069aa:	6163      	str	r3, [r4, #20]
 80069ac:	9201      	str	r2, [sp, #4]
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2201      	moveq	r2, #1
 80069b6:	2202      	movne	r2, #2
 80069b8:	61a3      	str	r3, [r4, #24]
 80069ba:	6122      	str	r2, [r4, #16]
 80069bc:	b1ad      	cbz	r5, 80069ea <__d2b+0x92>
 80069be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069c2:	4405      	add	r5, r0
 80069c4:	6035      	str	r5, [r6, #0]
 80069c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	6018      	str	r0, [r3, #0]
 80069ce:	4620      	mov	r0, r4
 80069d0:	b002      	add	sp, #8
 80069d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80069d6:	6161      	str	r1, [r4, #20]
 80069d8:	e7e9      	b.n	80069ae <__d2b+0x56>
 80069da:	a801      	add	r0, sp, #4
 80069dc:	f7ff fd61 	bl	80064a2 <__lo0bits>
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	6163      	str	r3, [r4, #20]
 80069e6:	3020      	adds	r0, #32
 80069e8:	e7e7      	b.n	80069ba <__d2b+0x62>
 80069ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069f2:	6030      	str	r0, [r6, #0]
 80069f4:	6918      	ldr	r0, [r3, #16]
 80069f6:	f7ff fd35 	bl	8006464 <__hi0bits>
 80069fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069fe:	e7e4      	b.n	80069ca <__d2b+0x72>
 8006a00:	08007304 	.word	0x08007304
 8006a04:	08007315 	.word	0x08007315

08006a08 <__sfputc_r>:
 8006a08:	6893      	ldr	r3, [r2, #8]
 8006a0a:	b410      	push	{r4}
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	6093      	str	r3, [r2, #8]
 8006a12:	da07      	bge.n	8006a24 <__sfputc_r+0x1c>
 8006a14:	6994      	ldr	r4, [r2, #24]
 8006a16:	42a3      	cmp	r3, r4
 8006a18:	db01      	blt.n	8006a1e <__sfputc_r+0x16>
 8006a1a:	290a      	cmp	r1, #10
 8006a1c:	d102      	bne.n	8006a24 <__sfputc_r+0x1c>
 8006a1e:	bc10      	pop	{r4}
 8006a20:	f000 ba0e 	b.w	8006e40 <__swbuf_r>
 8006a24:	6813      	ldr	r3, [r2, #0]
 8006a26:	1c58      	adds	r0, r3, #1
 8006a28:	6010      	str	r0, [r2, #0]
 8006a2a:	7019      	strb	r1, [r3, #0]
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	bc10      	pop	{r4}
 8006a30:	4770      	bx	lr

08006a32 <__sfputs_r>:
 8006a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a34:	4606      	mov	r6, r0
 8006a36:	460f      	mov	r7, r1
 8006a38:	4614      	mov	r4, r2
 8006a3a:	18d5      	adds	r5, r2, r3
 8006a3c:	42ac      	cmp	r4, r5
 8006a3e:	d101      	bne.n	8006a44 <__sfputs_r+0x12>
 8006a40:	2000      	movs	r0, #0
 8006a42:	e007      	b.n	8006a54 <__sfputs_r+0x22>
 8006a44:	463a      	mov	r2, r7
 8006a46:	4630      	mov	r0, r6
 8006a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4c:	f7ff ffdc 	bl	8006a08 <__sfputc_r>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d1f3      	bne.n	8006a3c <__sfputs_r+0xa>
 8006a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a58 <_vfiprintf_r>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	4614      	mov	r4, r2
 8006a60:	4698      	mov	r8, r3
 8006a62:	4606      	mov	r6, r0
 8006a64:	b09d      	sub	sp, #116	@ 0x74
 8006a66:	b118      	cbz	r0, 8006a70 <_vfiprintf_r+0x18>
 8006a68:	6a03      	ldr	r3, [r0, #32]
 8006a6a:	b90b      	cbnz	r3, 8006a70 <_vfiprintf_r+0x18>
 8006a6c:	f7fe fbd4 	bl	8005218 <__sinit>
 8006a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a72:	07d9      	lsls	r1, r3, #31
 8006a74:	d405      	bmi.n	8006a82 <_vfiprintf_r+0x2a>
 8006a76:	89ab      	ldrh	r3, [r5, #12]
 8006a78:	059a      	lsls	r2, r3, #22
 8006a7a:	d402      	bmi.n	8006a82 <_vfiprintf_r+0x2a>
 8006a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a7e:	f7fe fcdc 	bl	800543a <__retarget_lock_acquire_recursive>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	071b      	lsls	r3, r3, #28
 8006a86:	d501      	bpl.n	8006a8c <_vfiprintf_r+0x34>
 8006a88:	692b      	ldr	r3, [r5, #16]
 8006a8a:	b99b      	cbnz	r3, 8006ab4 <_vfiprintf_r+0x5c>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f000 fa14 	bl	8006ebc <__swsetup_r>
 8006a94:	b170      	cbz	r0, 8006ab4 <_vfiprintf_r+0x5c>
 8006a96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a98:	07dc      	lsls	r4, r3, #31
 8006a9a:	d504      	bpl.n	8006aa6 <_vfiprintf_r+0x4e>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b01d      	add	sp, #116	@ 0x74
 8006aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	0598      	lsls	r0, r3, #22
 8006aaa:	d4f7      	bmi.n	8006a9c <_vfiprintf_r+0x44>
 8006aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aae:	f7fe fcc5 	bl	800543c <__retarget_lock_release_recursive>
 8006ab2:	e7f3      	b.n	8006a9c <_vfiprintf_r+0x44>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab8:	2320      	movs	r3, #32
 8006aba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006abe:	2330      	movs	r3, #48	@ 0x30
 8006ac0:	f04f 0901 	mov.w	r9, #1
 8006ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ac8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006c74 <_vfiprintf_r+0x21c>
 8006acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	469a      	mov	sl, r3
 8006ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad8:	b10a      	cbz	r2, 8006ade <_vfiprintf_r+0x86>
 8006ada:	2a25      	cmp	r2, #37	@ 0x25
 8006adc:	d1f9      	bne.n	8006ad2 <_vfiprintf_r+0x7a>
 8006ade:	ebba 0b04 	subs.w	fp, sl, r4
 8006ae2:	d00b      	beq.n	8006afc <_vfiprintf_r+0xa4>
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff ffa1 	bl	8006a32 <__sfputs_r>
 8006af0:	3001      	adds	r0, #1
 8006af2:	f000 80a7 	beq.w	8006c44 <_vfiprintf_r+0x1ec>
 8006af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006af8:	445a      	add	r2, fp
 8006afa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006afc:	f89a 3000 	ldrb.w	r3, [sl]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 809f 	beq.w	8006c44 <_vfiprintf_r+0x1ec>
 8006b06:	2300      	movs	r3, #0
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b10:	f10a 0a01 	add.w	sl, sl, #1
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	9307      	str	r3, [sp, #28]
 8006b18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b1e:	4654      	mov	r4, sl
 8006b20:	2205      	movs	r2, #5
 8006b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b26:	4853      	ldr	r0, [pc, #332]	@ (8006c74 <_vfiprintf_r+0x21c>)
 8006b28:	f7fe fc89 	bl	800543e <memchr>
 8006b2c:	9a04      	ldr	r2, [sp, #16]
 8006b2e:	b9d8      	cbnz	r0, 8006b68 <_vfiprintf_r+0x110>
 8006b30:	06d1      	lsls	r1, r2, #27
 8006b32:	bf44      	itt	mi
 8006b34:	2320      	movmi	r3, #32
 8006b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b3a:	0713      	lsls	r3, r2, #28
 8006b3c:	bf44      	itt	mi
 8006b3e:	232b      	movmi	r3, #43	@ 0x2b
 8006b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b44:	f89a 3000 	ldrb.w	r3, [sl]
 8006b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b4a:	d015      	beq.n	8006b78 <_vfiprintf_r+0x120>
 8006b4c:	4654      	mov	r4, sl
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f04f 0c0a 	mov.w	ip, #10
 8006b54:	9a07      	ldr	r2, [sp, #28]
 8006b56:	4621      	mov	r1, r4
 8006b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b5c:	3b30      	subs	r3, #48	@ 0x30
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d94b      	bls.n	8006bfa <_vfiprintf_r+0x1a2>
 8006b62:	b1b0      	cbz	r0, 8006b92 <_vfiprintf_r+0x13a>
 8006b64:	9207      	str	r2, [sp, #28]
 8006b66:	e014      	b.n	8006b92 <_vfiprintf_r+0x13a>
 8006b68:	eba0 0308 	sub.w	r3, r0, r8
 8006b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	46a2      	mov	sl, r4
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	e7d2      	b.n	8006b1e <_vfiprintf_r+0xc6>
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	1d19      	adds	r1, r3, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	9103      	str	r1, [sp, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bfbb      	ittet	lt
 8006b84:	425b      	neglt	r3, r3
 8006b86:	f042 0202 	orrlt.w	r2, r2, #2
 8006b8a:	9307      	strge	r3, [sp, #28]
 8006b8c:	9307      	strlt	r3, [sp, #28]
 8006b8e:	bfb8      	it	lt
 8006b90:	9204      	strlt	r2, [sp, #16]
 8006b92:	7823      	ldrb	r3, [r4, #0]
 8006b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b96:	d10a      	bne.n	8006bae <_vfiprintf_r+0x156>
 8006b98:	7863      	ldrb	r3, [r4, #1]
 8006b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b9c:	d132      	bne.n	8006c04 <_vfiprintf_r+0x1ac>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	3402      	adds	r4, #2
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	9203      	str	r2, [sp, #12]
 8006ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006c78 <_vfiprintf_r+0x220>
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	7821      	ldrb	r1, [r4, #0]
 8006bb8:	f7fe fc41 	bl	800543e <memchr>
 8006bbc:	b138      	cbz	r0, 8006bce <_vfiprintf_r+0x176>
 8006bbe:	2240      	movs	r2, #64	@ 0x40
 8006bc0:	9b04      	ldr	r3, [sp, #16]
 8006bc2:	eba0 000a 	sub.w	r0, r0, sl
 8006bc6:	4082      	lsls	r2, r0
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	3401      	adds	r4, #1
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	4829      	ldr	r0, [pc, #164]	@ (8006c7c <_vfiprintf_r+0x224>)
 8006bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bda:	f7fe fc30 	bl	800543e <memchr>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d03f      	beq.n	8006c62 <_vfiprintf_r+0x20a>
 8006be2:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <_vfiprintf_r+0x228>)
 8006be4:	bb1b      	cbnz	r3, 8006c2e <_vfiprintf_r+0x1d6>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	3307      	adds	r3, #7
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	3308      	adds	r3, #8
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf4:	443b      	add	r3, r7
 8006bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bf8:	e76a      	b.n	8006ad0 <_vfiprintf_r+0x78>
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c02:	e7a8      	b.n	8006b56 <_vfiprintf_r+0xfe>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f04f 0c0a 	mov.w	ip, #10
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	3401      	adds	r4, #1
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	4620      	mov	r0, r4
 8006c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c16:	3a30      	subs	r2, #48	@ 0x30
 8006c18:	2a09      	cmp	r2, #9
 8006c1a:	d903      	bls.n	8006c24 <_vfiprintf_r+0x1cc>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0c6      	beq.n	8006bae <_vfiprintf_r+0x156>
 8006c20:	9105      	str	r1, [sp, #20]
 8006c22:	e7c4      	b.n	8006bae <_vfiprintf_r+0x156>
 8006c24:	4604      	mov	r4, r0
 8006c26:	2301      	movs	r3, #1
 8006c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c2c:	e7f0      	b.n	8006c10 <_vfiprintf_r+0x1b8>
 8006c2e:	ab03      	add	r3, sp, #12
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	462a      	mov	r2, r5
 8006c34:	4630      	mov	r0, r6
 8006c36:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <_vfiprintf_r+0x22c>)
 8006c38:	a904      	add	r1, sp, #16
 8006c3a:	f7fd fea5 	bl	8004988 <_printf_float>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	1c78      	adds	r0, r7, #1
 8006c42:	d1d6      	bne.n	8006bf2 <_vfiprintf_r+0x19a>
 8006c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d405      	bmi.n	8006c56 <_vfiprintf_r+0x1fe>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	059a      	lsls	r2, r3, #22
 8006c4e:	d402      	bmi.n	8006c56 <_vfiprintf_r+0x1fe>
 8006c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c52:	f7fe fbf3 	bl	800543c <__retarget_lock_release_recursive>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	065b      	lsls	r3, r3, #25
 8006c5a:	f53f af1f 	bmi.w	8006a9c <_vfiprintf_r+0x44>
 8006c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c60:	e71e      	b.n	8006aa0 <_vfiprintf_r+0x48>
 8006c62:	ab03      	add	r3, sp, #12
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	462a      	mov	r2, r5
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <_vfiprintf_r+0x22c>)
 8006c6c:	a904      	add	r1, sp, #16
 8006c6e:	f7fe f929 	bl	8004ec4 <_printf_i>
 8006c72:	e7e4      	b.n	8006c3e <_vfiprintf_r+0x1e6>
 8006c74:	0800736e 	.word	0x0800736e
 8006c78:	08007374 	.word	0x08007374
 8006c7c:	08007378 	.word	0x08007378
 8006c80:	08004989 	.word	0x08004989
 8006c84:	08006a33 	.word	0x08006a33

08006c88 <__sflush_r>:
 8006c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	0716      	lsls	r6, r2, #28
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	d454      	bmi.n	8006d40 <__sflush_r+0xb8>
 8006c96:	684b      	ldr	r3, [r1, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dc02      	bgt.n	8006ca2 <__sflush_r+0x1a>
 8006c9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd48      	ble.n	8006d34 <__sflush_r+0xac>
 8006ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	d045      	beq.n	8006d34 <__sflush_r+0xac>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cae:	682f      	ldr	r7, [r5, #0]
 8006cb0:	6a21      	ldr	r1, [r4, #32]
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	d030      	beq.n	8006d18 <__sflush_r+0x90>
 8006cb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	0759      	lsls	r1, r3, #29
 8006cbc:	d505      	bpl.n	8006cca <__sflush_r+0x42>
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cc4:	b10b      	cbz	r3, 8006cca <__sflush_r+0x42>
 8006cc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cc8:	1ad2      	subs	r2, r2, r3
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4628      	mov	r0, r5
 8006cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	47b0      	blx	r6
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	d106      	bne.n	8006ce8 <__sflush_r+0x60>
 8006cda:	6829      	ldr	r1, [r5, #0]
 8006cdc:	291d      	cmp	r1, #29
 8006cde:	d82b      	bhi.n	8006d38 <__sflush_r+0xb0>
 8006ce0:	4a28      	ldr	r2, [pc, #160]	@ (8006d84 <__sflush_r+0xfc>)
 8006ce2:	40ca      	lsrs	r2, r1
 8006ce4:	07d6      	lsls	r6, r2, #31
 8006ce6:	d527      	bpl.n	8006d38 <__sflush_r+0xb0>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	6062      	str	r2, [r4, #4]
 8006cec:	6922      	ldr	r2, [r4, #16]
 8006cee:	04d9      	lsls	r1, r3, #19
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	d504      	bpl.n	8006cfe <__sflush_r+0x76>
 8006cf4:	1c42      	adds	r2, r0, #1
 8006cf6:	d101      	bne.n	8006cfc <__sflush_r+0x74>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b903      	cbnz	r3, 8006cfe <__sflush_r+0x76>
 8006cfc:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d00:	602f      	str	r7, [r5, #0]
 8006d02:	b1b9      	cbz	r1, 8006d34 <__sflush_r+0xac>
 8006d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	d002      	beq.n	8006d12 <__sflush_r+0x8a>
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff fa03 	bl	8006118 <_free_r>
 8006d12:	2300      	movs	r3, #0
 8006d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d16:	e00d      	b.n	8006d34 <__sflush_r+0xac>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b0      	blx	r6
 8006d1e:	4602      	mov	r2, r0
 8006d20:	1c50      	adds	r0, r2, #1
 8006d22:	d1c9      	bne.n	8006cb8 <__sflush_r+0x30>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0c6      	beq.n	8006cb8 <__sflush_r+0x30>
 8006d2a:	2b1d      	cmp	r3, #29
 8006d2c:	d001      	beq.n	8006d32 <__sflush_r+0xaa>
 8006d2e:	2b16      	cmp	r3, #22
 8006d30:	d11d      	bne.n	8006d6e <__sflush_r+0xe6>
 8006d32:	602f      	str	r7, [r5, #0]
 8006d34:	2000      	movs	r0, #0
 8006d36:	e021      	b.n	8006d7c <__sflush_r+0xf4>
 8006d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d3c:	b21b      	sxth	r3, r3
 8006d3e:	e01a      	b.n	8006d76 <__sflush_r+0xee>
 8006d40:	690f      	ldr	r7, [r1, #16]
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	d0f6      	beq.n	8006d34 <__sflush_r+0xac>
 8006d46:	0793      	lsls	r3, r2, #30
 8006d48:	bf18      	it	ne
 8006d4a:	2300      	movne	r3, #0
 8006d4c:	680e      	ldr	r6, [r1, #0]
 8006d4e:	bf08      	it	eq
 8006d50:	694b      	ldreq	r3, [r1, #20]
 8006d52:	1bf6      	subs	r6, r6, r7
 8006d54:	600f      	str	r7, [r1, #0]
 8006d56:	608b      	str	r3, [r1, #8]
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	ddeb      	ble.n	8006d34 <__sflush_r+0xac>
 8006d5c:	4633      	mov	r3, r6
 8006d5e:	463a      	mov	r2, r7
 8006d60:	4628      	mov	r0, r5
 8006d62:	6a21      	ldr	r1, [r4, #32]
 8006d64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d68:	47e0      	blx	ip
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dc07      	bgt.n	8006d7e <__sflush_r+0xf6>
 8006d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7e:	4407      	add	r7, r0
 8006d80:	1a36      	subs	r6, r6, r0
 8006d82:	e7e9      	b.n	8006d58 <__sflush_r+0xd0>
 8006d84:	20400001 	.word	0x20400001

08006d88 <_fflush_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	b913      	cbnz	r3, 8006d98 <_fflush_r+0x10>
 8006d92:	2500      	movs	r5, #0
 8006d94:	4628      	mov	r0, r5
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	b118      	cbz	r0, 8006da2 <_fflush_r+0x1a>
 8006d9a:	6a03      	ldr	r3, [r0, #32]
 8006d9c:	b90b      	cbnz	r3, 8006da2 <_fflush_r+0x1a>
 8006d9e:	f7fe fa3b 	bl	8005218 <__sinit>
 8006da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f3      	beq.n	8006d92 <_fflush_r+0xa>
 8006daa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dac:	07d0      	lsls	r0, r2, #31
 8006dae:	d404      	bmi.n	8006dba <_fflush_r+0x32>
 8006db0:	0599      	lsls	r1, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_fflush_r+0x32>
 8006db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db6:	f7fe fb40 	bl	800543a <__retarget_lock_acquire_recursive>
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7ff ff63 	bl	8006c88 <__sflush_r>
 8006dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d4e4      	bmi.n	8006d94 <_fflush_r+0xc>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d4e1      	bmi.n	8006d94 <_fflush_r+0xc>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dd2:	f7fe fb33 	bl	800543c <__retarget_lock_release_recursive>
 8006dd6:	e7dd      	b.n	8006d94 <_fflush_r+0xc>

08006dd8 <_putc_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	460d      	mov	r5, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	4606      	mov	r6, r0
 8006de0:	b118      	cbz	r0, 8006dea <_putc_r+0x12>
 8006de2:	6a03      	ldr	r3, [r0, #32]
 8006de4:	b90b      	cbnz	r3, 8006dea <_putc_r+0x12>
 8006de6:	f7fe fa17 	bl	8005218 <__sinit>
 8006dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dec:	07d8      	lsls	r0, r3, #31
 8006dee:	d405      	bmi.n	8006dfc <_putc_r+0x24>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	0599      	lsls	r1, r3, #22
 8006df4:	d402      	bmi.n	8006dfc <_putc_r+0x24>
 8006df6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006df8:	f7fe fb1f 	bl	800543a <__retarget_lock_acquire_recursive>
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	60a3      	str	r3, [r4, #8]
 8006e04:	da05      	bge.n	8006e12 <_putc_r+0x3a>
 8006e06:	69a2      	ldr	r2, [r4, #24]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	db12      	blt.n	8006e32 <_putc_r+0x5a>
 8006e0c:	b2eb      	uxtb	r3, r5
 8006e0e:	2b0a      	cmp	r3, #10
 8006e10:	d00f      	beq.n	8006e32 <_putc_r+0x5a>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	701d      	strb	r5, [r3, #0]
 8006e1a:	b2ed      	uxtb	r5, r5
 8006e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e1e:	07da      	lsls	r2, r3, #31
 8006e20:	d405      	bmi.n	8006e2e <_putc_r+0x56>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d402      	bmi.n	8006e2e <_putc_r+0x56>
 8006e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e2a:	f7fe fb07 	bl	800543c <__retarget_lock_release_recursive>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	4629      	mov	r1, r5
 8006e34:	4622      	mov	r2, r4
 8006e36:	4630      	mov	r0, r6
 8006e38:	f000 f802 	bl	8006e40 <__swbuf_r>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	e7ed      	b.n	8006e1c <_putc_r+0x44>

08006e40 <__swbuf_r>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	460e      	mov	r6, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	4605      	mov	r5, r0
 8006e48:	b118      	cbz	r0, 8006e52 <__swbuf_r+0x12>
 8006e4a:	6a03      	ldr	r3, [r0, #32]
 8006e4c:	b90b      	cbnz	r3, 8006e52 <__swbuf_r+0x12>
 8006e4e:	f7fe f9e3 	bl	8005218 <__sinit>
 8006e52:	69a3      	ldr	r3, [r4, #24]
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	071a      	lsls	r2, r3, #28
 8006e5a:	d501      	bpl.n	8006e60 <__swbuf_r+0x20>
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b943      	cbnz	r3, 8006e72 <__swbuf_r+0x32>
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 f82a 	bl	8006ebc <__swsetup_r>
 8006e68:	b118      	cbz	r0, 8006e72 <__swbuf_r+0x32>
 8006e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8006e6e:	4638      	mov	r0, r7
 8006e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	6922      	ldr	r2, [r4, #16]
 8006e76:	b2f6      	uxtb	r6, r6
 8006e78:	1a98      	subs	r0, r3, r2
 8006e7a:	6963      	ldr	r3, [r4, #20]
 8006e7c:	4637      	mov	r7, r6
 8006e7e:	4283      	cmp	r3, r0
 8006e80:	dc05      	bgt.n	8006e8e <__swbuf_r+0x4e>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7ff ff7f 	bl	8006d88 <_fflush_r>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d1ed      	bne.n	8006e6a <__swbuf_r+0x2a>
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	60a3      	str	r3, [r4, #8]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	701e      	strb	r6, [r3, #0]
 8006e9c:	6962      	ldr	r2, [r4, #20]
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d004      	beq.n	8006eae <__swbuf_r+0x6e>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d5e1      	bpl.n	8006e6e <__swbuf_r+0x2e>
 8006eaa:	2e0a      	cmp	r6, #10
 8006eac:	d1df      	bne.n	8006e6e <__swbuf_r+0x2e>
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f7ff ff69 	bl	8006d88 <_fflush_r>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0d9      	beq.n	8006e6e <__swbuf_r+0x2e>
 8006eba:	e7d6      	b.n	8006e6a <__swbuf_r+0x2a>

08006ebc <__swsetup_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4b29      	ldr	r3, [pc, #164]	@ (8006f64 <__swsetup_r+0xa8>)
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	b118      	cbz	r0, 8006ed0 <__swsetup_r+0x14>
 8006ec8:	6a03      	ldr	r3, [r0, #32]
 8006eca:	b90b      	cbnz	r3, 8006ed0 <__swsetup_r+0x14>
 8006ecc:	f7fe f9a4 	bl	8005218 <__sinit>
 8006ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed4:	0719      	lsls	r1, r3, #28
 8006ed6:	d422      	bmi.n	8006f1e <__swsetup_r+0x62>
 8006ed8:	06da      	lsls	r2, r3, #27
 8006eda:	d407      	bmi.n	8006eec <__swsetup_r+0x30>
 8006edc:	2209      	movs	r2, #9
 8006ede:	602a      	str	r2, [r5, #0]
 8006ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	e033      	b.n	8006f54 <__swsetup_r+0x98>
 8006eec:	0758      	lsls	r0, r3, #29
 8006eee:	d512      	bpl.n	8006f16 <__swsetup_r+0x5a>
 8006ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ef2:	b141      	cbz	r1, 8006f06 <__swsetup_r+0x4a>
 8006ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d002      	beq.n	8006f02 <__swsetup_r+0x46>
 8006efc:	4628      	mov	r0, r5
 8006efe:	f7ff f90b 	bl	8006118 <_free_r>
 8006f02:	2300      	movs	r3, #0
 8006f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	b94b      	cbnz	r3, 8006f36 <__swsetup_r+0x7a>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f2c:	d003      	beq.n	8006f36 <__swsetup_r+0x7a>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 f8c0 	bl	80070b6 <__smakebuf_r>
 8006f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3a:	f013 0201 	ands.w	r2, r3, #1
 8006f3e:	d00a      	beq.n	8006f56 <__swsetup_r+0x9a>
 8006f40:	2200      	movs	r2, #0
 8006f42:	60a2      	str	r2, [r4, #8]
 8006f44:	6962      	ldr	r2, [r4, #20]
 8006f46:	4252      	negs	r2, r2
 8006f48:	61a2      	str	r2, [r4, #24]
 8006f4a:	6922      	ldr	r2, [r4, #16]
 8006f4c:	b942      	cbnz	r2, 8006f60 <__swsetup_r+0xa4>
 8006f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f52:	d1c5      	bne.n	8006ee0 <__swsetup_r+0x24>
 8006f54:	bd38      	pop	{r3, r4, r5, pc}
 8006f56:	0799      	lsls	r1, r3, #30
 8006f58:	bf58      	it	pl
 8006f5a:	6962      	ldrpl	r2, [r4, #20]
 8006f5c:	60a2      	str	r2, [r4, #8]
 8006f5e:	e7f4      	b.n	8006f4a <__swsetup_r+0x8e>
 8006f60:	2000      	movs	r0, #0
 8006f62:	e7f7      	b.n	8006f54 <__swsetup_r+0x98>
 8006f64:	20000018 	.word	0x20000018

08006f68 <_sbrk_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4d05      	ldr	r5, [pc, #20]	@ (8006f84 <_sbrk_r+0x1c>)
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fb f816 	bl	8001fa4 <_sbrk>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_sbrk_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_sbrk_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	20000438 	.word	0x20000438

08006f88 <memcpy>:
 8006f88:	440a      	add	r2, r1
 8006f8a:	4291      	cmp	r1, r2
 8006f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f90:	d100      	bne.n	8006f94 <memcpy+0xc>
 8006f92:	4770      	bx	lr
 8006f94:	b510      	push	{r4, lr}
 8006f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa0:	d1f9      	bne.n	8006f96 <memcpy+0xe>
 8006fa2:	bd10      	pop	{r4, pc}

08006fa4 <__assert_func>:
 8006fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <__assert_func+0x2c>)
 8006fac:	4605      	mov	r5, r0
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68d8      	ldr	r0, [r3, #12]
 8006fb2:	b14c      	cbz	r4, 8006fc8 <__assert_func+0x24>
 8006fb4:	4b07      	ldr	r3, [pc, #28]	@ (8006fd4 <__assert_func+0x30>)
 8006fb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fba:	9100      	str	r1, [sp, #0]
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	4906      	ldr	r1, [pc, #24]	@ (8006fd8 <__assert_func+0x34>)
 8006fc0:	f000 f842 	bl	8007048 <fiprintf>
 8006fc4:	f000 f8d6 	bl	8007174 <abort>
 8006fc8:	4b04      	ldr	r3, [pc, #16]	@ (8006fdc <__assert_func+0x38>)
 8006fca:	461c      	mov	r4, r3
 8006fcc:	e7f3      	b.n	8006fb6 <__assert_func+0x12>
 8006fce:	bf00      	nop
 8006fd0:	20000018 	.word	0x20000018
 8006fd4:	08007389 	.word	0x08007389
 8006fd8:	08007396 	.word	0x08007396
 8006fdc:	080073c4 	.word	0x080073c4

08006fe0 <_calloc_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	fba1 5402 	umull	r5, r4, r1, r2
 8006fe6:	b934      	cbnz	r4, 8006ff6 <_calloc_r+0x16>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7ff f907 	bl	80061fc <_malloc_r>
 8006fee:	4606      	mov	r6, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <_calloc_r+0x1e>
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	220c      	movs	r2, #12
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	6002      	str	r2, [r0, #0]
 8006ffc:	e7f9      	b.n	8006ff2 <_calloc_r+0x12>
 8006ffe:	462a      	mov	r2, r5
 8007000:	4621      	mov	r1, r4
 8007002:	f7fe f99c 	bl	800533e <memset>
 8007006:	e7f4      	b.n	8006ff2 <_calloc_r+0x12>

08007008 <__ascii_mbtowc>:
 8007008:	b082      	sub	sp, #8
 800700a:	b901      	cbnz	r1, 800700e <__ascii_mbtowc+0x6>
 800700c:	a901      	add	r1, sp, #4
 800700e:	b142      	cbz	r2, 8007022 <__ascii_mbtowc+0x1a>
 8007010:	b14b      	cbz	r3, 8007026 <__ascii_mbtowc+0x1e>
 8007012:	7813      	ldrb	r3, [r2, #0]
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	1e10      	subs	r0, r2, #0
 800701a:	bf18      	it	ne
 800701c:	2001      	movne	r0, #1
 800701e:	b002      	add	sp, #8
 8007020:	4770      	bx	lr
 8007022:	4610      	mov	r0, r2
 8007024:	e7fb      	b.n	800701e <__ascii_mbtowc+0x16>
 8007026:	f06f 0001 	mvn.w	r0, #1
 800702a:	e7f8      	b.n	800701e <__ascii_mbtowc+0x16>

0800702c <__ascii_wctomb>:
 800702c:	4603      	mov	r3, r0
 800702e:	4608      	mov	r0, r1
 8007030:	b141      	cbz	r1, 8007044 <__ascii_wctomb+0x18>
 8007032:	2aff      	cmp	r2, #255	@ 0xff
 8007034:	d904      	bls.n	8007040 <__ascii_wctomb+0x14>
 8007036:	228a      	movs	r2, #138	@ 0x8a
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	4770      	bx	lr
 8007040:	2001      	movs	r0, #1
 8007042:	700a      	strb	r2, [r1, #0]
 8007044:	4770      	bx	lr
	...

08007048 <fiprintf>:
 8007048:	b40e      	push	{r1, r2, r3}
 800704a:	b503      	push	{r0, r1, lr}
 800704c:	4601      	mov	r1, r0
 800704e:	ab03      	add	r3, sp, #12
 8007050:	4805      	ldr	r0, [pc, #20]	@ (8007068 <fiprintf+0x20>)
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f7ff fcfd 	bl	8006a58 <_vfiprintf_r>
 800705e:	b002      	add	sp, #8
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b003      	add	sp, #12
 8007066:	4770      	bx	lr
 8007068:	20000018 	.word	0x20000018

0800706c <__swhatbuf_r>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	460c      	mov	r4, r1
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	4615      	mov	r5, r2
 8007076:	2900      	cmp	r1, #0
 8007078:	461e      	mov	r6, r3
 800707a:	b096      	sub	sp, #88	@ 0x58
 800707c:	da0c      	bge.n	8007098 <__swhatbuf_r+0x2c>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	2100      	movs	r1, #0
 8007082:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007086:	bf14      	ite	ne
 8007088:	2340      	movne	r3, #64	@ 0x40
 800708a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800708e:	2000      	movs	r0, #0
 8007090:	6031      	str	r1, [r6, #0]
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	b016      	add	sp, #88	@ 0x58
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	466a      	mov	r2, sp
 800709a:	f000 f849 	bl	8007130 <_fstat_r>
 800709e:	2800      	cmp	r0, #0
 80070a0:	dbed      	blt.n	800707e <__swhatbuf_r+0x12>
 80070a2:	9901      	ldr	r1, [sp, #4]
 80070a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070ac:	4259      	negs	r1, r3
 80070ae:	4159      	adcs	r1, r3
 80070b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070b4:	e7eb      	b.n	800708e <__swhatbuf_r+0x22>

080070b6 <__smakebuf_r>:
 80070b6:	898b      	ldrh	r3, [r1, #12]
 80070b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ba:	079d      	lsls	r5, r3, #30
 80070bc:	4606      	mov	r6, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	d507      	bpl.n	80070d2 <__smakebuf_r+0x1c>
 80070c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	2301      	movs	r3, #1
 80070cc:	6163      	str	r3, [r4, #20]
 80070ce:	b003      	add	sp, #12
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d2:	466a      	mov	r2, sp
 80070d4:	ab01      	add	r3, sp, #4
 80070d6:	f7ff ffc9 	bl	800706c <__swhatbuf_r>
 80070da:	9f00      	ldr	r7, [sp, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	4639      	mov	r1, r7
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff f88b 	bl	80061fc <_malloc_r>
 80070e6:	b948      	cbnz	r0, 80070fc <__smakebuf_r+0x46>
 80070e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ec:	059a      	lsls	r2, r3, #22
 80070ee:	d4ee      	bmi.n	80070ce <__smakebuf_r+0x18>
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	e7e2      	b.n	80070c2 <__smakebuf_r+0xc>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	6020      	str	r0, [r4, #0]
 800710c:	b15b      	cbz	r3, 8007126 <__smakebuf_r+0x70>
 800710e:	4630      	mov	r0, r6
 8007110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007114:	f000 f81e 	bl	8007154 <_isatty_r>
 8007118:	b128      	cbz	r0, 8007126 <__smakebuf_r+0x70>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f023 0303 	bic.w	r3, r3, #3
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	431d      	orrs	r5, r3
 800712a:	81a5      	strh	r5, [r4, #12]
 800712c:	e7cf      	b.n	80070ce <__smakebuf_r+0x18>
	...

08007130 <_fstat_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	2300      	movs	r3, #0
 8007134:	4d06      	ldr	r5, [pc, #24]	@ (8007150 <_fstat_r+0x20>)
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	f7fa ff0b 	bl	8001f58 <_fstat>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d102      	bne.n	800714c <_fstat_r+0x1c>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	b103      	cbz	r3, 800714c <_fstat_r+0x1c>
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	20000438 	.word	0x20000438

08007154 <_isatty_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	2300      	movs	r3, #0
 8007158:	4d05      	ldr	r5, [pc, #20]	@ (8007170 <_isatty_r+0x1c>)
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fa ff09 	bl	8001f76 <_isatty>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_isatty_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_isatty_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000438 	.word	0x20000438

08007174 <abort>:
 8007174:	2006      	movs	r0, #6
 8007176:	b508      	push	{r3, lr}
 8007178:	f000 f82c 	bl	80071d4 <raise>
 800717c:	2001      	movs	r0, #1
 800717e:	f7fa fe9c 	bl	8001eba <_exit>

08007182 <_raise_r>:
 8007182:	291f      	cmp	r1, #31
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d904      	bls.n	8007196 <_raise_r+0x14>
 800718c:	2316      	movs	r3, #22
 800718e:	6003      	str	r3, [r0, #0]
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007198:	b112      	cbz	r2, 80071a0 <_raise_r+0x1e>
 800719a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800719e:	b94b      	cbnz	r3, 80071b4 <_raise_r+0x32>
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f831 	bl	8007208 <_getpid_r>
 80071a6:	4622      	mov	r2, r4
 80071a8:	4601      	mov	r1, r0
 80071aa:	4628      	mov	r0, r5
 80071ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b0:	f000 b818 	b.w	80071e4 <_kill_r>
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d00a      	beq.n	80071ce <_raise_r+0x4c>
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	d103      	bne.n	80071c4 <_raise_r+0x42>
 80071bc:	2316      	movs	r3, #22
 80071be:	6003      	str	r3, [r0, #0]
 80071c0:	2001      	movs	r0, #1
 80071c2:	e7e7      	b.n	8007194 <_raise_r+0x12>
 80071c4:	2100      	movs	r1, #0
 80071c6:	4620      	mov	r0, r4
 80071c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071cc:	4798      	blx	r3
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7e0      	b.n	8007194 <_raise_r+0x12>
	...

080071d4 <raise>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	@ (80071e0 <raise+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bfd2 	b.w	8007182 <_raise_r>
 80071de:	bf00      	nop
 80071e0:	20000018 	.word	0x20000018

080071e4 <_kill_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	2300      	movs	r3, #0
 80071e8:	4d06      	ldr	r5, [pc, #24]	@ (8007204 <_kill_r+0x20>)
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7fa fe52 	bl	8001e9a <_kill>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_kill_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_kill_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20000438 	.word	0x20000438

08007208 <_getpid_r>:
 8007208:	f7fa be40 	b.w	8001e8c <_getpid>

0800720c <_init>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr

08007218 <_fini>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr
