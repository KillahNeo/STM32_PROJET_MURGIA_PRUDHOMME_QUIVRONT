
NUCLEO-L152RE_HTS221_CLASSIFICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e45c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  0800e5a0  0800e5a0  0000f5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b0  0800f3b0  000111e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f3b0  0800f3b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3b8  0800f3b8  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3b8  0800f3b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f3bc  0800f3bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f3c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200001e8  0800f5a8  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  0800f5a8  00011794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bdf  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a70  00000000  00000000  00024df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00027860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef9  00000000  00000000  00028b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019049  00000000  00000000  00029a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015630  00000000  00000000  00042ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b181  00000000  00000000  0005810a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000f328b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006888  00000000  00000000  000f3314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f9b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e584 	.word	0x0800e584

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800e584 	.word	0x0800e584

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	@ 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	@ 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	3a01      	subs	r2, #1
 8000c26:	bf28      	it	cs
 8000c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c2c:	d2ed      	bcs.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dda:	2afd      	cmp	r2, #253	@ 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	@ 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	@ 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	@ 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmpun>:
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x14>
 8001122:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001126:	d108      	bne.n	800113a <__aeabi_fcmpun+0x26>
 8001128:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800112c:	d102      	bne.n	8001134 <__aeabi_fcmpun+0x20>
 800112e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001132:	d102      	bne.n	800113a <__aeabi_fcmpun+0x26>
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	f04f 0001 	mov.w	r0, #1
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b98c 	b.w	80014bc <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	468e      	mov	lr, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14a      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4617      	mov	r7, r2
 80011d0:	d962      	bls.n	8001298 <__udivmoddi4+0xdc>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	b14e      	cbz	r6, 80011ec <__udivmoddi4+0x30>
 80011d8:	f1c6 0320 	rsb	r3, r6, #32
 80011dc:	fa01 f806 	lsl.w	r8, r1, r6
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	40b7      	lsls	r7, r6
 80011e6:	ea43 0808 	orr.w	r8, r3, r8
 80011ea:	40b4      	lsls	r4, r6
 80011ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011f4:	fa1f fc87 	uxth.w	ip, r7
 80011f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001206:	429a      	cmp	r2, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x62>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001210:	f080 80eb 	bcs.w	80013ea <__udivmoddi4+0x22e>
 8001214:	429a      	cmp	r2, r3
 8001216:	f240 80e8 	bls.w	80013ea <__udivmoddi4+0x22e>
 800121a:	3902      	subs	r1, #2
 800121c:	443b      	add	r3, r7
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	fbb2 f0fe 	udiv	r0, r2, lr
 8001224:	fb0e 2210 	mls	r2, lr, r0, r2
 8001228:	fb00 fc0c 	mul.w	ip, r0, ip
 800122c:	b2a3      	uxth	r3, r4
 800122e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001232:	459c      	cmp	ip, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 80d7 	bcs.w	80013ee <__udivmoddi4+0x232>
 8001240:	459c      	cmp	ip, r3
 8001242:	f240 80d4 	bls.w	80013ee <__udivmoddi4+0x232>
 8001246:	443b      	add	r3, r7
 8001248:	3802      	subs	r0, #2
 800124a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800124e:	2100      	movs	r1, #0
 8001250:	eba3 030c 	sub.w	r3, r3, ip
 8001254:	b11d      	cbz	r5, 800125e <__udivmoddi4+0xa2>
 8001256:	2200      	movs	r2, #0
 8001258:	40f3      	lsrs	r3, r6
 800125a:	e9c5 3200 	strd	r3, r2, [r5]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d905      	bls.n	8001272 <__udivmoddi4+0xb6>
 8001266:	b10d      	cbz	r5, 800126c <__udivmoddi4+0xb0>
 8001268:	e9c5 0100 	strd	r0, r1, [r5]
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	e7f5      	b.n	800125e <__udivmoddi4+0xa2>
 8001272:	fab3 f183 	clz	r1, r3
 8001276:	2900      	cmp	r1, #0
 8001278:	d146      	bne.n	8001308 <__udivmoddi4+0x14c>
 800127a:	4573      	cmp	r3, lr
 800127c:	d302      	bcc.n	8001284 <__udivmoddi4+0xc8>
 800127e:	4282      	cmp	r2, r0
 8001280:	f200 8108 	bhi.w	8001494 <__udivmoddi4+0x2d8>
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb6e 0203 	sbc.w	r2, lr, r3
 800128a:	2001      	movs	r0, #1
 800128c:	4690      	mov	r8, r2
 800128e:	2d00      	cmp	r5, #0
 8001290:	d0e5      	beq.n	800125e <__udivmoddi4+0xa2>
 8001292:	e9c5 4800 	strd	r4, r8, [r5]
 8001296:	e7e2      	b.n	800125e <__udivmoddi4+0xa2>
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 8091 	beq.w	80013c0 <__udivmoddi4+0x204>
 800129e:	fab2 f682 	clz	r6, r2
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	f040 80a5 	bne.w	80013f2 <__udivmoddi4+0x236>
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	0c03      	lsrs	r3, r0, #16
 80012ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b2:	b280      	uxth	r0, r0
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80012be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012c2:	fb04 f20c 	mul.w	r2, r4, ip
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0x11e>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x11c>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f200 80e3 	bhi.w	800149e <__udivmoddi4+0x2e2>
 80012d8:	46c4      	mov	ip, r8
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012e4:	fb02 f404 	mul.w	r4, r2, r4
 80012e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x144>
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x142>
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80cd 	bhi.w	8001498 <__udivmoddi4+0x2dc>
 80012fe:	4602      	mov	r2, r0
 8001300:	1b1b      	subs	r3, r3, r4
 8001302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001306:	e7a5      	b.n	8001254 <__udivmoddi4+0x98>
 8001308:	f1c1 0620 	rsb	r6, r1, #32
 800130c:	408b      	lsls	r3, r1
 800130e:	fa22 f706 	lsr.w	r7, r2, r6
 8001312:	431f      	orrs	r7, r3
 8001314:	fa2e fa06 	lsr.w	sl, lr, r6
 8001318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800131c:	fbba f8f9 	udiv	r8, sl, r9
 8001320:	fa0e fe01 	lsl.w	lr, lr, r1
 8001324:	fa20 f306 	lsr.w	r3, r0, r6
 8001328:	fb09 aa18 	mls	sl, r9, r8, sl
 800132c:	fa1f fc87 	uxth.w	ip, r7
 8001330:	ea43 030e 	orr.w	r3, r3, lr
 8001334:	fa00 fe01 	lsl.w	lr, r0, r1
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c1c      	lsrs	r4, r3, #16
 800133e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001342:	42a0      	cmp	r0, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x1a4>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001350:	f080 809e 	bcs.w	8001490 <__udivmoddi4+0x2d4>
 8001354:	42a0      	cmp	r0, r4
 8001356:	f240 809b 	bls.w	8001490 <__udivmoddi4+0x2d4>
 800135a:	f1a8 0802 	sub.w	r8, r8, #2
 800135e:	443c      	add	r4, r7
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	b298      	uxth	r0, r3
 8001364:	fbb4 f3f9 	udiv	r3, r4, r9
 8001368:	fb09 4413 	mls	r4, r9, r3, r4
 800136c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001370:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001374:	45a4      	cmp	ip, r4
 8001376:	d909      	bls.n	800138c <__udivmoddi4+0x1d0>
 8001378:	193c      	adds	r4, r7, r4
 800137a:	f103 30ff 	add.w	r0, r3, #4294967295
 800137e:	f080 8085 	bcs.w	800148c <__udivmoddi4+0x2d0>
 8001382:	45a4      	cmp	ip, r4
 8001384:	f240 8082 	bls.w	800148c <__udivmoddi4+0x2d0>
 8001388:	3b02      	subs	r3, #2
 800138a:	443c      	add	r4, r7
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	eba4 040c 	sub.w	r4, r4, ip
 8001394:	fba0 8c02 	umull	r8, ip, r0, r2
 8001398:	4564      	cmp	r4, ip
 800139a:	4643      	mov	r3, r8
 800139c:	46e1      	mov	r9, ip
 800139e:	d364      	bcc.n	800146a <__udivmoddi4+0x2ae>
 80013a0:	d061      	beq.n	8001466 <__udivmoddi4+0x2aa>
 80013a2:	b15d      	cbz	r5, 80013bc <__udivmoddi4+0x200>
 80013a4:	ebbe 0203 	subs.w	r2, lr, r3
 80013a8:	eb64 0409 	sbc.w	r4, r4, r9
 80013ac:	fa04 f606 	lsl.w	r6, r4, r6
 80013b0:	fa22 f301 	lsr.w	r3, r2, r1
 80013b4:	431e      	orrs	r6, r3
 80013b6:	40cc      	lsrs	r4, r1
 80013b8:	e9c5 6400 	strd	r6, r4, [r5]
 80013bc:	2100      	movs	r1, #0
 80013be:	e74e      	b.n	800125e <__udivmoddi4+0xa2>
 80013c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ca:	b280      	uxth	r0, r0
 80013cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013d0:	463b      	mov	r3, r7
 80013d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d6:	4638      	mov	r0, r7
 80013d8:	463c      	mov	r4, r7
 80013da:	46b8      	mov	r8, r7
 80013dc:	46be      	mov	lr, r7
 80013de:	2620      	movs	r6, #32
 80013e0:	eba2 0208 	sub.w	r2, r2, r8
 80013e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e8:	e765      	b.n	80012b6 <__udivmoddi4+0xfa>
 80013ea:	4601      	mov	r1, r0
 80013ec:	e717      	b.n	800121e <__udivmoddi4+0x62>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e72b      	b.n	800124a <__udivmoddi4+0x8e>
 80013f2:	f1c6 0120 	rsb	r1, r6, #32
 80013f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013fa:	40b7      	lsls	r7, r6
 80013fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001400:	fa20 f101 	lsr.w	r1, r0, r1
 8001404:	ea41 010e 	orr.w	r1, r1, lr
 8001408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800140c:	fbbc f8fe 	udiv	r8, ip, lr
 8001410:	b2bc      	uxth	r4, r7
 8001412:	fb0e cc18 	mls	ip, lr, r8, ip
 8001416:	fb08 f904 	mul.w	r9, r8, r4
 800141a:	0c0a      	lsrs	r2, r1, #16
 800141c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001420:	40b0      	lsls	r0, r6
 8001422:	4591      	cmp	r9, r2
 8001424:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001428:	b280      	uxth	r0, r0
 800142a:	d93e      	bls.n	80014aa <__udivmoddi4+0x2ee>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001432:	d201      	bcs.n	8001438 <__udivmoddi4+0x27c>
 8001434:	4591      	cmp	r9, r2
 8001436:	d81f      	bhi.n	8001478 <__udivmoddi4+0x2bc>
 8001438:	eba2 0209 	sub.w	r2, r2, r9
 800143c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001440:	fb09 f804 	mul.w	r8, r9, r4
 8001444:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001448:	b28a      	uxth	r2, r1
 800144a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800144e:	4542      	cmp	r2, r8
 8001450:	d229      	bcs.n	80014a6 <__udivmoddi4+0x2ea>
 8001452:	18ba      	adds	r2, r7, r2
 8001454:	f109 31ff 	add.w	r1, r9, #4294967295
 8001458:	d2c2      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145a:	4542      	cmp	r2, r8
 800145c:	d2c0      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145e:	f1a9 0102 	sub.w	r1, r9, #2
 8001462:	443a      	add	r2, r7
 8001464:	e7bc      	b.n	80013e0 <__udivmoddi4+0x224>
 8001466:	45c6      	cmp	lr, r8
 8001468:	d29b      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 800146a:	ebb8 0302 	subs.w	r3, r8, r2
 800146e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001472:	3801      	subs	r0, #1
 8001474:	46e1      	mov	r9, ip
 8001476:	e794      	b.n	80013a2 <__udivmoddi4+0x1e6>
 8001478:	eba7 0909 	sub.w	r9, r7, r9
 800147c:	444a      	add	r2, r9
 800147e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001482:	f1a8 0c02 	sub.w	ip, r8, #2
 8001486:	fb09 f804 	mul.w	r8, r9, r4
 800148a:	e7db      	b.n	8001444 <__udivmoddi4+0x288>
 800148c:	4603      	mov	r3, r0
 800148e:	e77d      	b.n	800138c <__udivmoddi4+0x1d0>
 8001490:	46d0      	mov	r8, sl
 8001492:	e765      	b.n	8001360 <__udivmoddi4+0x1a4>
 8001494:	4608      	mov	r0, r1
 8001496:	e6fa      	b.n	800128e <__udivmoddi4+0xd2>
 8001498:	443b      	add	r3, r7
 800149a:	3a02      	subs	r2, #2
 800149c:	e730      	b.n	8001300 <__udivmoddi4+0x144>
 800149e:	f1ac 0c02 	sub.w	ip, ip, #2
 80014a2:	443b      	add	r3, r7
 80014a4:	e719      	b.n	80012da <__udivmoddi4+0x11e>
 80014a6:	4649      	mov	r1, r9
 80014a8:	e79a      	b.n	80013e0 <__udivmoddi4+0x224>
 80014aa:	eba2 0209 	sub.w	r2, r2, r9
 80014ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80014b2:	46c4      	mov	ip, r8
 80014b4:	fb09 f804 	mul.w	r8, r9, r4
 80014b8:	e7c4      	b.n	8001444 <__udivmoddi4+0x288>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	461a      	mov	r2, r3
 80014cc:	460b      	mov	r3, r1
 80014ce:	72fb      	strb	r3, [r7, #11]
 80014d0:	4613      	mov	r3, r2
 80014d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685c      	ldr	r4, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68d8      	ldr	r0, [r3, #12]
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	7af9      	ldrb	r1, [r7, #11]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	47a0      	blx	r4
 80014e4:	6178      	str	r0, [r7, #20]

  return ret;
 80014e6:	697b      	ldr	r3, [r7, #20]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	461a      	mov	r2, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	72fb      	strb	r3, [r7, #11]
 8001500:	4613      	mov	r3, r2
 8001502:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681c      	ldr	r4, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68d8      	ldr	r0, [r3, #12]
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	7af9      	ldrb	r1, [r7, #11]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	47a0      	blx	r4
 8001514:	6178      	str	r0, [r7, #20]

  return ret;
 8001516:	697b      	ldr	r3, [r7, #20]
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800152c:	f107 0208 	add.w	r2, r7, #8
 8001530:	2301      	movs	r3, #1
 8001532:	2120      	movs	r1, #32
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffc3 	bl	80014c0 <hts221_read_reg>
 800153a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	b2da      	uxtb	r2, r3
 800154a:	7a3b      	ldrb	r3, [r7, #8]
 800154c:	f362 0301 	bfi	r3, r2, #0, #2
 8001550:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001552:	f107 0208 	add.w	r2, r7, #8
 8001556:	2301      	movs	r3, #1
 8001558:	2120      	movs	r1, #32
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffc8 	bl	80014f0 <hts221_write_reg>
 8001560:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	2301      	movs	r3, #1
 800157e:	2120      	movs	r1, #32
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff9d 	bl	80014c0 <hts221_read_reg>
 8001586:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	7a3b      	ldrb	r3, [r7, #8]
 8001598:	f362 0382 	bfi	r3, r2, #2, #1
 800159c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800159e:	f107 0208 	add.w	r2, r7, #8
 80015a2:	2301      	movs	r3, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <hts221_write_reg>
 80015ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80015c2:	f107 0208 	add.w	r2, r7, #8
 80015c6:	2302      	movs	r3, #2
 80015c8:	2128      	movs	r1, #40	@ 0x28
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff78 	bl	80014c0 <hts221_read_reg>
 80015d0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80015d2:	7a7b      	ldrb	r3, [r7, #9]
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	7a3a      	ldrb	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001606:	2301      	movs	r3, #1
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	210f      	movs	r1, #15
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff57 	bl	80014c0 <hts221_read_reg>
 8001612:	60f8      	str	r0, [r7, #12]

  return ret;
 8001614:	68fb      	ldr	r3, [r7, #12]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800162a:	f107 0208 	add.w	r2, r7, #8
 800162e:	2301      	movs	r3, #1
 8001630:	2120      	movs	r1, #32
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff44 	bl	80014c0 <hts221_read_reg>
 8001638:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	f362 13c7 	bfi	r3, r2, #7, #1
 800164e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	2301      	movs	r3, #1
 8001656:	2120      	movs	r1, #32
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff49 	bl	80014f0 <hts221_write_reg>
 800165e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001660:	68fb      	ldr	r3, [r7, #12]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 8001676:	f107 0208 	add.w	r2, r7, #8
 800167a:	2301      	movs	r3, #1
 800167c:	2122      	movs	r1, #34	@ 0x22
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff1e 	bl	80014c0 <hts221_read_reg>
 8001684:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10f      	bne.n	80016ac <hts221_drdy_on_int_set+0x42>
  {
    reg.drdy = val;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	f362 0382 	bfi	r3, r2, #2, #1
 800169a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 800169c:	f107 0208 	add.w	r2, r7, #8
 80016a0:	2301      	movs	r3, #1
 80016a2:	2122      	movs	r1, #34	@ 0x22
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff23 	bl	80014f0 <hts221_write_reg>
 80016aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80016c0:	f107 020b 	add.w	r2, r7, #11
 80016c4:	2301      	movs	r3, #1
 80016c6:	2130      	movs	r1, #48	@ 0x30
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fef9 	bl	80014c0 <hts221_read_reg>
 80016ce:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb04 	bl	8000ce0 <__aeabi_i2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc06 	bl	8000ef0 <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	601a      	str	r2, [r3, #0]

  return ret;
 80016ec:	68fb      	ldr	r3, [r7, #12]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001700:	f107 020b 	add.w	r2, r7, #11
 8001704:	2301      	movs	r3, #1
 8001706:	2131      	movs	r1, #49	@ 0x31
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fed9 	bl	80014c0 <hts221_read_reg>
 800170e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fae4 	bl	8000ce0 <__aeabi_i2f>
 8001718:	4603      	mov	r3, r0
 800171a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fbe6 	bl	8000ef0 <__aeabi_fdiv>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	601a      	str	r2, [r3, #0]

  return ret;
 800172c:	68fb      	ldr	r3, [r7, #12]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	2302      	movs	r3, #2
 8001746:	2136      	movs	r1, #54	@ 0x36
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff feb9 	bl	80014c0 <hts221_read_reg>
 800174e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001750:	7a7b      	ldrb	r3, [r7, #9]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b29b      	uxth	r3, r3
 8001756:	7a3a      	ldrb	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800175e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fabc 	bl	8000ce0 <__aeabi_i2f>
 8001768:	4602      	mov	r2, r0
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]

  return ret;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001782:	f107 0208 	add.w	r2, r7, #8
 8001786:	2302      	movs	r3, #2
 8001788:	213a      	movs	r1, #58	@ 0x3a
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe98 	bl	80014c0 <hts221_read_reg>
 8001790:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001792:	7a7b      	ldrb	r3, [r7, #9]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	7a3a      	ldrb	r2, [r7, #8]
 800179a:	4413      	add	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80017a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa9b 	bl	8000ce0 <__aeabi_i2f>
 80017aa:	4602      	mov	r2, r0
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	601a      	str	r2, [r3, #0]

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	0000      	movs	r0, r0
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 80017c6:	4b98      	ldr	r3, [pc, #608]	@ (8001a28 <main+0x268>)
 80017c8:	4a98      	ldr	r2, [pc, #608]	@ (8001a2c <main+0x26c>)
 80017ca:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 80017cc:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <main+0x268>)
 80017ce:	4a98      	ldr	r2, [pc, #608]	@ (8001a30 <main+0x270>)
 80017d0:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 80017d2:	4b95      	ldr	r3, [pc, #596]	@ (8001a28 <main+0x268>)
 80017d4:	4a97      	ldr	r2, [pc, #604]	@ (8001a34 <main+0x274>)
 80017d6:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d8:	f001 f90f 	bl	80029fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017dc:	f000 f958 	bl	8001a90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	iks01a3_i2c_stuck_quirk();
 80017e0:	f000 fd68 	bl	80022b4 <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f000 fb54 	bl	8001e90 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017e8:	f000 fa1a 	bl	8001c20 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 fb26 	bl	8001e3c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017f0:	f000 fa44 	bl	8001c7c <MX_SPI1_Init>
  MX_TIM6_Init();
 80017f4:	f000 faec 	bl	8001dd0 <MX_TIM6_Init>
  MX_ADC_Init();
 80017f8:	f000 f998 	bl	8001b2c <MX_ADC_Init>
  MX_TIM3_Init();
 80017fc:	f000 fa74 	bl	8001ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	MAX7219_Init();
 8001800:	f005 fd12 	bl	8007228 <MAX7219_Init>
	HAL_Delay(1000);
 8001804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001808:	f001 f966 	bl	8002ad8 <HAL_Delay>





	KIN1_InitCycleCounter();
 800180c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a38 <main+0x278>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a89      	ldr	r2, [pc, #548]	@ (8001a38 <main+0x278>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001816:	6013      	str	r3, [r2, #0]
	KIN1_EnableCycleCounter();
 8001818:	4b88      	ldr	r3, [pc, #544]	@ (8001a3c <main+0x27c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a87      	ldr	r2, [pc, #540]	@ (8001a3c <main+0x27c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]
	hts221_initialize();
 8001824:	f000 fc9c 	bl	8002160 <hts221_initialize>
	if (NEAI_MODE) {
		neai_state = neai_classification_init(knowledge);
 8001828:	4885      	ldr	r0, [pc, #532]	@ (8001a40 <main+0x280>)
 800182a:	f005 fe4f 	bl	80074cc <neai_classification_init>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b84      	ldr	r3, [pc, #528]	@ (8001a44 <main+0x284>)
 8001834:	701a      	strb	r2, [r3, #0]
		printf("Initialize NEAI library. NEAI init return: %d.\n", neai_state);
 8001836:	4b83      	ldr	r3, [pc, #524]	@ (8001a44 <main+0x284>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4619      	mov	r1, r3
 800183c:	4882      	ldr	r0, [pc, #520]	@ (8001a48 <main+0x288>)
 800183e:	f00a f889 	bl	800b954 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start_IT(&hadc);
 8001842:	4882      	ldr	r0, [pc, #520]	@ (8001a4c <main+0x28c>)
 8001844:	f001 fb40 	bl	8002ec8 <HAL_ADC_Start_IT>
		HAL_ADC_PollForConversion(&hadc, 100);
 8001848:	2164      	movs	r1, #100	@ 0x64
 800184a:	4880      	ldr	r0, [pc, #512]	@ (8001a4c <main+0x28c>)
 800184c:	f001 faac 	bl	8002da8 <HAL_ADC_PollForConversion>
		digitalValue = HAL_ADC_GetValue(&hadc);
 8001850:	487e      	ldr	r0, [pc, #504]	@ (8001a4c <main+0x28c>)
 8001852:	f001 fbd7 	bl	8003004 <HAL_ADC_GetValue>
 8001856:	4603      	mov	r3, r0
 8001858:	4a7d      	ldr	r2, [pc, #500]	@ (8001a50 <main+0x290>)
 800185a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop_IT(&hadc);
 800185c:	487b      	ldr	r0, [pc, #492]	@ (8001a4c <main+0x28c>)
 800185e:	f001 fb9d 	bl	8002f9c <HAL_ADC_Stop_IT>
			if (start ==1){
 8001862:	4b7c      	ldr	r3, [pc, #496]	@ (8001a54 <main+0x294>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d1eb      	bne.n	8001842 <main+0x82>

			if (drdy) {
 800186a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a58 <main+0x298>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0e6      	beq.n	8001842 <main+0x82>
				/* Reset data ready condition */
				drdy = 0;
 8001874:	4b78      	ldr	r3, [pc, #480]	@ (8001a58 <main+0x298>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
				/* Read humidity data */
				memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 800187a:	4b78      	ldr	r3, [pc, #480]	@ (8001a5c <main+0x29c>)
 800187c:	2200      	movs	r2, #0
 800187e:	801a      	strh	r2, [r3, #0]
				hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 8001880:	4976      	ldr	r1, [pc, #472]	@ (8001a5c <main+0x29c>)
 8001882:	4869      	ldr	r0, [pc, #420]	@ (8001a28 <main+0x268>)
 8001884:	f7ff fe98 	bl	80015b8 <hts221_humidity_raw_get>
				neai_buffer[drdy_counter] = hts221_linear_interpolation(&lin_hum, data_raw_humidity);
 8001888:	4b74      	ldr	r3, [pc, #464]	@ (8001a5c <main+0x29c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	4a74      	ldr	r2, [pc, #464]	@ (8001a60 <main+0x2a0>)
 8001890:	8812      	ldrh	r2, [r2, #0]
 8001892:	4614      	mov	r4, r2
 8001894:	4619      	mov	r1, r3
 8001896:	4873      	ldr	r0, [pc, #460]	@ (8001a64 <main+0x2a4>)
 8001898:	f000 fca6 	bl	80021e8 <hts221_linear_interpolation>
 800189c:	4603      	mov	r3, r0
 800189e:	4a72      	ldr	r2, [pc, #456]	@ (8001a68 <main+0x2a8>)
 80018a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				drdy_counter++;
 80018a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a60 <main+0x2a0>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <main+0x2a0>)
 80018ae:	801a      	strh	r2, [r3, #0]

				if (drdy_counter >= SAMPLES) {
 80018b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <main+0x2a0>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d9c4      	bls.n	8001842 <main+0x82>
					/* Device power off */
					hts221_power_on_set(&dev_ctx, PROPERTY_DISABLE);
 80018b8:	2100      	movs	r1, #0
 80018ba:	485b      	ldr	r0, [pc, #364]	@ (8001a28 <main+0x268>)
 80018bc:	f7ff feaf 	bl	800161e <hts221_power_on_set>
	#if NEAI_MODE
					uint32_t cycles_cnt = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
					KIN1_ResetCycleCounter();
 80018c4:	4b69      	ldr	r3, [pc, #420]	@ (8001a6c <main+0x2ac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
					neai_state = neai_classification(neai_buffer, class_output_buffer, &id_class);
 80018ca:	4a69      	ldr	r2, [pc, #420]	@ (8001a70 <main+0x2b0>)
 80018cc:	4969      	ldr	r1, [pc, #420]	@ (8001a74 <main+0x2b4>)
 80018ce:	4866      	ldr	r0, [pc, #408]	@ (8001a68 <main+0x2a8>)
 80018d0:	f005 fecc 	bl	800766c <neai_classification>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a44 <main+0x284>)
 80018da:	701a      	strb	r2, [r3, #0]
					cycles_cnt = KIN1_GetCycleCounter();
 80018dc:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <main+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	607b      	str	r3, [r7, #4]
					neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe fda0 	bl	8000428 <__aeabi_ui2d>
 80018e8:	a34d      	add	r3, pc, #308	@ (adr r3, 8001a20 <main+0x260>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe15 	bl	800051c <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	f003 fe5d 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fd91 	bl	8000428 <__aeabi_ui2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe ff2f 	bl	8000770 <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f8d7 	bl	8000acc <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4a55      	ldr	r2, [pc, #340]	@ (8001a78 <main+0x2b8>)
 8001922:	6013      	str	r3, [r2, #0]
					//printf("%s\r\n", id2class[id_class]);
					float humidity = hts221_linear_interpolation(&lin_hum, data_raw_humidity);
 8001924:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <main+0x29c>)
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	4619      	mov	r1, r3
 800192c:	484d      	ldr	r0, [pc, #308]	@ (8001a64 <main+0x2a4>)
 800192e:	f000 fc5b 	bl	80021e8 <hts221_linear_interpolation>
 8001932:	6038      	str	r0, [r7, #0]
					printf("%s,%.2f\r\n", id2class[id_class], humidity);
 8001934:	4b4e      	ldr	r3, [pc, #312]	@ (8001a70 <main+0x2b0>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <main+0x2bc>)
 800193c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001940:	6838      	ldr	r0, [r7, #0]
 8001942:	f7fe fd93 	bl	800046c <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4621      	mov	r1, r4
 800194c:	484c      	ldr	r0, [pc, #304]	@ (8001a80 <main+0x2c0>)
 800194e:	f00a f801 	bl	800b954 <iprintf>

					//Variable Humidity à utiliser


					if (strcmp(id2class[id_class], "DRY") == 0)
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <main+0x2b0>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <main+0x2bc>)
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	4949      	ldr	r1, [pc, #292]	@ (8001a84 <main+0x2c4>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc0d 	bl	8000180 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d110      	bne.n	800198e <main+0x1ce>
					{
						MAX7219_DisplayChar(1,'S');
 800196c:	2153      	movs	r1, #83	@ 0x53
 800196e:	2001      	movs	r0, #1
 8001970:	f005 fca7 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(2,'E');
 8001974:	2145      	movs	r1, #69	@ 0x45
 8001976:	2002      	movs	r0, #2
 8001978:	f005 fca3 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(3,'C');
 800197c:	2143      	movs	r1, #67	@ 0x43
 800197e:	2003      	movs	r0, #3
 8001980:	f005 fc9f 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(4,0xFF);
 8001984:	21ff      	movs	r1, #255	@ 0xff
 8001986:	2004      	movs	r0, #4
 8001988:	f005 fc9b 	bl	80072c2 <MAX7219_DisplayChar>
 800198c:	e03a      	b.n	8001a04 <main+0x244>

					}
					else if (strcmp(id2class[id_class], "AMBIANT") == 0)
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <main+0x2b0>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <main+0x2bc>)
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	493b      	ldr	r1, [pc, #236]	@ (8001a88 <main+0x2c8>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fbef 	bl	8000180 <strcmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d110      	bne.n	80019ca <main+0x20a>
					{
						MAX7219_DisplayChar(1,'A');
 80019a8:	2141      	movs	r1, #65	@ 0x41
 80019aa:	2001      	movs	r0, #1
 80019ac:	f005 fc89 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(2,'N');
 80019b0:	214e      	movs	r1, #78	@ 0x4e
 80019b2:	2002      	movs	r0, #2
 80019b4:	f005 fc85 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(3,'B');
 80019b8:	2142      	movs	r1, #66	@ 0x42
 80019ba:	2003      	movs	r0, #3
 80019bc:	f005 fc81 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(4,0xFF);
 80019c0:	21ff      	movs	r1, #255	@ 0xff
 80019c2:	2004      	movs	r0, #4
 80019c4:	f005 fc7d 	bl	80072c2 <MAX7219_DisplayChar>
 80019c8:	e01c      	b.n	8001a04 <main+0x244>


					}
					else if (strcmp(id2class[id_class], "HUMID") == 0)
 80019ca:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <main+0x2b0>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <main+0x2bc>)
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	492d      	ldr	r1, [pc, #180]	@ (8001a8c <main+0x2cc>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fbd1 	bl	8000180 <strcmp>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10f      	bne.n	8001a04 <main+0x244>
					{
						MAX7219_DisplayChar(1,'H');
 80019e4:	2148      	movs	r1, #72	@ 0x48
 80019e6:	2001      	movs	r0, #1
 80019e8:	f005 fc6b 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(2,'U');
 80019ec:	2155      	movs	r1, #85	@ 0x55
 80019ee:	2002      	movs	r0, #2
 80019f0:	f005 fc67 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(3,'N');
 80019f4:	214e      	movs	r1, #78	@ 0x4e
 80019f6:	2003      	movs	r0, #3
 80019f8:	f005 fc63 	bl	80072c2 <MAX7219_DisplayChar>
						MAX7219_DisplayChar(4,0xFF);
 80019fc:	21ff      	movs	r1, #255	@ 0xff
 80019fe:	2004      	movs	r0, #4
 8001a00:	f005 fc5f 	bl	80072c2 <MAX7219_DisplayChar>
#endif



					/* Reset drdy_counter in order to get a new buffer */
					drdy_counter = 0;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <main+0x2a0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
					/* Clean neai buffer */
					memset(neai_buffer, 0x00, SAMPLES * sizeof(float));
 8001a0a:	2240      	movs	r2, #64	@ 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4816      	ldr	r0, [pc, #88]	@ (8001a68 <main+0x2a8>)
 8001a10:	f00a f8e8 	bl	800bbe4 <memset>
					/* Device power on */
					hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <main+0x268>)
 8001a18:	f7ff fe01 	bl	800161e <hts221_power_on_set>
		HAL_ADC_Start_IT(&hadc);
 8001a1c:	e711      	b.n	8001842 <main+0x82>
 8001a1e:	bf00      	nop
 8001a20:	00000000 	.word	0x00000000
 8001a24:	412e8480 	.word	0x412e8480
 8001a28:	20000418 	.word	0x20000418
 8001a2c:	080020dd 	.word	0x080020dd
 8001a30:	0800211f 	.word	0x0800211f
 8001a34:	20000258 	.word	0x20000258
 8001a38:	e000edfc 	.word	0xe000edfc
 8001a3c:	e0001000 	.word	0xe0001000
 8001a40:	0800e6ac 	.word	0x0800e6ac
 8001a44:	200003cf 	.word	0x200003cf
 8001a48:	0800e5bc 	.word	0x0800e5bc
 8001a4c:	20000204 	.word	0x20000204
 8001a50:	2000044c 	.word	0x2000044c
 8001a54:	20000447 	.word	0x20000447
 8001a58:	200003d0 	.word	0x200003d0
 8001a5c:	200003cc 	.word	0x200003cc
 8001a60:	200003d2 	.word	0x200003d2
 8001a64:	20000428 	.word	0x20000428
 8001a68:	200003d8 	.word	0x200003d8
 8001a6c:	e0001004 	.word	0xe0001004
 8001a70:	20000444 	.word	0x20000444
 8001a74:	20000438 	.word	0x20000438
 8001a78:	200003d4 	.word	0x200003d4
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	0800e5ec 	.word	0x0800e5ec
 8001a84:	0800e5a8 	.word	0x0800e5a8
 8001a88:	0800e5b4 	.word	0x0800e5b4
 8001a8c:	0800e5ac 	.word	0x0800e5ac

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b092      	sub	sp, #72	@ 0x48
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2234      	movs	r2, #52	@ 0x34
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00a f8a0 	bl	800bbe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <SystemClock_Config+0x98>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001aba:	4a1b      	ldr	r2, [pc, #108]	@ (8001b28 <SystemClock_Config+0x98>)
 8001abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ac0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aca:	2310      	movs	r3, #16
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ad6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001adc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f902 	bl	8004cf0 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001af2:	f000 fc47 	bl	8002384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2303      	movs	r3, #3
 8001afc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fc1e 	bl	8005350 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b1a:	f000 fc33 	bl	8002384 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3748      	adds	r7, #72	@ 0x48
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000

08001b2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <MX_ADC_Init+0xec>)
 8001b52:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001b72:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001b78:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001b7e:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bae:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001bb0:	f000 ffb4 	bl	8002b1c <HAL_ADC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001bba:	f000 fbe3 	bl	8002384 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <MX_ADC_Init+0xf0>)
 8001bc0:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	763b      	strb	r3, [r7, #24]
  AnalogWDGConfig.HighThreshold = 4096;
 8001bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bce:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480e      	ldr	r0, [pc, #56]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001bdc:	f001 fc94 	bl	8003508 <HAL_ADC_AnalogWDGConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001be6:	f000 fbcd 	bl	8002384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <MX_ADC_Init+0xe8>)
 8001bfc:	f001 fb18 	bl	8003230 <HAL_ADC_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001c06:	f000 fbbd 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000204 	.word	0x20000204
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	00800200 	.word	0x00800200

08001c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c26:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <MX_I2C1_Init+0x58>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c5e:	f002 f823 	bl	8003ca8 <HAL_I2C_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c68:	f000 fb8c 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000258 	.word	0x20000258
 8001c74:	40005400 	.word	0x40005400
 8001c78:	00061a80 	.word	0x00061a80

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <MX_SPI1_Init+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cce:	f003 fe05 	bl	80058dc <HAL_SPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd8:	f000 fb54 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200002ac 	.word	0x200002ac
 8001ce4:	40013000 	.word	0x40013000

08001ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	463b      	mov	r3, r7
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d14:	4a2d      	ldr	r2, [pc, #180]	@ (8001dcc <MX_TIM3_Init+0xe4>)
 8001d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2345;
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d26:	f640 1229 	movw	r2, #2345	@ 0x929
 8001d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d38:	4823      	ldr	r0, [pc, #140]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d3a:	f004 f879 	bl	8005e30 <HAL_TIM_Base_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d44:	f000 fb1e 	bl	8002384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	4619      	mov	r1, r3
 8001d54:	481c      	ldr	r0, [pc, #112]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d56:	f004 fc65 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d60:	f000 fb10 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d64:	4818      	ldr	r0, [pc, #96]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d66:	f004 f91b 	bl	8005fa0 <HAL_TIM_PWM_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f000 fb08 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4811      	ldr	r0, [pc, #68]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001d84:	f004 ff60 	bl	8006c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d8e:	f000 faf9 	bl	8002384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d92:	2360      	movs	r3, #96	@ 0x60
 8001d94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1173;
 8001d96:	f240 4395 	movw	r3, #1173	@ 0x495
 8001d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	2204      	movs	r2, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4807      	ldr	r0, [pc, #28]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001dac:	f004 fb78 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001db6:	f000 fae5 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dba:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <MX_TIM3_Init+0xe0>)
 8001dbc:	f000 fc20 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000304 	.word	0x20000304
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001de0:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <MX_TIM6_Init+0x68>)
 8001de2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001de6:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001dea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001df4:	22c8      	movs	r2, #200	@ 0xc8
 8001df6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dfe:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001e00:	f004 f816 	bl	8005e30 <HAL_TIM_Base_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e0a:	f000 fabb 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <MX_TIM6_Init+0x64>)
 8001e1c:	f004 ff14 	bl	8006c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e26:	f000 faad 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000344 	.word	0x20000344
 8001e38:	40001000 	.word	0x40001000

08001e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f004 ff46 	bl	8006d04 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 fa81 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000384 	.word	0x20000384
 8001e8c:	40004400 	.word	0x40004400

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef4:	481d      	ldr	r0, [pc, #116]	@ (8001f6c <MX_GPIO_Init+0xdc>)
 8001ef6:	f001 fea7 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4817      	ldr	r0, [pc, #92]	@ (8001f70 <MX_GPIO_Init+0xe0>)
 8001f12:	f001 fd09 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480f      	ldr	r0, [pc, #60]	@ (8001f6c <MX_GPIO_Init+0xdc>)
 8001f30:	f001 fcfa 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : HTS221_INT_Pin BP1_Pin */
  GPIO_InitStruct.Pin = HTS221_INT_Pin|BP1_Pin;
 8001f34:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <MX_GPIO_Init+0xdc>)
 8001f4c:	f001 fcec 	bl	8003928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2028      	movs	r0, #40	@ 0x28
 8001f56:	f001 fcb0 	bl	80038ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f5a:	2028      	movs	r0, #40	@ 0x28
 8001f5c:	f001 fcc9 	bl	80038f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020800 	.word	0x40020800

08001f74 <__io_putchar>:
 * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
 * @retval
 * @param
 */
int __io_putchar(int ch)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001f82:	f107 010c 	add.w	r1, r7, #12
 8001f86:	230a      	movs	r3, #10
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <__io_putchar+0x28>)
 8001f8c:	f004 ff0a 	bl	8006da4 <HAL_UART_Transmit>
	return ch;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000384 	.word	0x20000384

08001fa0 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line rising detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]

	    switch(GPIO_Pin) {
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_EXTI_Callback+0x2e>
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb6:	dc76      	bgt.n	80020a6 <HAL_GPIO_EXTI_Callback+0x106>
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x26>
 8001fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fc2:	d042      	beq.n	800204a <HAL_GPIO_EXTI_Callback+0xaa>
			}
			break;
		}


	}
 8001fc4:	e06f      	b.n	80020a6 <HAL_GPIO_EXTI_Callback+0x106>
	    		drdy = 1;
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
	    		break;
 8001fcc:	e06b      	b.n	80020a6 <HAL_GPIO_EXTI_Callback+0x106>
			if(!debound_flag){
 8001fce:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d164      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x100>
					debound_flag = 1;
 8001fd6:	4b37      	ldr	r3, [pc, #220]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001fdc:	4b36      	ldr	r3, [pc, #216]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8001fe4:	4834      	ldr	r0, [pc, #208]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fe6:	f003 ff63 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
			if (sequence == 0)
 8001fea:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_GPIO_EXTI_Callback+0x60>
				sequence = 1;
 8001ff2:	4b32      	ldr	r3, [pc, #200]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
				printf("Etape 1 : B1 OK (sequence=1)\r\n");
 8001ff8:	4831      	ldr	r0, [pc, #196]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x120>)
 8001ffa:	f009 fd13 	bl	800ba24 <puts>
			break;
 8001ffe:	e04f      	b.n	80020a0 <HAL_GPIO_EXTI_Callback+0x100>
			else if (sequence == 3)
 8002000:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d119      	bne.n	800203c <HAL_GPIO_EXTI_Callback+0x9c>
				sequence = 4;
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 800200a:	2204      	movs	r2, #4
 800200c:	701a      	strb	r2, [r3, #0]
				start = 1;
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
				printf("Sequence complete OK \r\n");
 8002014:	482c      	ldr	r0, [pc, #176]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x128>)
 8002016:	f009 fd05 	bl	800ba24 <puts>
				MAX7219_DisplayChar(1, 'I');
 800201a:	2149      	movs	r1, #73	@ 0x49
 800201c:	2001      	movs	r0, #1
 800201e:	f005 f950 	bl	80072c2 <MAX7219_DisplayChar>
				MAX7219_DisplayChar(2, 'N');
 8002022:	214e      	movs	r1, #78	@ 0x4e
 8002024:	2002      	movs	r0, #2
 8002026:	f005 f94c 	bl	80072c2 <MAX7219_DisplayChar>
				MAX7219_DisplayChar(3, 'I');
 800202a:	2149      	movs	r1, #73	@ 0x49
 800202c:	2003      	movs	r0, #3
 800202e:	f005 f948 	bl	80072c2 <MAX7219_DisplayChar>
				MAX7219_DisplayChar(4, 'T');  // smiley ou OFF
 8002032:	2154      	movs	r1, #84	@ 0x54
 8002034:	2004      	movs	r0, #4
 8002036:	f005 f944 	bl	80072c2 <MAX7219_DisplayChar>
			break;
 800203a:	e031      	b.n	80020a0 <HAL_GPIO_EXTI_Callback+0x100>
				printf("Erreur sur B1 : reset\r\n");
 800203c:	4823      	ldr	r0, [pc, #140]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x12c>)
 800203e:	f009 fcf1 	bl	800ba24 <puts>
				sequence = 0;
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
			break;
 8002048:	e02a      	b.n	80020a0 <HAL_GPIO_EXTI_Callback+0x100>
			if(!debound_flag){
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x114>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d128      	bne.n	80020a4 <HAL_GPIO_EXTI_Callback+0x104>
					debound_flag = 1;
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x114>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x118>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 8002060:	4815      	ldr	r0, [pc, #84]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x118>)
 8002062:	f003 ff25 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
			if (sequence == 1)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_GPIO_EXTI_Callback+0xdc>
				sequence = 2;
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
				printf("Etape 2 : BTN1 x1 OK (sequence=2)\r\n");
 8002074:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x130>)
 8002076:	f009 fcd5 	bl	800ba24 <puts>
			break;
 800207a:	e013      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x104>
			else if (sequence == 2)
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d106      	bne.n	8002092 <HAL_GPIO_EXTI_Callback+0xf2>
				sequence = 3;
 8002084:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]
				printf("Etape 3 : BTN1 x2 OK (sequence=3)\r\n");
 800208a:	4812      	ldr	r0, [pc, #72]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x134>)
 800208c:	f009 fcca 	bl	800ba24 <puts>
			break;
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x104>
				printf("Erreur sur BTN1 : reset\r\n");
 8002092:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002094:	f009 fcc6 	bl	800ba24 <puts>
				sequence = 0;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x11c>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
			break;
 800209e:	e001      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x104>
			break;
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_EXTI_Callback+0x106>
			break;
 80020a4:	bf00      	nop
	}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200003d0 	.word	0x200003d0
 80020b4:	20000448 	.word	0x20000448
 80020b8:	20000344 	.word	0x20000344
 80020bc:	20000446 	.word	0x20000446
 80020c0:	0800e5f8 	.word	0x0800e5f8
 80020c4:	20000447 	.word	0x20000447
 80020c8:	0800e618 	.word	0x0800e618
 80020cc:	0800e630 	.word	0x0800e630
 80020d0:	0800e648 	.word	0x0800e648
 80020d4:	0800e66c 	.word	0x0800e66c
 80020d8:	0800e690 	.word	0x0800e690

080020dc <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af04      	add	r7, sp, #16
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	461a      	mov	r2, r3
 80020e8:	460b      	mov	r3, r1
 80020ea:	72fb      	strb	r3, [r7, #11]
 80020ec:	4613      	mov	r3, r2
 80020ee:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	reg |= 0x80;
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	893b      	ldrh	r3, [r7, #8]
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	21bf      	movs	r1, #191	@ 0xbf
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f001 ff0e 	bl	8003f30 <HAL_I2C_Mem_Write>
	return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b088      	sub	sp, #32
 8002122:	af04      	add	r7, sp, #16
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	461a      	mov	r2, r3
 800212a:	460b      	mov	r3, r1
 800212c:	72fb      	strb	r3, [r7, #11]
 800212e:	4613      	mov	r3, r2
 8002130:	813b      	strh	r3, [r7, #8]
	/* Read multiple command */
	reg |= 0x80;
 8002132:	7afb      	ldrb	r3, [r7, #11]
 8002134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002138:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	b29a      	uxth	r2, r3
 800213e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	21bf      	movs	r1, #191	@ 0xbf
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f001 ffe7 	bl	8004124 <HAL_I2C_Mem_Read>
	return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <hts221_initialize>:
 *
 * @return No
 *
 */
static void hts221_initialize()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	/* Check device ID */
	whoamI = 0;
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <hts221_initialize+0x6c>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]

	do {
		HAL_Delay(20);
 800216a:	2014      	movs	r0, #20
 800216c:	f000 fcb4 	bl	8002ad8 <HAL_Delay>
		hts221_device_id_get(&dev_ctx, &whoamI);
 8002170:	4916      	ldr	r1, [pc, #88]	@ (80021cc <hts221_initialize+0x6c>)
 8002172:	4817      	ldr	r0, [pc, #92]	@ (80021d0 <hts221_initialize+0x70>)
 8002174:	f7ff fa42 	bl	80015fc <hts221_device_id_get>
	} while(whoamI != HTS221_ID);
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <hts221_initialize+0x6c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2bbc      	cmp	r3, #188	@ 0xbc
 800217e:	d1f4      	bne.n	800216a <hts221_initialize+0xa>

	/* Read humidity calibration coefficient */
	hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 8002180:	4914      	ldr	r1, [pc, #80]	@ (80021d4 <hts221_initialize+0x74>)
 8002182:	4813      	ldr	r0, [pc, #76]	@ (80021d0 <hts221_initialize+0x70>)
 8002184:	f7ff fad7 	bl	8001736 <hts221_hum_adc_point_0_get>
	hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 8002188:	4913      	ldr	r1, [pc, #76]	@ (80021d8 <hts221_initialize+0x78>)
 800218a:	4811      	ldr	r0, [pc, #68]	@ (80021d0 <hts221_initialize+0x70>)
 800218c:	f7ff fa93 	bl	80016b6 <hts221_hum_rh_point_0_get>
	hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 8002190:	4912      	ldr	r1, [pc, #72]	@ (80021dc <hts221_initialize+0x7c>)
 8002192:	480f      	ldr	r0, [pc, #60]	@ (80021d0 <hts221_initialize+0x70>)
 8002194:	f7ff faf0 	bl	8001778 <hts221_hum_adc_point_1_get>
	hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 8002198:	4911      	ldr	r1, [pc, #68]	@ (80021e0 <hts221_initialize+0x80>)
 800219a:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <hts221_initialize+0x70>)
 800219c:	f7ff faab 	bl	80016f6 <hts221_hum_rh_point_1_get>
	/* Enable Block Data Update */
	hts221_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80021a0:	2101      	movs	r1, #1
 80021a2:	480b      	ldr	r0, [pc, #44]	@ (80021d0 <hts221_initialize+0x70>)
 80021a4:	f7ff f9e2 	bl	800156c <hts221_block_data_update_set>
	/* Set Output Data Rate */
	hts221_data_rate_set(&dev_ctx, HUMIDITY_ODR);
 80021a8:	2103      	movs	r1, #3
 80021aa:	4809      	ldr	r0, [pc, #36]	@ (80021d0 <hts221_initialize+0x70>)
 80021ac:	f7ff f9b8 	bl	8001520 <hts221_data_rate_set>
	/* Enable data ready on interrupt pin */
	hts221_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);
 80021b0:	2101      	movs	r1, #1
 80021b2:	4807      	ldr	r0, [pc, #28]	@ (80021d0 <hts221_initialize+0x70>)
 80021b4:	f7ff fa59 	bl	800166a <hts221_drdy_on_int_set>
	/* Device power on */
	hts221_power_on_set(&dev_ctx, PROPERTY_ENABLE);
 80021b8:	2101      	movs	r1, #1
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <hts221_initialize+0x70>)
 80021bc:	f7ff fa2f 	bl	800161e <hts221_power_on_set>
	/* In order to avoid bug after "software reset" if
	 * interrupt is still enabled at boot we get a dummy value
	 */
	hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 80021c0:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <hts221_initialize+0x84>)
 80021c2:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <hts221_initialize+0x70>)
 80021c4:	f7ff f9f8 	bl	80015b8 <hts221_humidity_raw_get>

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200003ce 	.word	0x200003ce
 80021d0:	20000418 	.word	0x20000418
 80021d4:	20000428 	.word	0x20000428
 80021d8:	2000042c 	.word	0x2000042c
 80021dc:	20000430 	.word	0x20000430
 80021e0:	20000434 	.word	0x20000434
 80021e4:	200003cc 	.word	0x200003cc

080021e8 <hts221_linear_interpolation>:
 *
 * @return The humidity in percentage %
 *
 */
static float hts221_linear_interpolation(lin_t *lin, int16_t x)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
	float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fcb8 	bl	8000b74 <__aeabi_fsub>
 8002204:	4603      	mov	r3, r0
 8002206:	461c      	mov	r4, r3
 8002208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd67 	bl	8000ce0 <__aeabi_i2f>
 8002212:	4603      	mov	r3, r0
 8002214:	4619      	mov	r1, r3
 8002216:	4620      	mov	r0, r4
 8002218:	f7fe fdb6 	bl	8000d88 <__aeabi_fmul>
 800221c:	4603      	mov	r3, r0
 800221e:	461c      	mov	r4, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f7fe fdac 	bl	8000d88 <__aeabi_fmul>
 8002230:	4603      	mov	r3, r0
 8002232:	461d      	mov	r5, r3
			(lin->x0 * lin->y1))) / (lin->x1 - lin->x0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f7fe fda2 	bl	8000d88 <__aeabi_fmul>
 8002244:	4603      	mov	r3, r0
	float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002246:	4619      	mov	r1, r3
 8002248:	4628      	mov	r0, r5
 800224a:	f7fe fc93 	bl	8000b74 <__aeabi_fsub>
 800224e:	4603      	mov	r3, r0
 8002250:	4619      	mov	r1, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe fc90 	bl	8000b78 <__addsf3>
 8002258:	4603      	mov	r3, r0
 800225a:	461c      	mov	r4, r3
			(lin->x0 * lin->y1))) / (lin->x1 - lin->x0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f7fe fc84 	bl	8000b74 <__aeabi_fsub>
 800226c:	4603      	mov	r3, r0
	float percentage_hum = ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 800226e:	4619      	mov	r1, r3
 8002270:	4620      	mov	r0, r4
 8002272:	f7fe fe3d 	bl	8000ef0 <__aeabi_fdiv>
 8002276:	4603      	mov	r3, r0
 8002278:	60fb      	str	r3, [r7, #12]
	if (percentage_hum < 0.0) percentage_hum = 0.0;
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe ff20 	bl	80010c4 <__aeabi_fcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <hts221_linear_interpolation+0xaa>
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e008      	b.n	80022a4 <hts221_linear_interpolation+0xbc>
	else if (percentage_hum > 100.0) percentage_hum = 100.0;
 8002292:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <hts221_linear_interpolation+0xc8>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7fe ff33 	bl	8001100 <__aeabi_fcmpgt>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <hts221_linear_interpolation+0xbc>
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <hts221_linear_interpolation+0xc8>)
 80022a2:	60fb      	str	r3, [r7, #12]
	return percentage_hum;
 80022a4:	68fb      	ldr	r3, [r7, #12]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bdb0      	pop	{r4, r5, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	42c80000 	.word	0x42c80000

080022b4 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <iks01a3_i2c_stuck_quirk+0x98>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <iks01a3_i2c_stuck_quirk+0x98>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <iks01a3_i2c_stuck_quirk+0x98>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

	/* Configure SCL as a GPIO */
	GPIO_InitStruct.Pin = SCL_PIN;
 80022e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f4:	2304      	movs	r3, #4
 80022f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	@ (8002350 <iks01a3_i2c_stuck_quirk+0x9c>)
 8002300:	f001 fb12 	bl	8003928 <HAL_GPIO_Init>

	/* Send a burst of pulses on SCL */
	int pulses = 20;
 8002304:	2314      	movs	r3, #20
 8002306:	61fb      	str	r3, [r7, #28]
	do {
		HAL_Delay(1);
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fbe5 	bl	8002ad8 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002314:	480e      	ldr	r0, [pc, #56]	@ (8002350 <iks01a3_i2c_stuck_quirk+0x9c>)
 8002316:	f001 fc97 	bl	8003c48 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f000 fbdc 	bl	8002ad8 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002326:	480a      	ldr	r0, [pc, #40]	@ (8002350 <iks01a3_i2c_stuck_quirk+0x9c>)
 8002328:	f001 fc8e 	bl	8003c48 <HAL_GPIO_WritePin>
	} while (pulses--);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	61fa      	str	r2, [r7, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e8      	bne.n	8002308 <iks01a3_i2c_stuck_quirk+0x54>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <iks01a3_i2c_stuck_quirk+0x98>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a04      	ldr	r2, [pc, #16]	@ (800234c <iks01a3_i2c_stuck_quirk+0x98>)
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	61d3      	str	r3, [r2, #28]
}
 8002342:	bf00      	nop
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40020400 	.word	0x40020400

08002354 <buzzer>:

void buzzer (uint8_t buzzerState){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	if (buzzerState){
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <buzzer+0x1a>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002364:	2104      	movs	r1, #4
 8002366:	4806      	ldr	r0, [pc, #24]	@ (8002380 <buzzer+0x2c>)
 8002368:	f003 fe62 	bl	8006030 <HAL_TIM_PWM_Start_IT>
	}
	else{
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
	}
}
 800236c:	e003      	b.n	8002376 <buzzer+0x22>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 800236e:	2104      	movs	r1, #4
 8002370:	4803      	ldr	r0, [pc, #12]	@ (8002380 <buzzer+0x2c>)
 8002372:	f003 ff3f 	bl	80061f4 <HAL_TIM_PWM_Stop_IT>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000304 	.word	0x20000304

08002384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <Error_Handler+0x8>

08002390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_MspInit+0x58>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	4a13      	ldr	r2, [pc, #76]	@ (80023e8 <HAL_MspInit+0x58>)
 800239c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_MspInit+0x58>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_MspInit+0x58>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <HAL_MspInit+0x58>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_MspInit+0x58>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <HAL_MspInit+0x58>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <HAL_MspInit+0x58>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_MspInit+0x58>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a19      	ldr	r2, [pc, #100]	@ (8002470 <HAL_ADC_MspInit+0x84>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12b      	bne.n	8002466 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 8002414:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_ADC_MspInit+0x88>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002442:	2303      	movs	r3, #3
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <HAL_ADC_MspInit+0x8c>)
 8002452:	f001 fa69 	bl	8003928 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2012      	movs	r0, #18
 800245c:	f001 fa2d 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002460:	2012      	movs	r0, #18
 8002462:	f001 fa46 	bl	80038f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40012400 	.word	0x40012400
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000

0800247c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <HAL_I2C_MspInit+0x7c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d128      	bne.n	80024f0 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024bc:	2312      	movs	r3, #18
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c8:	2304      	movs	r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	480b      	ldr	r0, [pc, #44]	@ (8002500 <HAL_I2C_MspInit+0x84>)
 80024d4:	f001 fa28 	bl	8003928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d8:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	4a07      	ldr	r2, [pc, #28]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024e2:	6253      	str	r3, [r2, #36]	@ 0x24
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_I2C_MspInit+0x80>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020400 	.word	0x40020400

08002504 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	@ (8002580 <HAL_SPI_MspInit+0x7c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d127      	bne.n	8002576 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a16      	ldr	r2, [pc, #88]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 800252c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_SPI_MspInit+0x80>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002556:	23e0      	movs	r3, #224	@ 0xe0
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002566:	2305      	movs	r3, #5
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_SPI_MspInit+0x84>)
 8002572:	f001 f9d9 	bl	8003928 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	@ 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40013000 	.word	0x40013000
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000

0800258c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <HAL_TIM_Base_MspInit+0x68>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259e:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6253      	str	r3, [r2, #36]	@ 0x24
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025b6:	e018      	b.n	80025ea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0f      	ldr	r2, [pc, #60]	@ (80025fc <HAL_TIM_Base_MspInit+0x70>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	4a0c      	ldr	r2, [pc, #48]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	6253      	str	r3, [r2, #36]	@ 0x24
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_TIM_Base_MspInit+0x6c>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	202b      	movs	r0, #43	@ 0x2b
 80025e0:	f001 f96b 	bl	80038ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80025e4:	202b      	movs	r0, #43	@ 0x2b
 80025e6:	f001 f984 	bl	80038f2 <HAL_NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40001000 	.word	0x40001000

08002600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_TIM_MspPostInit+0x64>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11b      	bne.n	800265a <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_TIM_MspPostInit+0x68>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <HAL_TIM_MspPostInit+0x68>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <HAL_TIM_MspPostInit+0x68>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800264a:	2302      	movs	r3, #2
 800264c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	@ (800266c <HAL_TIM_MspPostInit+0x6c>)
 8002656:	f001 f967 	bl	8003928 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40000400 	.word	0x40000400
 8002668:	40023800 	.word	0x40023800
 800266c:	40020800 	.word	0x40020800

08002670 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <HAL_UART_MspInit+0x7c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d127      	bne.n	80026e2 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	4a16      	ldr	r2, [pc, #88]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	6253      	str	r3, [r2, #36]	@ 0x24
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_UART_MspInit+0x80>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026c2:	230c      	movs	r3, #12
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d2:	2307      	movs	r3, #7
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_MspInit+0x84>)
 80026de:	f001 f923 	bl	8003928 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	@ 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <NMI_Handler+0x4>

08002700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <MemManage_Handler+0x4>

08002710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <UsageFault_Handler+0x4>

08002720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f9aa 	bl	8002aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <ADC1_IRQHandler+0x10>)
 8002756:	f000 fc61 	bl	800301c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000204 	.word	0x20000204

08002764 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HTS221_INT_Pin);
 8002768:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800276c:	f001 fa84 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BP1_Pin);
 8002770:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002774:	f001 fa80 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002778:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800277c:	f001 fa7c 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <TIM6_IRQHandler+0x10>)
 800278a:	f003 fdbd 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000344 	.word	0x20000344

08002798 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a06      	ldr	r2, [pc, #24]	@ (80027c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d105      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		debound_flag = 0;
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80027b2:	f003 fbcf 	bl	8005f54 <HAL_TIM_Base_Stop_IT>
	}
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40001000 	.word	0x40001000
 80027c4:	20000448 	.word	0x20000448
 80027c8:	20000344 	.word	0x20000344

080027cc <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	if ((digitalValue > 2700) && (id_class == 2)){
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <HAL_ADC_LevelOutOfWindowCallback+0x48>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f640 228c 	movw	r2, #2700	@ 0xa8c
 80027dc:	4293      	cmp	r3, r2
 80027de:	d90c      	bls.n	80027fa <HAL_ADC_LevelOutOfWindowCallback+0x2e>
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_ADC_LevelOutOfWindowCallback+0x4c>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d108      	bne.n	80027fa <HAL_ADC_LevelOutOfWindowCallback+0x2e>
		buzzerState = 1;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
		buzzer(buzzerState);
 80027ee:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fdae 	bl	8002354 <buzzer>
 80027f8:	e008      	b.n	800280c <HAL_ADC_LevelOutOfWindowCallback+0x40>
	}
	else{
		buzzerState = 0;
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		buzzer(buzzerState);
 8002800:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fda5 	bl	8002354 <buzzer>
	}
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	2000044c 	.word	0x2000044c
 8002818:	20000444 	.word	0x20000444
 800281c:	20000450 	.word	0x20000450

08002820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <_kill>:

int _kill(int pid, int sig)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002838:	f009 fa26 	bl	800bc88 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	2216      	movs	r2, #22
 8002840:	601a      	str	r2, [r3, #0]
  return -1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_exit>:

void _exit (int status)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002856:	f04f 31ff 	mov.w	r1, #4294967295
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffe7 	bl	800282e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <_exit+0x12>

08002864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e00a      	b.n	800288c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	4601      	mov	r1, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf0      	blt.n	8002876 <_read+0x12>
  }

  return len;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e009      	b.n	80028c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fb5b 	bl	8001f74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf1      	blt.n	80028b0 <_write+0x12>
  }
  return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_close>:

int _close(int file)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028fc:	605a      	str	r2, [r3, #4]
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <_isatty>:

int _isatty(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002968:	f009 f98e 	bl	800bc88 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20014000 	.word	0x20014000
 8002998:	00000400 	.word	0x00000400
 800299c:	20000454 	.word	0x20000454
 80029a0:	20000798 	.word	0x20000798

080029a4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b0:	f7ff fff8 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480b      	ldr	r0, [pc, #44]	@ (80029e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029b6:	490c      	ldr	r1, [pc, #48]	@ (80029e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029b8:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029cc:	4c09      	ldr	r4, [pc, #36]	@ (80029f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029da:	f009 f95b 	bl	800bc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029de:	f7fe feef 	bl	80017c0 <main>
  bx lr
 80029e2:	4770      	bx	lr
  ldr r0, =_sdata
 80029e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80029ec:	0800f3c0 	.word	0x0800f3c0
  ldr r2, =_sbss
 80029f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80029f4:	20000794 	.word	0x20000794

080029f8 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029f8:	e7fe      	b.n	80029f8 <COMP_ACQ_IRQHandler>

080029fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 ff4d 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f000 f80e 	bl	8002a2c <HAL_InitTick>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	e001      	b.n	8002a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a1c:	f7ff fcb8 	bl	8002390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <HAL_InitTick+0x68>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a40:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_InitTick+0x6c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_InitTick+0x68>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 ff5a 	bl	800390e <HAL_SYSTICK_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d809      	bhi.n	8002a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a66:	2200      	movs	r2, #0
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6e:	f000 ff24 	bl	80038ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <HAL_InitTick+0x70>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e007      	b.n	8002a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e004      	b.n	8002a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000018 	.word	0x20000018
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20000014 	.word	0x20000014

08002aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_IncTick+0x1c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_IncTick+0x20>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <HAL_IncTick+0x1c>)
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000458 	.word	0x20000458
 8002ac0:	20000018 	.word	0x20000018

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b02      	ldr	r3, [pc, #8]	@ (8002ad4 <HAL_GetTick+0x10>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	20000458 	.word	0x20000458

08002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d004      	beq.n	8002afc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_Delay+0x40>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002afc:	bf00      	nop
 8002afe:	f7ff ffe1 	bl	8002ac4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d8f7      	bhi.n	8002afe <HAL_Delay+0x26>
  {
  }
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000018 	.word	0x20000018

08002b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	@ 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e127      	b.n	8002d8c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d115      	bne.n	8002b76 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b58:	4b8e      	ldr	r3, [pc, #568]	@ (8002d94 <HAL_ADC_Init+0x278>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a8d      	ldr	r2, [pc, #564]	@ (8002d94 <HAL_ADC_Init+0x278>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	4b8b      	ldr	r3, [pc, #556]	@ (8002d94 <HAL_ADC_Init+0x278>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fc3b 	bl	80023ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80ff 	bne.w	8002d82 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b8c:	f023 0302 	bic.w	r3, r3, #2
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002b98:	4b7f      	ldr	r3, [pc, #508]	@ (8002d98 <HAL_ADC_Init+0x27c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	497c      	ldr	r1, [pc, #496]	@ (8002d98 <HAL_ADC_Init+0x27c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002bb2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002bd6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002be4:	4619      	mov	r1, r3
 8002be6:	2302      	movs	r3, #2
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002bfe:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c02:	4313      	orrs	r3, r2
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d007      	beq.n	8002c1e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002c16:	4313      	orrs	r3, r2
 8002c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d04f      	beq.n	8002ccc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c32:	4313      	orrs	r3, r2
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002c3e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6912      	ldr	r2, [r2, #16]
 8002c44:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002c48:	d003      	beq.n	8002c52 <HAL_ADC_Init+0x136>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6912      	ldr	r2, [r2, #16]
 8002c4e:	2a01      	cmp	r2, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_ADC_Init+0x13c>
 8002c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_Init+0x13e>
 8002c58:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002c5a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d125      	bne.n	8002cb8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d114      	bne.n	8002ca0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	fa92 f2a2 	rbit	r2, r2
 8002c88:	617a      	str	r2, [r7, #20]
  return result;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	4093      	lsls	r3, r2
 8002c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9e:	e00b      	b.n	8002cb8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <HAL_ADC_Init+0x280>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_ADC_Init+0x284>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce8:	d003      	beq.n	8002cf2 <HAL_ADC_Init+0x1d6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d119      	bne.n	8002d26 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8002d06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	fa03 f202 	lsl.w	r2, r3, r2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d24:	e007      	b.n	8002d36 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_ADC_Init+0x288>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d5c:	e014      	b.n	8002d88 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d62:	f023 0312 	bic.w	r3, r3, #18
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3738      	adds	r7, #56	@ 0x38
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40012700 	.word	0x40012700
 8002d9c:	fcfc16ff 	.word	0xfcfc16ff
 8002da0:	c0fff189 	.word	0xc0fff189
 8002da4:	bf80fffe 	.word	0xbf80fffe

08002da8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc4:	d113      	bne.n	8002dee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd4:	d10b      	bne.n	8002dee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e068      	b.n	8002ec0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dee:	f7ff fe69 	bl	8002ac4 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002df4:	e021      	b.n	8002e3a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d01d      	beq.n	8002e3a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x6c>
 8002e04:	f7ff fe5e 	bl	8002ac4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d212      	bcs.n	8002e3a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e042      	b.n	8002ec0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0d6      	beq.n	8002df6 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0212 	mvn.w	r2, #18
 8002e58:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d124      	bne.n	8002ebe <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11f      	bne.n	8002ebe <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d111      	bne.n	8002ebe <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_IT+0x1a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e058      	b.n	8002f94 <HAL_ADC_Start_IT+0xcc>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb68 	bl	80035c0 <ADC_Enable>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d14b      	bne.n	8002f92 <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3e:	f023 0206 	bic.w	r2, r3, #6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f46:	e002      	b.n	8002f4e <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f5e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f90:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Stop_IT+0x1a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e022      	b.n	8002ffc <HAL_ADC_Stop_IT+0x60>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb5a 	bl	8003678 <ADC_ConversionStop_Disable>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0220 	bic.w	r2, r2, #32
 8002fdc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04c      	beq.n	80030d8 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d047      	beq.n	80030d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003058:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d12c      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003074:	2b00      	cmp	r3, #0
 8003076:	d127      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003090:	2b00      	cmp	r3, #0
 8003092:	d119      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0220 	bic.w	r2, r2, #32
 80030a2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f89e 	bl	800320a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0212 	mvn.w	r2, #18
 80030d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d05a      	beq.n	8003198 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d055      	beq.n	8003198 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d13a      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	d12c      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d125      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11e      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d119      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003162:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fab6 	bl	80036fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 020c 	mvn.w	r2, #12
 8003196:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fb07 	bl	80027cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f06f 0201 	mvn.w	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d017      	beq.n	8003202 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0220 	mvn.w	r2, #32
 80031f0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f812 	bl	800321c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0220 	mvn.w	r2, #32
 8003200:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x20>
 800324c:	2302      	movs	r3, #2
 800324e:	e14f      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x2c0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b06      	cmp	r3, #6
 800325e:	d81c      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b05      	subs	r3, #5
 8003272:	221f      	movs	r2, #31
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4019      	ands	r1, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b05      	subs	r3, #5
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40
 8003298:	e07e      	b.n	8003398 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d81c      	bhi.n	80032dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	3b23      	subs	r3, #35	@ 0x23
 80032b4:	221f      	movs	r2, #31
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	4019      	ands	r1, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b23      	subs	r3, #35	@ 0x23
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032da:	e05d      	b.n	8003398 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d81c      	bhi.n	800331e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b41      	subs	r3, #65	@ 0x41
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	@ 0x41
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38
 800331c:	e03c      	b.n	8003398 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b18      	cmp	r3, #24
 8003324:	d81c      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b5f      	subs	r3, #95	@ 0x5f
 8003338:	221f      	movs	r2, #31
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	4019      	ands	r1, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b5f      	subs	r3, #95	@ 0x5f
 8003352:	fa00 f203 	lsl.w	r2, r0, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34
 800335e:	e01b      	b.n	8003398 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b7d      	subs	r3, #125	@ 0x7d
 8003372:	221f      	movs	r2, #31
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	4019      	ands	r1, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b7d      	subs	r3, #125	@ 0x7d
 800338c:	fa00 f203 	lsl.w	r2, r0, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b09      	cmp	r3, #9
 800339e:	d81a      	bhi.n	80033d6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	2207      	movs	r2, #7
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	4019      	ands	r1, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6898      	ldr	r0, [r3, #8]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	fa00 f203 	lsl.w	r2, r0, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	615a      	str	r2, [r3, #20]
 80033d4:	e05d      	b.n	8003492 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b13      	cmp	r3, #19
 80033dc:	d81c      	bhi.n	8003418 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	3b1e      	subs	r3, #30
 80033f0:	2207      	movs	r2, #7
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	4019      	ands	r1, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6898      	ldr	r0, [r3, #8]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	fa00 f203 	lsl.w	r2, r0, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e03c      	b.n	8003492 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b1d      	cmp	r3, #29
 800341e:	d81c      	bhi.n	800345a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	3b3c      	subs	r3, #60	@ 0x3c
 8003432:	2207      	movs	r2, #7
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	4019      	ands	r1, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6898      	ldr	r0, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	3b3c      	subs	r3, #60	@ 0x3c
 800344c:	fa00 f203 	lsl.w	r2, r0, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e01b      	b.n	8003492 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	3b5a      	subs	r3, #90	@ 0x5a
 800346c:	2207      	movs	r2, #7
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	4019      	ands	r1, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6898      	ldr	r0, [r3, #8]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	3b5a      	subs	r3, #90	@ 0x5a
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d003      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800349e:	2b11      	cmp	r3, #17
 80034a0:	d121      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80034a2:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <HAL_ADC_ConfigChannel+0x2cc>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11b      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80034ae:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <HAL_ADC_ConfigChannel+0x2cc>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <HAL_ADC_ConfigChannel+0x2cc>)
 80034b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034b8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d111      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80034c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <HAL_ADC_ConfigChannel+0x2d0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <HAL_ADC_ConfigChannel+0x2d4>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9a      	lsrs	r2, r3, #18
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40012700 	.word	0x40012700
 8003500:	20000010 	.word	0x20000010
 8003504:	431bde83 	.word	0x431bde83

08003508 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a27      	ldr	r2, [pc, #156]	@ (80035b4 <HAL_ADC_AnalogWDGConfig+0xac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003520:	4a25      	ldr	r2, [pc, #148]	@ (80035b8 <HAL_ADC_AnalogWDGConfig+0xb0>)
 8003522:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_AnalogWDGConfig+0x2a>
 800352e:	2302      	movs	r3, #2
 8003530:	e03b      	b.n	80035aa <HAL_ADC_AnalogWDGConfig+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	e007      	b.n	8003564 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003562:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_ADC_AnalogWDGConfig+0xb4>)
 8003570:	400b      	ands	r3, r1
 8003572:	6053      	str	r3, [r2, #4]
                            ADC_CR1_JAWDEN |
                            ADC_CR1_AWDEN  |
                            ADC_CR1_AWDCH   );
  
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
                           AnalogWDGConfig->Channel       );
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
      
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	68d2      	ldr	r2, [r2, #12]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6912      	ldr	r2, [r2, #16]
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	00800200 	.word	0x00800200
 80035b8:	00400200 	.word	0x00400200
 80035bc:	ff3ffde0 	.word	0xff3ffde0

080035c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d043      	beq.n	8003666 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035ee:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <ADC_Enable+0xb0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <ADC_Enable+0xb4>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	0c9a      	lsrs	r2, r3, #18
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003602:	e002      	b.n	800360a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f9      	bne.n	8003604 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003610:	f7ff fa58 	bl	8002ac4 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003616:	e01f      	b.n	8003658 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003618:	f7ff fa54 	bl	8002ac4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d918      	bls.n	8003658 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d011      	beq.n	8003658 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003638:	f043 0210 	orr.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e007      	b.n	8003668 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d1d8      	bne.n	8003618 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000010 	.word	0x20000010
 8003674:	431bde83 	.word	0x431bde83

08003678 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d12e      	bne.n	80036f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036a2:	f7ff fa0f 	bl	8002ac4 <HAL_GetTick>
 80036a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036a8:	e01b      	b.n	80036e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80036aa:	f7ff fa0b 	bl	8002ac4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d914      	bls.n	80036e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d10d      	bne.n	80036e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e007      	b.n	80036f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d0dc      	beq.n	80036aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373e:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60d3      	str	r3, [r2, #12]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <__NVIC_GetPriorityGrouping+0x18>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 0307 	and.w	r3, r3, #7
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db0b      	blt.n	800379a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4906      	ldr	r1, [pc, #24]	@ (80037a4 <__NVIC_EnableIRQ+0x34>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2001      	movs	r0, #1
 8003792:	fa00 f202 	lsl.w	r2, r0, r2
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	@ (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	@ (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003870:	d301      	bcc.n	8003876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003872:	2301      	movs	r3, #1
 8003874:	e00f      	b.n	8003896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <SysTick_Config+0x40>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387e:	210f      	movs	r1, #15
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f7ff ff90 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <SysTick_Config+0x40>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <SysTick_Config+0x40>)
 8003890:	2207      	movs	r2, #7
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff2d 	bl	800370c <__NVIC_SetPriorityGrouping>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038cc:	f7ff ff42 	bl	8003754 <__NVIC_GetPriorityGrouping>
 80038d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f7ff ff90 	bl	80037fc <NVIC_EncodePriority>
 80038dc:	4602      	mov	r2, r0
 80038de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff5f 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff35 	bl	8003770 <__NVIC_EnableIRQ>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffa2 	bl	8003860 <SysTick_Config>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800393e:	e160      	b.n	8003c02 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8152 	beq.w	8003bfc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d005      	beq.n	8003970 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800396c:	2b02      	cmp	r3, #2
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d017      	beq.n	8003a0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d123      	bne.n	8003a62 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80ac 	beq.w	8003bfc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c20 <HAL_GPIO_Init+0x2f8>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c20 <HAL_GPIO_Init+0x2f8>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c20 <HAL_GPIO_Init+0x2f8>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003abc:	4a59      	ldr	r2, [pc, #356]	@ (8003c24 <HAL_GPIO_Init+0x2fc>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a51      	ldr	r2, [pc, #324]	@ (8003c28 <HAL_GPIO_Init+0x300>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d025      	beq.n	8003b34 <HAL_GPIO_Init+0x20c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a50      	ldr	r2, [pc, #320]	@ (8003c2c <HAL_GPIO_Init+0x304>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01f      	beq.n	8003b30 <HAL_GPIO_Init+0x208>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c30 <HAL_GPIO_Init+0x308>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d019      	beq.n	8003b2c <HAL_GPIO_Init+0x204>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a4e      	ldr	r2, [pc, #312]	@ (8003c34 <HAL_GPIO_Init+0x30c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_GPIO_Init+0x200>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a4d      	ldr	r2, [pc, #308]	@ (8003c38 <HAL_GPIO_Init+0x310>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00d      	beq.n	8003b24 <HAL_GPIO_Init+0x1fc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_GPIO_Init+0x314>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <HAL_GPIO_Init+0x1f8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a4b      	ldr	r2, [pc, #300]	@ (8003c40 <HAL_GPIO_Init+0x318>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_GPIO_Init+0x1f4>
 8003b18:	2306      	movs	r3, #6
 8003b1a:	e00c      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b1c:	2307      	movs	r3, #7
 8003b1e:	e00a      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b20:	2305      	movs	r3, #5
 8003b22:	e008      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b24:	2304      	movs	r3, #4
 8003b26:	e006      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e004      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_GPIO_Init+0x20e>
 8003b34:	2300      	movs	r3, #0
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	f002 0203 	and.w	r2, r2, #3
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	4093      	lsls	r3, r2
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b46:	4937      	ldr	r1, [pc, #220]	@ (8003c24 <HAL_GPIO_Init+0x2fc>)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b54:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b78:	4a32      	ldr	r2, [pc, #200]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b7e:	4b31      	ldr	r3, [pc, #196]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ba2:	4a28      	ldr	r2, [pc, #160]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ba8:	4b26      	ldr	r3, [pc, #152]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bf6:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <HAL_GPIO_Init+0x31c>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f ae97 	bne.w	8003940 <HAL_GPIO_Init+0x18>
  }
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40020000 	.word	0x40020000
 8003c2c:	40020400 	.word	0x40020400
 8003c30:	40020800 	.word	0x40020800
 8003c34:	40020c00 	.word	0x40020c00
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40021400 	.word	0x40021400
 8003c40:	40021800 	.word	0x40021800
 8003c44:	40010400 	.word	0x40010400

08003c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c58:	787b      	ldrb	r3, [r7, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	041a      	lsls	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe f982 	bl	8001fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e12b      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fe fbd4 	bl	800247c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f001 fd5e 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a81      	ldr	r2, [pc, #516]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d807      	bhi.n	8003d2c <HAL_I2C_Init+0x84>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a80      	ldr	r2, [pc, #512]	@ (8003f20 <HAL_I2C_Init+0x278>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bf94      	ite	ls
 8003d24:	2301      	movls	r3, #1
 8003d26:	2300      	movhi	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e006      	b.n	8003d3a <HAL_I2C_Init+0x92>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f24 <HAL_I2C_Init+0x27c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bf94      	ite	ls
 8003d34:	2301      	movls	r3, #1
 8003d36:	2300      	movhi	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0e7      	b.n	8003f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a78      	ldr	r2, [pc, #480]	@ (8003f28 <HAL_I2C_Init+0x280>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9b      	lsrs	r3, r3, #18
 8003d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a6a      	ldr	r2, [pc, #424]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <HAL_I2C_Init+0xd4>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	e009      	b.n	8003d90 <HAL_I2C_Init+0xe8>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	4a69      	ldr	r2, [pc, #420]	@ (8003f2c <HAL_I2C_Init+0x284>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	3301      	adds	r3, #1
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	495c      	ldr	r1, [pc, #368]	@ (8003f1c <HAL_I2C_Init+0x274>)
 8003dac:	428b      	cmp	r3, r1
 8003dae:	d819      	bhi.n	8003de4 <HAL_I2C_Init+0x13c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e59      	subs	r1, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_I2C_Init+0x138>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1e59      	subs	r1, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	e051      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e04f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d111      	bne.n	8003e10 <HAL_I2C_Init+0x168>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e58      	subs	r0, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	440b      	add	r3, r1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e012      	b.n	8003e36 <HAL_I2C_Init+0x18e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e58      	subs	r0, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	0099      	lsls	r1, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Init+0x196>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e022      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <HAL_I2C_Init+0x1bc>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1e58      	subs	r0, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	440b      	add	r3, r1
 8003e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Init+0x1dc>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	0099      	lsls	r1, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	6809      	ldr	r1, [r1, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6911      	ldr	r1, [r2, #16]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	000186a0 	.word	0x000186a0
 8003f20:	001e847f 	.word	0x001e847f
 8003f24:	003d08ff 	.word	0x003d08ff
 8003f28:	431bde83 	.word	0x431bde83
 8003f2c:	10624dd3 	.word	0x10624dd3

08003f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	817b      	strh	r3, [r7, #10]
 8003f42:	460b      	mov	r3, r1
 8003f44:	813b      	strh	r3, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f4a:	f7fe fdbb 	bl	8002ac4 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	f040 80d9 	bne.w	8004110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2319      	movs	r3, #25
 8003f64:	2201      	movs	r2, #1
 8003f66:	496d      	ldr	r1, [pc, #436]	@ (800411c <HAL_I2C_Mem_Write+0x1ec>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fc8b 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0cc      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Mem_Write+0x56>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e0c5      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d007      	beq.n	8003fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2221      	movs	r2, #33	@ 0x21
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2240      	movs	r2, #64	@ 0x40
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a4d      	ldr	r2, [pc, #308]	@ (8004120 <HAL_I2C_Mem_Write+0x1f0>)
 8003fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fee:	88f8      	ldrh	r0, [r7, #6]
 8003ff0:	893a      	ldrh	r2, [r7, #8]
 8003ff2:	8979      	ldrh	r1, [r7, #10]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fac2 	bl	8004588 <I2C_RequestMemoryWrite>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d052      	beq.n	80040b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e081      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fd50 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e06b      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d11b      	bne.n	80040b0 <HAL_I2C_Mem_Write+0x180>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1aa      	bne.n	800400e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fd43 	bl	8004b48 <I2C_WaitOnBTFFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d107      	bne.n	80040e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e016      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	00100002 	.word	0x00100002
 8004120:	ffff0000 	.word	0xffff0000

08004124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08c      	sub	sp, #48	@ 0x30
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800413e:	f7fe fcc1 	bl	8002ac4 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	f040 8214 	bne.w	800457a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2319      	movs	r3, #25
 8004158:	2201      	movs	r2, #1
 800415a:	497b      	ldr	r1, [pc, #492]	@ (8004348 <HAL_I2C_Mem_Read+0x224>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fb91 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	e207      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_I2C_Mem_Read+0x56>
 8004176:	2302      	movs	r3, #2
 8004178:	e200      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d007      	beq.n	80041a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2222      	movs	r2, #34	@ 0x22
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80041d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a5b      	ldr	r2, [pc, #364]	@ (800434c <HAL_I2C_Mem_Read+0x228>)
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e2:	88f8      	ldrh	r0, [r7, #6]
 80041e4:	893a      	ldrh	r2, [r7, #8]
 80041e6:	8979      	ldrh	r1, [r7, #10]
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4603      	mov	r3, r0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fa5e 	bl	80046b4 <I2C_RequestMemoryRead>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1bc      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e190      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004236:	2b01      	cmp	r3, #1
 8004238:	d11b      	bne.n	8004272 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e170      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004276:	2b02      	cmp	r3, #2
 8004278:	d11b      	bne.n	80042b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004288:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	e150      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042c8:	e144      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	f200 80f1 	bhi.w	80044b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d123      	bne.n	8004324 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fc79 	bl	8004bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e145      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004322:	e117      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	2b02      	cmp	r3, #2
 800432a:	d14e      	bne.n	80043ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004332:	2200      	movs	r2, #0
 8004334:	4906      	ldr	r1, [pc, #24]	@ (8004350 <HAL_I2C_Mem_Read+0x22c>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 faa4 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e11a      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
 8004346:	bf00      	nop
 8004348:	00100002 	.word	0x00100002
 800434c:	ffff0000 	.word	0xffff0000
 8004350:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043c8:	e0c4      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	2200      	movs	r2, #0
 80043d2:	496c      	ldr	r1, [pc, #432]	@ (8004584 <HAL_I2C_Mem_Read+0x460>)
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fa55 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0cb      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	2200      	movs	r2, #0
 800442e:	4955      	ldr	r1, [pc, #340]	@ (8004584 <HAL_I2C_Mem_Read+0x460>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa27 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e09d      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044b4:	e04e      	b.n	8004554 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fb8c 	bl	8004bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e058      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d124      	bne.n	8004554 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004520:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f aeb6 	bne.w	80042ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3728      	adds	r7, #40	@ 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	00010004 	.word	0x00010004

08004588 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f960 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d8:	d103      	bne.n	80045e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e05f      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	492d      	ldr	r1, [pc, #180]	@ (80046b0 <I2C_RequestMemoryWrite+0x128>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f9bb 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e04c      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fa46 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004648:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e02b      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004654:	893b      	ldrh	r3, [r7, #8]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e021      	b.n	80046a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	b29b      	uxth	r3, r3
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004670:	6a39      	ldr	r1, [r7, #32]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa20 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	2b04      	cmp	r3, #4
 8004684:	d107      	bne.n	8004696 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004694:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e005      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	461a      	mov	r2, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	817b      	strh	r3, [r7, #10]
 80046c6:	460b      	mov	r3, r1
 80046c8:	813b      	strh	r3, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8c2 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004714:	d103      	bne.n	800471e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e0aa      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	4952      	ldr	r1, [pc, #328]	@ (8004880 <I2C_RequestMemoryRead+0x1cc>)
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f91d 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e097      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004760:	6a39      	ldr	r1, [r7, #32]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f9a8 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	2b04      	cmp	r3, #4
 8004774:	d107      	bne.n	8004786 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e076      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004790:	893b      	ldrh	r3, [r7, #8]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	e021      	b.n	80047e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f982 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e050      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e2:	6a39      	ldr	r1, [r7, #32]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f967 	bl	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d107      	bne.n	8004808 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004806:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e035      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800481a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2200      	movs	r2, #0
 8004824:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f82b 	bl	8004884 <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00d      	beq.n	8004850 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004842:	d103      	bne.n	800484c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800484a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e013      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	6a3a      	ldr	r2, [r7, #32]
 8004864:	4906      	ldr	r1, [pc, #24]	@ (8004880 <I2C_RequestMemoryRead+0x1cc>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f886 	bl	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00010002 	.word	0x00010002

08004884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004894:	e048      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d044      	beq.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fe f911 	bl	8002ac4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d139      	bne.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10d      	bne.n	80048da <I2C_WaitOnFlagUntilTimeout+0x56>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	43da      	mvns	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	e00c      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d116      	bne.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e023      	b.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10d      	bne.n	800494e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	43da      	mvns	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	e00c      	b.n	8004968 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	43da      	mvns	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	429a      	cmp	r2, r3
 800496c:	d093      	beq.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004986:	e071      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004996:	d123      	bne.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e067      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d041      	beq.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fe f86c 	bl	8002ac4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d136      	bne.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10c      	bne.n	8004a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e00b      	b.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e021      	b.n	8004ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10c      	bne.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e00b      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af6d 	bne.w	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac4:	e034      	b.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f8e3 	bl	8004c92 <I2C_IsAcknowledgeFailed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e034      	b.n	8004b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d028      	beq.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fd fff1 	bl	8002ac4 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d016      	beq.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e007      	b.n	8004b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d1c3      	bne.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b54:	e034      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f89b 	bl	8004c92 <I2C_IsAcknowledgeFailed>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e034      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d028      	beq.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd ffa9 	bl	8002ac4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d016      	beq.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d1c3      	bne.n	8004b56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be4:	e049      	b.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d119      	bne.n	8004c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e030      	b.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fd ff4c 	bl	8002ac4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d11d      	bne.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b40      	cmp	r3, #64	@ 0x40
 8004c4a:	d016      	beq.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e007      	b.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b40      	cmp	r3, #64	@ 0x40
 8004c86:	d1ae      	bne.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca8:	d11b      	bne.n	8004ce2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f043 0204 	orr.w	r2, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e31d      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4b94      	ldr	r3, [pc, #592]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4b91      	ldr	r3, [pc, #580]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d14:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d07b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d006      	beq.n	8004d36 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d10f      	bne.n	8004d4e <HAL_RCC_OscConfig+0x5e>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d34:	d10b      	bne.n	8004d4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d36:	4b87      	ldr	r3, [pc, #540]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d06a      	beq.n	8004e18 <HAL_RCC_OscConfig+0x128>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d166      	bne.n	8004e18 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e2f7      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <HAL_RCC_OscConfig+0x74>
 8004d56:	4b7f      	ldr	r3, [pc, #508]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e02d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x96>
 8004d6c:	4b79      	ldr	r3, [pc, #484]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a78      	ldr	r2, [pc, #480]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b76      	ldr	r3, [pc, #472]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a75      	ldr	r2, [pc, #468]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd0>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0xb8>
 8004d8e:	4b71      	ldr	r3, [pc, #452]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a70      	ldr	r2, [pc, #448]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd0>
 8004da8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a69      	ldr	r2, [pc, #420]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b67      	ldr	r3, [pc, #412]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a66      	ldr	r2, [pc, #408]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fe7c 	bl	8002ac4 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fd fe78 	bl	8002ac4 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e2ad      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xe0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd fe68 	bl	8002ac4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd fe64 	bl	8002ac4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	@ 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e299      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e0a:	4b52      	ldr	r3, [pc, #328]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x108>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d05a      	beq.n	8004edc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_OscConfig+0x176>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e38:	4b46      	ldr	r3, [pc, #280]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_OscConfig+0x160>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e276      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b40      	ldr	r3, [pc, #256]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	493d      	ldr	r1, [pc, #244]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e64:	e03a      	b.n	8004edc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f58 <HAL_RCC_OscConfig+0x268>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fd fe26 	bl	8002ac4 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fe22 	bl	8002ac4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e257      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e8e:	4b31      	ldr	r3, [pc, #196]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	492a      	ldr	r1, [pc, #168]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
 8004eae:	e015      	b.n	8004edc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb0:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <HAL_RCC_OscConfig+0x268>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fd fe05 	bl	8002ac4 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd fe01 	bl	8002ac4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e236      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ed0:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80b8 	beq.w	800505a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d170      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef0:	4b18      	ldr	r3, [pc, #96]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_OscConfig+0x218>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e21a      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d921      	bls.n	8004f5c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fc7d 	bl	800581c <RCC_SetFlashLatencyFromMSIRange>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e208      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f2c:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4906      	ldr	r1, [pc, #24]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f3e:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	4901      	ldr	r1, [pc, #4]	@ (8004f54 <HAL_RCC_OscConfig+0x264>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
 8004f52:	e020      	b.n	8004f96 <HAL_RCC_OscConfig+0x2a6>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f5c:	4b99      	ldr	r3, [pc, #612]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	4996      	ldr	r1, [pc, #600]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f6e:	4b95      	ldr	r3, [pc, #596]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	4991      	ldr	r1, [pc, #580]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fc48 	bl	800581c <RCC_SetFlashLatencyFromMSIRange>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e1d3      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	0b5b      	lsrs	r3, r3, #13
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004fa6:	4a87      	ldr	r2, [pc, #540]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004fa8:	6892      	ldr	r2, [r2, #8]
 8004faa:	0912      	lsrs	r2, r2, #4
 8004fac:	f002 020f 	and.w	r2, r2, #15
 8004fb0:	4985      	ldr	r1, [pc, #532]	@ (80051c8 <HAL_RCC_OscConfig+0x4d8>)
 8004fb2:	5c8a      	ldrb	r2, [r1, r2]
 8004fb4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004fb6:	4a85      	ldr	r2, [pc, #532]	@ (80051cc <HAL_RCC_OscConfig+0x4dc>)
 8004fb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fba:	4b85      	ldr	r3, [pc, #532]	@ (80051d0 <HAL_RCC_OscConfig+0x4e0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fd fd34 	bl	8002a2c <HAL_InitTick>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d045      	beq.n	800505a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	e1b5      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d029      	beq.n	800502e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fda:	4b7e      	ldr	r3, [pc, #504]	@ (80051d4 <HAL_RCC_OscConfig+0x4e4>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fd70 	bl	8002ac4 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fe8:	f7fd fd6c 	bl	8002ac4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1a1      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ffa:	4b72      	ldr	r3, [pc, #456]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005006:	4b6f      	ldr	r3, [pc, #444]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	496c      	ldr	r1, [pc, #432]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005014:	4313      	orrs	r3, r2
 8005016:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005018:	4b6a      	ldr	r3, [pc, #424]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	4967      	ldr	r1, [pc, #412]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502e:	4b69      	ldr	r3, [pc, #420]	@ (80051d4 <HAL_RCC_OscConfig+0x4e4>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fd fd46 	bl	8002ac4 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800503c:	f7fd fd42 	bl	8002ac4 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e177      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800504e:	4b5d      	ldr	r3, [pc, #372]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d030      	beq.n	80050c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b5a      	ldr	r3, [pc, #360]	@ (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fd fd26 	bl	8002ac4 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800507c:	f7fd fd22 	bl	8002ac4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e157      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800508e:	4b4d      	ldr	r3, [pc, #308]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x38c>
 800509a:	e015      	b.n	80050c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800509c:	4b4e      	ldr	r3, [pc, #312]	@ (80051d8 <HAL_RCC_OscConfig+0x4e8>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a2:	f7fd fd0f 	bl	8002ac4 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fd fd0b 	bl	8002ac4 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e140      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050bc:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80050be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80b5 	beq.w	8005240 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050da:	4b3a      	ldr	r3, [pc, #232]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e6:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	4a36      	ldr	r2, [pc, #216]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80050f2:	4b34      	ldr	r3, [pc, #208]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fe:	2301      	movs	r3, #1
 8005100:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005102:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <HAL_RCC_OscConfig+0x4ec>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d118      	bne.n	8005140 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510e:	4b33      	ldr	r3, [pc, #204]	@ (80051dc <HAL_RCC_OscConfig+0x4ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a32      	ldr	r2, [pc, #200]	@ (80051dc <HAL_RCC_OscConfig+0x4ec>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511a:	f7fd fcd3 	bl	8002ac4 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7fd fccf 	bl	8002ac4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	@ 0x64
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e104      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <HAL_RCC_OscConfig+0x4ec>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d106      	bne.n	8005156 <HAL_RCC_OscConfig+0x466>
 8005148:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	4a1d      	ldr	r2, [pc, #116]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800514e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005152:	6353      	str	r3, [r2, #52]	@ 0x34
 8005154:	e02d      	b.n	80051b2 <HAL_RCC_OscConfig+0x4c2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x488>
 800515e:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005168:	6353      	str	r3, [r2, #52]	@ 0x34
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800516c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005174:	6353      	str	r3, [r2, #52]	@ 0x34
 8005176:	e01c      	b.n	80051b2 <HAL_RCC_OscConfig+0x4c2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b05      	cmp	r3, #5
 800517e:	d10c      	bne.n	800519a <HAL_RCC_OscConfig+0x4aa>
 8005180:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005184:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800518a:	6353      	str	r3, [r2, #52]	@ 0x34
 800518c:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005196:	6353      	str	r3, [r2, #52]	@ 0x34
 8005198:	e00b      	b.n	80051b2 <HAL_RCC_OscConfig+0x4c2>
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80051a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80051a6:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80051a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051aa:	4a06      	ldr	r2, [pc, #24]	@ (80051c4 <HAL_RCC_OscConfig+0x4d4>)
 80051ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051b0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d024      	beq.n	8005204 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fd fc83 	bl	8002ac4 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c0:	e019      	b.n	80051f6 <HAL_RCC_OscConfig+0x506>
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800efac 	.word	0x0800efac
 80051cc:	20000010 	.word	0x20000010
 80051d0:	20000014 	.word	0x20000014
 80051d4:	42470020 	.word	0x42470020
 80051d8:	42470680 	.word	0x42470680
 80051dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fd fc70 	bl	8002ac4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0a3      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f6:	4b54      	ldr	r3, [pc, #336]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 80051f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ee      	beq.n	80051e0 <HAL_RCC_OscConfig+0x4f0>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fd fc5e 	bl	8002ac4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fd fc5a 	bl	8002ac4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e08d      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005222:	4b49      	ldr	r3, [pc, #292]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1ee      	bne.n	800520c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d105      	bne.n	8005240 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005234:	4b44      	ldr	r3, [pc, #272]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	4a43      	ldr	r2, [pc, #268]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d079      	beq.n	800533c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d056      	beq.n	80052fc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	2b02      	cmp	r3, #2
 8005254:	d13b      	bne.n	80052ce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <HAL_RCC_OscConfig+0x65c>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fd fc32 	bl	8002ac4 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd fc2e 	bl	8002ac4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e063      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005276:	4b34      	ldr	r3, [pc, #208]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4319      	orrs	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	430b      	orrs	r3, r1
 800529a:	492b      	ldr	r1, [pc, #172]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a0:	4b2a      	ldr	r3, [pc, #168]	@ (800534c <HAL_RCC_OscConfig+0x65c>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a6:	f7fd fc0d 	bl	8002ac4 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fd fc09 	bl	8002ac4 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e03e      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x5be>
 80052cc:	e036      	b.n	800533c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ce:	4b1f      	ldr	r3, [pc, #124]	@ (800534c <HAL_RCC_OscConfig+0x65c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fd fbf6 	bl	8002ac4 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fd fbf2 	bl	8002ac4 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e027      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ee:	4b16      	ldr	r3, [pc, #88]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x5ec>
 80052fa:	e01f      	b.n	800533c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e01a      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005308:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <HAL_RCC_OscConfig+0x658>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	429a      	cmp	r2, r3
 800531a:	d10d      	bne.n	8005338 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d106      	bne.n	8005338 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	42470060 	.word	0x42470060

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e11a      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b8f      	ldr	r3, [pc, #572]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d919      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <HAL_RCC_ClockConfig+0x34>
 8005378:	4b8a      	ldr	r3, [pc, #552]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a89      	ldr	r2, [pc, #548]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b87      	ldr	r3, [pc, #540]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0201 	bic.w	r2, r3, #1
 800538c:	4985      	ldr	r1, [pc, #532]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005394:	4b83      	ldr	r3, [pc, #524]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0f9      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b2:	4b7d      	ldr	r3, [pc, #500]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	497a      	ldr	r1, [pc, #488]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 808e 	beq.w	80054ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053da:	4b73      	ldr	r3, [pc, #460]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d121      	bne.n	800542a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0d7      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f2:	4b6d      	ldr	r3, [pc, #436]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d115      	bne.n	800542a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e0cb      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800540a:	4b67      	ldr	r3, [pc, #412]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0bf      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800541a:	4b63      	ldr	r3, [pc, #396]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0b7      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542a:	4b5f      	ldr	r3, [pc, #380]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	495c      	ldr	r1, [pc, #368]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 8005438:	4313      	orrs	r3, r2
 800543a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800543c:	f7fd fb42 	bl	8002ac4 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d112      	bne.n	8005470 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fd fb3a 	bl	8002ac4 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e09b      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005462:	4b51      	ldr	r3, [pc, #324]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b08      	cmp	r3, #8
 800546c:	d1ee      	bne.n	800544c <HAL_RCC_ClockConfig+0xfc>
 800546e:	e03e      	b.n	80054ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d112      	bne.n	800549e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547a:	f7fd fb23 	bl	8002ac4 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e084      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005490:	4b45      	ldr	r3, [pc, #276]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b0c      	cmp	r3, #12
 800549a:	d1ee      	bne.n	800547a <HAL_RCC_ClockConfig+0x12a>
 800549c:	e027      	b.n	80054ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d11d      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054a6:	e00a      	b.n	80054be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a8:	f7fd fb0c 	bl	8002ac4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e06d      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054be:	4b3a      	ldr	r3, [pc, #232]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d1ee      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x158>
 80054ca:	e010      	b.n	80054ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fd fafa 	bl	8002ac4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e05b      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e2:	4b31      	ldr	r3, [pc, #196]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1ee      	bne.n	80054cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054ee:	4b2d      	ldr	r3, [pc, #180]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d219      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <HAL_RCC_ClockConfig+0x1be>
 8005502:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	4923      	ldr	r1, [pc, #140]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <HAL_RCC_ClockConfig+0x254>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e034      	b.n	800559a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800553c:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4917      	ldr	r1, [pc, #92]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	490f      	ldr	r1, [pc, #60]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800556e:	f000 f823 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8005572:	4602      	mov	r2, r0
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <HAL_RCC_ClockConfig+0x258>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	490b      	ldr	r1, [pc, #44]	@ (80055ac <HAL_RCC_ClockConfig+0x25c>)
 8005580:	5ccb      	ldrb	r3, [r1, r3]
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	4a0a      	ldr	r2, [pc, #40]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fa4c 	bl	8002a2c <HAL_InitTick>
 8005594:	4603      	mov	r3, r0
 8005596:	72fb      	strb	r3, [r7, #11]

  return status;
 8005598:	7afb      	ldrb	r3, [r7, #11]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023c00 	.word	0x40023c00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	0800efac 	.word	0x0800efac
 80055b0:	20000010 	.word	0x20000010
 80055b4:	20000014 	.word	0x20000014

080055b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b092      	sub	sp, #72	@ 0x48
 80055be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80055c0:	4b79      	ldr	r3, [pc, #484]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d00d      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x34>
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	f200 80d5 	bhi.w	8005780 <HAL_RCC_GetSysClockFreq+0x1c8>
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0x28>
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80055de:	e0cf      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055e0:	4b72      	ldr	r3, [pc, #456]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x1f4>)
 80055e2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80055e4:	e0da      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055e6:	4b72      	ldr	r3, [pc, #456]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80055e8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80055ea:	e0d7      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80055ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ee:	0c9b      	lsrs	r3, r3, #18
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	4b6f      	ldr	r3, [pc, #444]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80055f6:	5c9b      	ldrb	r3, [r3, r2]
 80055f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80055fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fc:	0d9b      	lsrs	r3, r3, #22
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005606:	4b68      	ldr	r3, [pc, #416]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d05d      	beq.n	80056ce <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2200      	movs	r2, #0
 8005616:	4618      	mov	r0, r3
 8005618:	4611      	mov	r1, r2
 800561a:	4604      	mov	r4, r0
 800561c:	460d      	mov	r5, r1
 800561e:	4622      	mov	r2, r4
 8005620:	462b      	mov	r3, r5
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	0159      	lsls	r1, r3, #5
 800562c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005630:	0150      	lsls	r0, r2, #5
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4621      	mov	r1, r4
 8005638:	1a51      	subs	r1, r2, r1
 800563a:	6139      	str	r1, [r7, #16]
 800563c:	4629      	mov	r1, r5
 800563e:	eb63 0301 	sbc.w	r3, r3, r1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005650:	4659      	mov	r1, fp
 8005652:	018b      	lsls	r3, r1, #6
 8005654:	4651      	mov	r1, sl
 8005656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800565a:	4651      	mov	r1, sl
 800565c:	018a      	lsls	r2, r1, #6
 800565e:	46d4      	mov	ip, sl
 8005660:	ebb2 080c 	subs.w	r8, r2, ip
 8005664:	4659      	mov	r1, fp
 8005666:	eb63 0901 	sbc.w	r9, r3, r1
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800567a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567e:	4690      	mov	r8, r2
 8005680:	4699      	mov	r9, r3
 8005682:	4623      	mov	r3, r4
 8005684:	eb18 0303 	adds.w	r3, r8, r3
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	462b      	mov	r3, r5
 800568c:	eb49 0303 	adc.w	r3, r9, r3
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800569e:	4629      	mov	r1, r5
 80056a0:	024b      	lsls	r3, r1, #9
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	4604      	mov	r4, r0
 80056a8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80056ac:	4601      	mov	r1, r0
 80056ae:	024a      	lsls	r2, r1, #9
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	2200      	movs	r2, #0
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056c0:	f7fb fd64 	bl	800118c <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4613      	mov	r3, r2
 80056ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80056cc:	e055      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	2200      	movs	r2, #0
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80056d6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056da:	4642      	mov	r2, r8
 80056dc:	464b      	mov	r3, r9
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ec:	0150      	lsls	r0, r2, #5
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	46c4      	mov	ip, r8
 80056f4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	468c      	mov	ip, r1
 80056fe:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800570e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005712:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005716:	ebb2 040a 	subs.w	r4, r2, sl
 800571a:	eb63 050b 	sbc.w	r5, r3, fp
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	00eb      	lsls	r3, r5, #3
 8005728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800572c:	00e2      	lsls	r2, r4, #3
 800572e:	4614      	mov	r4, r2
 8005730:	461d      	mov	r5, r3
 8005732:	4603      	mov	r3, r0
 8005734:	18e3      	adds	r3, r4, r3
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	460b      	mov	r3, r1
 800573a:	eb45 0303 	adc.w	r3, r5, r3
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9d7 4500 	ldrd	r4, r5, [r7]
 800574c:	4629      	mov	r1, r5
 800574e:	028b      	lsls	r3, r1, #10
 8005750:	4620      	mov	r0, r4
 8005752:	4629      	mov	r1, r5
 8005754:	4604      	mov	r4, r0
 8005756:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800575a:	4601      	mov	r1, r0
 800575c:	028a      	lsls	r2, r1, #10
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005764:	2200      	movs	r2, #0
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	61fa      	str	r2, [r7, #28]
 800576a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800576e:	f7fb fd0d 	bl	800118c <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4613      	mov	r3, r2
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800577a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800577e:	e00d      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	0b5b      	lsrs	r3, r3, #13
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	3301      	adds	r3, #1
 8005790:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800579a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800579c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3748      	adds	r7, #72	@ 0x48
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	007a1200 	.word	0x007a1200
 80057b4:	0800efa0 	.word	0x0800efa0

080057b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057bc:	4b02      	ldr	r3, [pc, #8]	@ (80057c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	20000010 	.word	0x20000010

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057d0:	f7ff fff2 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	0800efbc 	.word	0x0800efbc

080057f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057f8:	f7ff ffde 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0adb      	lsrs	r3, r3, #11
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	0800efbc 	.word	0x0800efbc

0800581c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005828:	4b29      	ldr	r3, [pc, #164]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d12c      	bne.n	800588e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005834:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005840:	4b24      	ldr	r3, [pc, #144]	@ (80058d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e016      	b.n	800587a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584c:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	4a1f      	ldr	r2, [pc, #124]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005856:	6253      	str	r3, [r2, #36]	@ 0x24
 8005858:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800586c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800586e:	4b18      	ldr	r3, [pc, #96]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005878:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005880:	d105      	bne.n	800588e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005888:	d101      	bne.n	800588e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800588a:	2301      	movs	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d105      	bne.n	80058a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005894:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a0f      	ldr	r2, [pc, #60]	@ (80058d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800589a:	f043 0304 	orr.w	r3, r3, #4
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 0201 	bic.w	r2, r3, #1
 80058a8:	490b      	ldr	r1, [pc, #44]	@ (80058d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058b0:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	40007000 	.word	0x40007000
 80058d8:	40023c00 	.word	0x40023c00

080058dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e07b      	b.n	80059e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058fe:	d009      	beq.n	8005914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e005      	b.n	8005914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc fde8 	bl	8002504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005998:	ea42 0103 	orr.w	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 0104 	and.w	r1, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	f003 0210 	and.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fe:	f7fd f861 	bl	8002ac4 <HAL_GetTick>
 8005a02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d001      	beq.n	8005a18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	e12a      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_Transmit+0x36>
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e122      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_SPI_Transmit+0x48>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e11b      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2203      	movs	r2, #3
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a84:	d10f      	bne.n	8005aa6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005acc:	d152      	bne.n	8005b74 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0xee>
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d145      	bne.n	8005b68 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b00:	e032      	b.n	8005b68 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d112      	bne.n	8005b36 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b34:	e018      	b.n	8005b68 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b36:	f7fc ffc5 	bl	8002ac4 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d803      	bhi.n	8005b4e <HAL_SPI_Transmit+0x160>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x166>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e082      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1c7      	bne.n	8005b02 <HAL_SPI_Transmit+0x114>
 8005b72:	e053      	b.n	8005c1c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Transmit+0x194>
 8005b7c:	8b7b      	ldrh	r3, [r7, #26]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d147      	bne.n	8005c12 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ba8:	e033      	b.n	8005c12 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d113      	bne.n	8005be0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bde:	e018      	b.n	8005c12 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be0:	f7fc ff70 	bl	8002ac4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d803      	bhi.n	8005bf8 <HAL_SPI_Transmit+0x20a>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_Transmit+0x210>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e02d      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1c6      	bne.n	8005baa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f8b1 	bl	8005d88 <SPI_EndRxTxTransaction>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c88:	f7fc ff1c 	bl	8002ac4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c98:	f7fc ff14 	bl	8002ac4 <HAL_GetTick>
 8005c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c9e:	4b39      	ldr	r3, [pc, #228]	@ (8005d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	015b      	lsls	r3, r3, #5
 8005ca4:	0d1b      	lsrs	r3, r3, #20
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	fb02 f303 	mul.w	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cae:	e054      	b.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d050      	beq.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cb8:	f7fc ff04 	bl	8002ac4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d902      	bls.n	8005cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d13d      	bne.n	8005d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce6:	d111      	bne.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf0:	d004      	beq.n	8005cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d107      	bne.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d14:	d10f      	bne.n	8005d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e017      	b.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4013      	ands	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	bf0c      	ite	eq
 8005d6a:	2301      	moveq	r3, #1
 8005d6c:	2300      	movne	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d19b      	bne.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000010 	.word	0x20000010

08005d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ff6a 	bl	8005c78 <SPI_WaitFlagStateUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e032      	b.n	8005e20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dba:	4b1b      	ldr	r3, [pc, #108]	@ (8005e28 <SPI_EndRxTxTransaction+0xa0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005e2c <SPI_EndRxTxTransaction+0xa4>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	0d5b      	lsrs	r3, r3, #21
 8005dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd8:	d112      	bne.n	8005e00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2180      	movs	r1, #128	@ 0x80
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ff47 	bl	8005c78 <SPI_WaitFlagStateUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d016      	beq.n	8005e1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e00f      	b.n	8005e20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d0f2      	beq.n	8005e00 <SPI_EndRxTxTransaction+0x78>
 8005e1a:	e000      	b.n	8005e1e <SPI_EndRxTxTransaction+0x96>
        break;
 8005e1c:	bf00      	nop
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000010 	.word	0x20000010
 8005e2c:	165e9f81 	.word	0x165e9f81

08005e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e031      	b.n	8005ea6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc fb98 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 fcc4 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e03a      	b.n	8005f3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a16      	ldr	r2, [pc, #88]	@ (8005f48 <HAL_TIM_Base_Start_IT+0x98>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	@ (8005f4c <HAL_TIM_Base_Start_IT+0x9c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a13      	ldr	r2, [pc, #76]	@ (8005f50 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d111      	bne.n	8005f2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d010      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2a:	e007      	b.n	8005f3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40010800 	.word	0x40010800

08005f54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_TIM_Base_Stop_IT+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e031      	b.n	8006016 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f829 	bl	800601e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f000 fc0c 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_TIM_PWM_Start_IT+0x28>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e022      	b.n	800609e <HAL_TIM_PWM_Start_IT+0x6e>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b04      	cmp	r3, #4
 800605c:	d109      	bne.n	8006072 <HAL_TIM_PWM_Start_IT+0x42>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	bf14      	ite	ne
 800606a:	2301      	movne	r3, #1
 800606c:	2300      	moveq	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	e015      	b.n	800609e <HAL_TIM_PWM_Start_IT+0x6e>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d109      	bne.n	800608c <HAL_TIM_PWM_Start_IT+0x5c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e008      	b.n	800609e <HAL_TIM_PWM_Start_IT+0x6e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e09c      	b.n	80061e0 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start_IT+0x86>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80060b4:	e013      	b.n	80060de <HAL_TIM_PWM_Start_IT+0xae>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start_IT+0x96>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80060c4:	e00b      	b.n	80060de <HAL_TIM_PWM_Start_IT+0xae>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_PWM_Start_IT+0xa6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80060d4:	e003      	b.n	80060de <HAL_TIM_PWM_Start_IT+0xae>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d841      	bhi.n	8006168 <HAL_TIM_PWM_Start_IT+0x138>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <HAL_TIM_PWM_Start_IT+0xbc>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006169 	.word	0x08006169
 80060f4:	08006169 	.word	0x08006169
 80060f8:	08006169 	.word	0x08006169
 80060fc:	08006133 	.word	0x08006133
 8006100:	08006169 	.word	0x08006169
 8006104:	08006169 	.word	0x08006169
 8006108:	08006169 	.word	0x08006169
 800610c:	08006145 	.word	0x08006145
 8006110:	08006169 	.word	0x08006169
 8006114:	08006169 	.word	0x08006169
 8006118:	08006169 	.word	0x08006169
 800611c:	08006157 	.word	0x08006157
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0202 	orr.w	r2, r2, #2
 800612e:	60da      	str	r2, [r3, #12]
      break;
 8006130:	e01d      	b.n	800616e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0204 	orr.w	r2, r2, #4
 8006140:	60da      	str	r2, [r3, #12]
      break;
 8006142:	e014      	b.n	800616e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0208 	orr.w	r2, r2, #8
 8006152:	60da      	str	r2, [r3, #12]
      break;
 8006154:	e00b      	b.n	800616e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0210 	orr.w	r2, r2, #16
 8006164:	60da      	str	r2, [r3, #12]
      break;
 8006166:	e002      	b.n	800616e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	bf00      	nop
  }

  if (status == HAL_OK)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d134      	bne.n	80061de <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2201      	movs	r2, #1
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fd3e 	bl	8006bfe <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618a:	d00e      	beq.n	80061aa <HAL_TIM_PWM_Start_IT+0x17a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <HAL_TIM_PWM_Start_IT+0x1b8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIM_PWM_Start_IT+0x17a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a14      	ldr	r2, [pc, #80]	@ (80061ec <HAL_TIM_PWM_Start_IT+0x1bc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIM_PWM_Start_IT+0x17a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a12      	ldr	r2, [pc, #72]	@ (80061f0 <HAL_TIM_PWM_Start_IT+0x1c0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d111      	bne.n	80061ce <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d010      	beq.n	80061de <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061cc:	e007      	b.n	80061de <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40010800 	.word	0x40010800

080061f4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b0c      	cmp	r3, #12
 8006206:	d841      	bhi.n	800628c <HAL_TIM_PWM_Stop_IT+0x98>
 8006208:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006245 	.word	0x08006245
 8006214:	0800628d 	.word	0x0800628d
 8006218:	0800628d 	.word	0x0800628d
 800621c:	0800628d 	.word	0x0800628d
 8006220:	08006257 	.word	0x08006257
 8006224:	0800628d 	.word	0x0800628d
 8006228:	0800628d 	.word	0x0800628d
 800622c:	0800628d 	.word	0x0800628d
 8006230:	08006269 	.word	0x08006269
 8006234:	0800628d 	.word	0x0800628d
 8006238:	0800628d 	.word	0x0800628d
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800627b 	.word	0x0800627b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0202 	bic.w	r2, r2, #2
 8006252:	60da      	str	r2, [r3, #12]
      break;
 8006254:	e01d      	b.n	8006292 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0204 	bic.w	r2, r2, #4
 8006264:	60da      	str	r2, [r3, #12]
      break;
 8006266:	e014      	b.n	8006292 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0208 	bic.w	r2, r2, #8
 8006276:	60da      	str	r2, [r3, #12]
      break;
 8006278:	e00b      	b.n	8006292 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0210 	bic.w	r2, r2, #16
 8006288:	60da      	str	r2, [r3, #12]
      break;
 800628a:	e002      	b.n	8006292 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	bf00      	nop
  }

  if (status == HAL_OK)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d132      	bne.n	80062fe <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2200      	movs	r2, #0
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fcac 	bl	8006bfe <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_PWM_Stop_IT+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Stop_IT+0xe2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80062d4:	e013      	b.n	80062fe <HAL_TIM_PWM_Stop_IT+0x10a>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80062e4:	e00b      	b.n	80062fe <HAL_TIM_PWM_Stop_IT+0x10a>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Stop_IT+0x102>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80062f4:	e003      	b.n	80062fe <HAL_TIM_PWM_Stop_IT+0x10a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01b      	beq.n	800636c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0202 	mvn.w	r2, #2
 800633c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa36 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa29 	bl	80067b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa38 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d020      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0204 	mvn.w	r2, #4
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa10 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa03 	bl	80067b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fa12 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d020      	beq.n	8006404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0208 	mvn.w	r2, #8
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2204      	movs	r2, #4
 80063da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9ea 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9dd 	bl	80067b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9ec 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d020      	beq.n	8006450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0210 	mvn.w	r2, #16
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2208      	movs	r2, #8
 8006426:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9c4 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9b7 	bl	80067b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9c6 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0201 	mvn.w	r2, #1
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc f992 	bl	8002798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9a8 	bl	80067e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0ae      	b.n	800661c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b0c      	cmp	r3, #12
 80064ca:	f200 809f 	bhi.w	800660c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ce:	a201      	add	r2, pc, #4	@ (adr r2, 80064d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006509 	.word	0x08006509
 80064d8:	0800660d 	.word	0x0800660d
 80064dc:	0800660d 	.word	0x0800660d
 80064e0:	0800660d 	.word	0x0800660d
 80064e4:	08006549 	.word	0x08006549
 80064e8:	0800660d 	.word	0x0800660d
 80064ec:	0800660d 	.word	0x0800660d
 80064f0:	0800660d 	.word	0x0800660d
 80064f4:	0800658b 	.word	0x0800658b
 80064f8:	0800660d 	.word	0x0800660d
 80064fc:	0800660d 	.word	0x0800660d
 8006500:	0800660d 	.word	0x0800660d
 8006504:	080065cb 	.word	0x080065cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f9ea 	bl	80068e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0208 	orr.w	r2, r2, #8
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	619a      	str	r2, [r3, #24]
      break;
 8006546:	e064      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fa06 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6999      	ldr	r1, [r3, #24]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	619a      	str	r2, [r3, #24]
      break;
 8006588:	e043      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fa23 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0204 	bic.w	r2, r2, #4
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	61da      	str	r2, [r3, #28]
      break;
 80065c8:	e023      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fa40 	bl	8006a56 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69d9      	ldr	r1, [r3, #28]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	021a      	lsls	r2, r3, #8
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	61da      	str	r2, [r3, #28]
      break;
 800660a:	e002      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
      break;
 8006610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIM_ConfigClockSource+0x1c>
 800663c:	2302      	movs	r3, #2
 800663e:	e0b4      	b.n	80067aa <HAL_TIM_ConfigClockSource+0x186>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800665e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006678:	d03e      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0xd4>
 800667a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800667e:	f200 8087 	bhi.w	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006686:	f000 8086 	beq.w	8006796 <HAL_TIM_ConfigClockSource+0x172>
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668e:	d87f      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b70      	cmp	r3, #112	@ 0x70
 8006692:	d01a      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0xa6>
 8006694:	2b70      	cmp	r3, #112	@ 0x70
 8006696:	d87b      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b60      	cmp	r3, #96	@ 0x60
 800669a:	d050      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x11a>
 800669c:	2b60      	cmp	r3, #96	@ 0x60
 800669e:	d877      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b50      	cmp	r3, #80	@ 0x50
 80066a2:	d03c      	beq.n	800671e <HAL_TIM_ConfigClockSource+0xfa>
 80066a4:	2b50      	cmp	r3, #80	@ 0x50
 80066a6:	d873      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d058      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x13a>
 80066ac:	2b40      	cmp	r3, #64	@ 0x40
 80066ae:	d86f      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b30      	cmp	r3, #48	@ 0x30
 80066b2:	d064      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066b4:	2b30      	cmp	r3, #48	@ 0x30
 80066b6:	d86b      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d060      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d867      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05c      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d05a      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066c8:	e062      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066da:	f000 fa71 	bl	8006bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	609a      	str	r2, [r3, #8]
      break;
 80066f6:	e04f      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006708:	f000 fa5a 	bl	8006bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800671a:	609a      	str	r2, [r3, #8]
      break;
 800671c:	e03c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	461a      	mov	r2, r3
 800672c:	f000 f9d1 	bl	8006ad2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2150      	movs	r1, #80	@ 0x50
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fa28 	bl	8006b8c <TIM_ITRx_SetConfig>
      break;
 800673c:	e02c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800674a:	461a      	mov	r2, r3
 800674c:	f000 f9ef 	bl	8006b2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2160      	movs	r1, #96	@ 0x60
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fa18 	bl	8006b8c <TIM_ITRx_SetConfig>
      break;
 800675c:	e01c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800676a:	461a      	mov	r2, r3
 800676c:	f000 f9b1 	bl	8006ad2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2140      	movs	r1, #64	@ 0x40
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fa08 	bl	8006b8c <TIM_ITRx_SetConfig>
      break;
 800677c:	e00c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f000 f9ff 	bl	8006b8c <TIM_ITRx_SetConfig>
      break;
 800678e:	e003      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e000      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
	...

080067fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006812:	d00f      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a2e      	ldr	r2, [pc, #184]	@ (80068d0 <TIM_Base_SetConfig+0xd4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00b      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2d      	ldr	r2, [pc, #180]	@ (80068d4 <TIM_Base_SetConfig+0xd8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a2c      	ldr	r2, [pc, #176]	@ (80068d8 <TIM_Base_SetConfig+0xdc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a2b      	ldr	r2, [pc, #172]	@ (80068dc <TIM_Base_SetConfig+0xe0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d108      	bne.n	8006846 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684c:	d017      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <TIM_Base_SetConfig+0xd4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1e      	ldr	r2, [pc, #120]	@ (80068d4 <TIM_Base_SetConfig+0xd8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <TIM_Base_SetConfig+0xdc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <TIM_Base_SetConfig+0xe0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <TIM_Base_SetConfig+0xe4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0x82>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1a      	ldr	r2, [pc, #104]	@ (80068e4 <TIM_Base_SetConfig+0xe8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f043 0204 	orr.w	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40010800 	.word	0x40010800
 80068e0:	40010c00 	.word	0x40010c00
 80068e4:	40011000 	.word	0x40011000

080068e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f023 0201 	bic.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 0302 	bic.w	r3, r3, #2
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0210 	bic.w	r2, r3, #16
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	031b      	lsls	r3, r3, #12
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b087      	sub	sp, #28
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f023 0201 	bic.w	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 030a 	bic.w	r3, r3, #10
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f023 0210 	bic.w	r2, r3, #16
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f043 0307 	orr.w	r3, r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	609a      	str	r2, [r3, #8]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	021a      	lsls	r2, r3, #8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2201      	movs	r2, #1
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1a      	ldr	r2, [r3, #32]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	401a      	ands	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	431a      	orrs	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e046      	b.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a13      	ldr	r2, [pc, #76]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a10      	ldr	r2, [pc, #64]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10c      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40010800 	.word	0x40010800

08006d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e042      	b.n	8006d9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fb fca0 	bl	8002670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2224      	movs	r2, #36	@ 0x24
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f971 	bl	8007030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695a      	ldr	r2, [r3, #20]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	@ 0x28
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d175      	bne.n	8006eb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_UART_Transmit+0x2c>
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e06e      	b.n	8006eb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2221      	movs	r2, #33	@ 0x21
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de2:	f7fb fe6f 	bl	8002ac4 <HAL_GetTick>
 8006de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfc:	d108      	bne.n	8006e10 <HAL_UART_Transmit+0x6c>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	e003      	b.n	8006e18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e18:	e02e      	b.n	8006e78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2180      	movs	r1, #128	@ 0x80
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f848 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e03a      	b.n	8006eb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	3302      	adds	r3, #2
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	e007      	b.n	8006e6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	781a      	ldrb	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3301      	adds	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1cb      	bne.n	8006e1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2140      	movs	r1, #64	@ 0x40
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f814 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e006      	b.n	8006eb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eca:	e03b      	b.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d037      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fb fdf6 	bl	8002ac4 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <UART_WaitOnFlagUntilTimeout+0x30>
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e03a      	b.n	8006f64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d023      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b80      	cmp	r3, #128	@ 0x80
 8006f00:	d020      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b40      	cmp	r3, #64	@ 0x40
 8006f06:	d01d      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d116      	bne.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f81d 	bl	8006f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2208      	movs	r2, #8
 8006f36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e00f      	b.n	8006f64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d0b4      	beq.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b095      	sub	sp, #84	@ 0x54
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f94:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d119      	bne.n	8007018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007004:	61ba      	str	r2, [r7, #24]
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007026:	bf00      	nop
 8007028:	3754      	adds	r7, #84	@ 0x54
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4313      	orrs	r3, r2
 8007064:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007070:	f023 030c 	bic.w	r3, r3, #12
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	430b      	orrs	r3, r1
 800707c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a55      	ldr	r2, [pc, #340]	@ (80071f0 <UART_SetConfig+0x1c0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d103      	bne.n	80070a6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800709e:	f7fe fba9 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	e002      	b.n	80070ac <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80070a6:	f7fe fb91 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 80070aa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b4:	d14c      	bne.n	8007150 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009a      	lsls	r2, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	4a49      	ldr	r2, [pc, #292]	@ (80071f4 <UART_SetConfig+0x1c4>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	0119      	lsls	r1, r3, #4
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009a      	lsls	r2, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070ec:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <UART_SetConfig+0x1c4>)
 80070ee:	fba3 0302 	umull	r0, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	2064      	movs	r0, #100	@ 0x64
 80070f6:	fb00 f303 	mul.w	r3, r0, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	3332      	adds	r3, #50	@ 0x32
 8007100:	4a3c      	ldr	r2, [pc, #240]	@ (80071f4 <UART_SetConfig+0x1c4>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800710e:	4419      	add	r1, r3
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009a      	lsls	r2, r3, #2
 800711a:	441a      	add	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	fbb2 f2f3 	udiv	r2, r2, r3
 8007126:	4b33      	ldr	r3, [pc, #204]	@ (80071f4 <UART_SetConfig+0x1c4>)
 8007128:	fba3 0302 	umull	r0, r3, r3, r2
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	2064      	movs	r0, #100	@ 0x64
 8007130:	fb00 f303 	mul.w	r3, r0, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	3332      	adds	r3, #50	@ 0x32
 800713a:	4a2e      	ldr	r2, [pc, #184]	@ (80071f4 <UART_SetConfig+0x1c4>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f003 0207 	and.w	r2, r3, #7
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	440a      	add	r2, r1
 800714c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800714e:	e04a      	b.n	80071e6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009a      	lsls	r2, r3, #2
 800715a:	441a      	add	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <UART_SetConfig+0x1c4>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	0119      	lsls	r1, r3, #4
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009a      	lsls	r2, r3, #2
 800717a:	441a      	add	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	fbb2 f2f3 	udiv	r2, r2, r3
 8007186:	4b1b      	ldr	r3, [pc, #108]	@ (80071f4 <UART_SetConfig+0x1c4>)
 8007188:	fba3 0302 	umull	r0, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	2064      	movs	r0, #100	@ 0x64
 8007190:	fb00 f303 	mul.w	r3, r0, r3
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	3332      	adds	r3, #50	@ 0x32
 800719a:	4a16      	ldr	r2, [pc, #88]	@ (80071f4 <UART_SetConfig+0x1c4>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a6:	4419      	add	r1, r3
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009a      	lsls	r2, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <UART_SetConfig+0x1c4>)
 80071c0:	fba3 0302 	umull	r0, r3, r3, r2
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	2064      	movs	r0, #100	@ 0x64
 80071c8:	fb00 f303 	mul.w	r3, r0, r3
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	3332      	adds	r3, #50	@ 0x32
 80071d2:	4a08      	ldr	r2, [pc, #32]	@ (80071f4 <UART_SetConfig+0x1c4>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	440a      	add	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40013800 	.word	0x40013800
 80071f4:	51eb851f 	.word	0x51eb851f

080071f8 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80071fc:	2201      	movs	r2, #1
 80071fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007202:	4802      	ldr	r0, [pc, #8]	@ (800720c <SPI_CS_High+0x14>)
 8007204:	f7fc fd20 	bl	8003c48 <HAL_GPIO_WritePin>
}
 8007208:	bf00      	nop
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40020000 	.word	0x40020000

08007210 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8007214:	2200      	movs	r2, #0
 8007216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800721a:	4802      	ldr	r0, [pc, #8]	@ (8007224 <SPI_CS_Low+0x14>)
 800721c:	f7fc fd14 	bl	8003c48 <HAL_GPIO_WritePin>
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40020000 	.word	0x40020000

08007228 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800722c:	2107      	movs	r1, #7
 800722e:	200b      	movs	r0, #11
 8007230:	f000 f884 	bl	800733c <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8007234:	2100      	movs	r1, #0
 8007236:	2009      	movs	r0, #9
 8007238:	f000 f880 	bl	800733c <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800723c:	f000 f809 	bl	8007252 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8007240:	f000 f80f 	bl	8007262 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8007244:	f000 f827 	bl	8007296 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8007248:	200f      	movs	r0, #15
 800724a:	f000 f812 	bl	8007272 <MAX7219_SetBrightness>
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}

08007252 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8007256:	2101      	movs	r1, #1
 8007258:	200c      	movs	r0, #12
 800725a:	f000 f86f 	bl	800733c <MAX7219_Write>
}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}

08007262 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8007266:	2100      	movs	r1, #0
 8007268:	200f      	movs	r0, #15
 800726a:	f000 f867 	bl	800733c <MAX7219_Write>
}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}

08007272 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	4603      	mov	r3, r0
 800727a:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	4619      	mov	r1, r3
 8007288:	200a      	movs	r0, #10
 800728a:	f000 f857 	bl	800733c <MAX7219_Write>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 800729c:	2300      	movs	r3, #0
 800729e:	71fb      	strb	r3, [r7, #7]
 80072a0:	e007      	b.n	80072b2 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f848 	bl	800733c <MAX7219_Write>
  for (i=0; i < 8; i++)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	3301      	adds	r3, #1
 80072b0:	71fb      	strb	r3, [r7, #7]
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	d9f4      	bls.n	80072a2 <MAX7219_Clear+0xc>
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	4603      	mov	r3, r0
 80072ca:	460a      	mov	r2, r1
 80072cc:	71fb      	strb	r3, [r7, #7]
 80072ce:	4613      	mov	r3, r2
 80072d0:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 80072d2:	79bb      	ldrb	r3, [r7, #6]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 f80b 	bl	80072f0 <MAX7219_LookupCode>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f82a 	bl	800733c <MAX7219_Write>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]
  unsigned char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	e00f      	b.n	8007320 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	4a0d      	ldr	r2, [pc, #52]	@ (8007338 <MAX7219_LookupCode+0x48>)
 8007304:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	429a      	cmp	r2, r3
 800730c:	d105      	bne.n	800731a <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	4a09      	ldr	r2, [pc, #36]	@ (8007338 <MAX7219_LookupCode+0x48>)
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	e009      	b.n	800732e <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	3301      	adds	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	4a05      	ldr	r2, [pc, #20]	@ (8007338 <MAX7219_LookupCode+0x48>)
 8007324:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e9      	bne.n	8007300 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr
 8007338:	0800efc4 	.word	0x0800efc4

0800733c <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	460a      	mov	r2, r1
 8007346:	71fb      	strb	r3, [r7, #7]
 8007348:	4613      	mov	r3, r2
 800734a:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800734c:	f7ff ff60 	bl	8007210 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 f80c 	bl	8007370 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f808 	bl	8007370 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8007360:	f7ff ff4a 	bl	80071f8 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8007364:	f7ff ff54 	bl	8007210 <SPI_CS_Low>
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800737a:	1df9      	adds	r1, r7, #7
 800737c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007380:	2201      	movs	r2, #1
 8007382:	4803      	ldr	r0, [pc, #12]	@ (8007390 <MAX7219_SendByte+0x20>)
 8007384:	f7fe fb33 	bl	80059ee <HAL_SPI_Transmit>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200002ac 	.word	0x200002ac

08007394 <funchclassifier78.constprop.0>:
 8007394:	4288      	cmp	r0, r1
 8007396:	d300      	bcc.n	800739a <funchclassifier78.constprop.0+0x6>
 8007398:	4770      	bx	lr
 800739a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739e:	460e      	mov	r6, r1
 80073a0:	eb00 0a01 	add.w	sl, r0, r1
 80073a4:	ea4f 046a 	mov.w	r4, sl, asr #1
 80073a8:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80073ac:	f10a 0501 	add.w	r5, sl, #1
 80073b0:	b085      	sub	sp, #20
 80073b2:	4651      	mov	r1, sl
 80073b4:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 80074c0 <funchclassifier78.constprop.0+0x12c>
 80073b8:	b2ad      	uxth	r5, r5
 80073ba:	4681      	mov	r9, r0
 80073bc:	f7ff ffea 	bl	8007394 <funchclassifier78.constprop.0>
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	f7ff ffe6 	bl	8007394 <funchclassifier78.constprop.0>
 80073c8:	f108 0304 	add.w	r3, r8, #4
 80073cc:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80073d0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80073d4:	f7f9 fe94 	bl	8001100 <__aeabi_fcmpgt>
 80073d8:	b910      	cbnz	r0, 80073e0 <funchclassifier78.constprop.0+0x4c>
 80073da:	b005      	add	sp, #20
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	45d1      	cmp	r9, sl
 80073e2:	464f      	mov	r7, r9
 80073e4:	d866      	bhi.n	80074b4 <funchclassifier78.constprop.0+0x120>
 80073e6:	42ae      	cmp	r6, r5
 80073e8:	d367      	bcc.n	80074ba <funchclassifier78.constprop.0+0x126>
 80073ea:	4a36      	ldr	r2, [pc, #216]	@ (80074c4 <funchclassifier78.constprop.0+0x130>)
 80073ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80073f0:	2400      	movs	r4, #0
 80073f2:	46a9      	mov	r9, r5
 80073f4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80073f8:	e009      	b.n	800740e <funchclassifier78.constprop.0+0x7a>
 80073fa:	462e      	mov	r6, r5
 80073fc:	3701      	adds	r7, #1
 80073fe:	b2bf      	uxth	r7, r7
 8007400:	45ba      	cmp	sl, r7
 8007402:	f8cb 6000 	str.w	r6, [fp]
 8007406:	d317      	bcc.n	8007438 <funchclassifier78.constprop.0+0xa4>
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	454b      	cmp	r3, r9
 800740c:	d34c      	bcc.n	80074a8 <funchclassifier78.constprop.0+0x114>
 800740e:	46a3      	mov	fp, r4
 8007410:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
 8007414:	f858 6029 	ldr.w	r6, [r8, r9, lsl #2]
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	3401      	adds	r4, #1
 800741c:	4628      	mov	r0, r5
 800741e:	4631      	mov	r1, r6
 8007420:	b2a4      	uxth	r4, r4
 8007422:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8007426:	f7f9 fe4d 	bl	80010c4 <__aeabi_fcmplt>
 800742a:	2800      	cmp	r0, #0
 800742c:	d1e5      	bne.n	80073fa <funchclassifier78.constprop.0+0x66>
 800742e:	f109 0301 	add.w	r3, r9, #1
 8007432:	fa1f f983 	uxth.w	r9, r3
 8007436:	e7e3      	b.n	8007400 <funchclassifier78.constprop.0+0x6c>
 8007438:	9a01      	ldr	r2, [sp, #4]
 800743a:	464d      	mov	r5, r9
 800743c:	e9dd 6902 	ldrd	r6, r9, [sp, #8]
 8007440:	42ae      	cmp	r6, r5
 8007442:	d320      	bcc.n	8007486 <funchclassifier78.constprop.0+0xf2>
 8007444:	4623      	mov	r3, r4
 8007446:	eb08 0485 	add.w	r4, r8, r5, lsl #2
 800744a:	1aed      	subs	r5, r5, r3
 800744c:	b2ad      	uxth	r5, r5
 800744e:	4619      	mov	r1, r3
 8007450:	f854 0b04 	ldr.w	r0, [r4], #4
 8007454:	3301      	adds	r3, #1
 8007456:	b29b      	uxth	r3, r3
 8007458:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 800745c:	1959      	adds	r1, r3, r5
 800745e:	b289      	uxth	r1, r1
 8007460:	428e      	cmp	r6, r1
 8007462:	d2f4      	bcs.n	800744e <funchclassifier78.constprop.0+0xba>
 8007464:	45ba      	cmp	sl, r7
 8007466:	d30e      	bcc.n	8007486 <funchclassifier78.constprop.0+0xf2>
 8007468:	eb08 0487 	add.w	r4, r8, r7, lsl #2
 800746c:	1aff      	subs	r7, r7, r3
 800746e:	b2bf      	uxth	r7, r7
 8007470:	4619      	mov	r1, r3
 8007472:	f854 0b04 	ldr.w	r0, [r4], #4
 8007476:	3301      	adds	r3, #1
 8007478:	b29b      	uxth	r3, r3
 800747a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 800747e:	19d9      	adds	r1, r3, r7
 8007480:	b289      	uxth	r1, r1
 8007482:	458a      	cmp	sl, r1
 8007484:	d2f4      	bcs.n	8007470 <funchclassifier78.constprop.0+0xdc>
 8007486:	2300      	movs	r3, #0
 8007488:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 800748c:	b299      	uxth	r1, r3
 800748e:	3301      	adds	r3, #1
 8007490:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007494:	eb09 0103 	add.w	r1, r9, r3
 8007498:	b289      	uxth	r1, r1
 800749a:	428e      	cmp	r6, r1
 800749c:	f848 0b04 	str.w	r0, [r8], #4
 80074a0:	d2f4      	bcs.n	800748c <funchclassifier78.constprop.0+0xf8>
 80074a2:	b005      	add	sp, #20
 80074a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a8:	461e      	mov	r6, r3
 80074aa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80074ae:	4623      	mov	r3, r4
 80074b0:	9a01      	ldr	r2, [sp, #4]
 80074b2:	e7d7      	b.n	8007464 <funchclassifier78.constprop.0+0xd0>
 80074b4:	2400      	movs	r4, #0
 80074b6:	4a03      	ldr	r2, [pc, #12]	@ (80074c4 <funchclassifier78.constprop.0+0x130>)
 80074b8:	e7c2      	b.n	8007440 <funchclassifier78.constprop.0+0xac>
 80074ba:	2300      	movs	r3, #0
 80074bc:	4a01      	ldr	r2, [pc, #4]	@ (80074c4 <funchclassifier78.constprop.0+0x130>)
 80074be:	e7d3      	b.n	8007468 <funchclassifier78.constprop.0+0xd4>
 80074c0:	200004fc 	.word	0x200004fc
 80074c4:	200004bc 	.word	0x200004bc

080074c8 <_fminf>:
 80074c8:	f006 bd74 	b.w	800dfb4 <fminf>

080074cc <neai_classification_init>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	4605      	mov	r5, r0
 80074d0:	4957      	ldr	r1, [pc, #348]	@ (8007630 <neai_classification_init+0x164>)
 80074d2:	4b58      	ldr	r3, [pc, #352]	@ (8007634 <neai_classification_init+0x168>)
 80074d4:	f100 026c 	add.w	r2, r0, #108	@ 0x6c
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	600d      	str	r5, [r1, #0]
 80074dc:	f8d0 00d8 	ldr.w	r0, [r0, #216]	@ 0xd8
 80074e0:	f7f9 fe2e 	bl	8001140 <__aeabi_f2iz>
 80074e4:	2300      	movs	r3, #0
 80074e6:	211c      	movs	r1, #28
 80074e8:	4a53      	ldr	r2, [pc, #332]	@ (8007638 <neai_classification_init+0x16c>)
 80074ea:	4e54      	ldr	r6, [pc, #336]	@ (800763c <neai_classification_init+0x170>)
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	4b53      	ldr	r3, [pc, #332]	@ (8007640 <neai_classification_init+0x174>)
 80074f2:	4c54      	ldr	r4, [pc, #336]	@ (8007644 <neai_classification_init+0x178>)
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	4b54      	ldr	r3, [pc, #336]	@ (8007648 <neai_classification_init+0x17c>)
 80074f8:	6020      	str	r0, [r4, #0]
 80074fa:	6018      	str	r0, [r3, #0]
 80074fc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	1c44      	adds	r4, r0, #1
 8007504:	4951      	ldr	r1, [pc, #324]	@ (800764c <neai_classification_init+0x180>)
 8007506:	4e52      	ldr	r6, [pc, #328]	@ (8007650 <neai_classification_init+0x184>)
 8007508:	6053      	str	r3, [r2, #4]
 800750a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800750e:	3337      	adds	r3, #55	@ 0x37
 8007510:	441c      	add	r4, r3
 8007512:	f105 07dc 	add.w	r7, r5, #220	@ 0xdc
 8007516:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800751a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800751e:	600f      	str	r7, [r1, #0]
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007526:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800752a:	f7f9 fdc1 	bl	80010b0 <__aeabi_fcmpeq>
 800752e:	2800      	cmp	r0, #0
 8007530:	d06c      	beq.n	800760c <neai_classification_init+0x140>
 8007532:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007536:	6860      	ldr	r0, [r4, #4]
 8007538:	f7f9 fdba 	bl	80010b0 <__aeabi_fcmpeq>
 800753c:	2800      	cmp	r0, #0
 800753e:	d065      	beq.n	800760c <neai_classification_init+0x140>
 8007540:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8007544:	68a0      	ldr	r0, [r4, #8]
 8007546:	f7f9 fdb3 	bl	80010b0 <__aeabi_fcmpeq>
 800754a:	2800      	cmp	r0, #0
 800754c:	d05e      	beq.n	800760c <neai_classification_init+0x140>
 800754e:	2100      	movs	r1, #0
 8007550:	68e0      	ldr	r0, [r4, #12]
 8007552:	f7f9 fdad 	bl	80010b0 <__aeabi_fcmpeq>
 8007556:	2800      	cmp	r0, #0
 8007558:	d058      	beq.n	800760c <neai_classification_init+0x140>
 800755a:	2100      	movs	r1, #0
 800755c:	6920      	ldr	r0, [r4, #16]
 800755e:	f7f9 fda7 	bl	80010b0 <__aeabi_fcmpeq>
 8007562:	2800      	cmp	r0, #0
 8007564:	d052      	beq.n	800760c <neai_classification_init+0x140>
 8007566:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800756a:	6960      	ldr	r0, [r4, #20]
 800756c:	f7f9 fda0 	bl	80010b0 <__aeabi_fcmpeq>
 8007570:	2800      	cmp	r0, #0
 8007572:	d04b      	beq.n	800760c <neai_classification_init+0x140>
 8007574:	2100      	movs	r1, #0
 8007576:	69a0      	ldr	r0, [r4, #24]
 8007578:	f7f9 fd9a 	bl	80010b0 <__aeabi_fcmpeq>
 800757c:	2800      	cmp	r0, #0
 800757e:	d045      	beq.n	800760c <neai_classification_init+0x140>
 8007580:	2100      	movs	r1, #0
 8007582:	69e0      	ldr	r0, [r4, #28]
 8007584:	f7f9 fd94 	bl	80010b0 <__aeabi_fcmpeq>
 8007588:	2800      	cmp	r0, #0
 800758a:	d03f      	beq.n	800760c <neai_classification_init+0x140>
 800758c:	4931      	ldr	r1, [pc, #196]	@ (8007654 <neai_classification_init+0x188>)
 800758e:	6a20      	ldr	r0, [r4, #32]
 8007590:	f7f9 fd8e 	bl	80010b0 <__aeabi_fcmpeq>
 8007594:	2800      	cmp	r0, #0
 8007596:	d039      	beq.n	800760c <neai_classification_init+0x140>
 8007598:	492f      	ldr	r1, [pc, #188]	@ (8007658 <neai_classification_init+0x18c>)
 800759a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800759c:	f7f9 fd88 	bl	80010b0 <__aeabi_fcmpeq>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d033      	beq.n	800760c <neai_classification_init+0x140>
 80075a4:	2100      	movs	r1, #0
 80075a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80075a8:	f7f9 fd82 	bl	80010b0 <__aeabi_fcmpeq>
 80075ac:	b370      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075ae:	492a      	ldr	r1, [pc, #168]	@ (8007658 <neai_classification_init+0x18c>)
 80075b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80075b2:	f7f9 fd7d 	bl	80010b0 <__aeabi_fcmpeq>
 80075b6:	b348      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075b8:	2100      	movs	r1, #0
 80075ba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80075bc:	f7f9 fd78 	bl	80010b0 <__aeabi_fcmpeq>
 80075c0:	b320      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075c2:	2100      	movs	r1, #0
 80075c4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80075c6:	f7f9 fd73 	bl	80010b0 <__aeabi_fcmpeq>
 80075ca:	b1f8      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075cc:	2100      	movs	r1, #0
 80075ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80075d0:	f7f9 fd6e 	bl	80010b0 <__aeabi_fcmpeq>
 80075d4:	b1d0      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075d6:	4921      	ldr	r1, [pc, #132]	@ (800765c <neai_classification_init+0x190>)
 80075d8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80075da:	f7f9 fd69 	bl	80010b0 <__aeabi_fcmpeq>
 80075de:	b1a8      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80075e4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80075e6:	f7f9 fd63 	bl	80010b0 <__aeabi_fcmpeq>
 80075ea:	b178      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075ec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80075f0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80075f2:	f7f9 fd5d 	bl	80010b0 <__aeabi_fcmpeq>
 80075f6:	b148      	cbz	r0, 800760c <neai_classification_init+0x140>
 80075f8:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80075fc:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80075fe:	f7f9 fd57 	bl	80010b0 <__aeabi_fcmpeq>
 8007602:	2800      	cmp	r0, #0
 8007604:	bf0c      	ite	eq
 8007606:	237d      	moveq	r3, #125	@ 0x7d
 8007608:	2300      	movne	r3, #0
 800760a:	e000      	b.n	800760e <neai_classification_init+0x142>
 800760c:	237d      	movs	r3, #125	@ 0x7d
 800760e:	4c14      	ldr	r4, [pc, #80]	@ (8007660 <neai_classification_init+0x194>)
 8007610:	4914      	ldr	r1, [pc, #80]	@ (8007664 <neai_classification_init+0x198>)
 8007612:	4815      	ldr	r0, [pc, #84]	@ (8007668 <neai_classification_init+0x19c>)
 8007614:	7023      	strb	r3, [r4, #0]
 8007616:	f7ff ff57 	bl	80074c8 <_fminf>
 800761a:	4913      	ldr	r1, [pc, #76]	@ (8007668 <neai_classification_init+0x19c>)
 800761c:	f7f9 fd48 	bl	80010b0 <__aeabi_fcmpeq>
 8007620:	b108      	cbz	r0, 8007626 <neai_classification_init+0x15a>
 8007622:	7820      	ldrb	r0, [r4, #0]
 8007624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007626:	2381      	movs	r3, #129	@ 0x81
 8007628:	7023      	strb	r3, [r4, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800762e:	bf00      	nop
 8007630:	200005d4 	.word	0x200005d4
 8007634:	200005d8 	.word	0x200005d8
 8007638:	2000049c 	.word	0x2000049c
 800763c:	200004ac 	.word	0x200004ac
 8007640:	200004a8 	.word	0x200004a8
 8007644:	200004b0 	.word	0x200004b0
 8007648:	200004a4 	.word	0x200004a4
 800764c:	200004b8 	.word	0x200004b8
 8007650:	200004b4 	.word	0x200004b4
 8007654:	42c80000 	.word	0x42c80000
 8007658:	40400000 	.word	0x40400000
 800765c:	49742400 	.word	0x49742400
 8007660:	2000001c 	.word	0x2000001c
 8007664:	40066666 	.word	0x40066666
 8007668:	3f8ccccd 	.word	0x3f8ccccd

0800766c <neai_classification>:
 800766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	4b06      	ldr	r3, [pc, #24]	@ (800768c <neai_classification+0x20>)
 8007672:	b0a7      	sub	sp, #156	@ 0x9c
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	4604      	mov	r4, r0
 8007678:	930c      	str	r3, [sp, #48]	@ 0x30
 800767a:	9109      	str	r1, [sp, #36]	@ 0x24
 800767c:	920e      	str	r2, [sp, #56]	@ 0x38
 800767e:	b13b      	cbz	r3, 8007690 <neai_classification+0x24>
 8007680:	2b81      	cmp	r3, #129	@ 0x81
 8007682:	d005      	beq.n	8007690 <neai_classification+0x24>
 8007684:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007686:	b027      	add	sp, #156	@ 0x9c
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	2000001c 	.word	0x2000001c
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	6866      	ldr	r6, [r4, #4]
 8007694:	4628      	mov	r0, r5
 8007696:	4631      	mov	r1, r6
 8007698:	f7f9 fd14 	bl	80010c4 <__aeabi_fcmplt>
 800769c:	b100      	cbz	r0, 80076a0 <neai_classification+0x34>
 800769e:	462e      	mov	r6, r5
 80076a0:	68a5      	ldr	r5, [r4, #8]
 80076a2:	4630      	mov	r0, r6
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f9 fd0d 	bl	80010c4 <__aeabi_fcmplt>
 80076aa:	b100      	cbz	r0, 80076ae <neai_classification+0x42>
 80076ac:	4635      	mov	r5, r6
 80076ae:	68e6      	ldr	r6, [r4, #12]
 80076b0:	4628      	mov	r0, r5
 80076b2:	4631      	mov	r1, r6
 80076b4:	f7f9 fd06 	bl	80010c4 <__aeabi_fcmplt>
 80076b8:	b100      	cbz	r0, 80076bc <neai_classification+0x50>
 80076ba:	462e      	mov	r6, r5
 80076bc:	6925      	ldr	r5, [r4, #16]
 80076be:	4630      	mov	r0, r6
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f9 fcff 	bl	80010c4 <__aeabi_fcmplt>
 80076c6:	b100      	cbz	r0, 80076ca <neai_classification+0x5e>
 80076c8:	4635      	mov	r5, r6
 80076ca:	6966      	ldr	r6, [r4, #20]
 80076cc:	4628      	mov	r0, r5
 80076ce:	4631      	mov	r1, r6
 80076d0:	f7f9 fcf8 	bl	80010c4 <__aeabi_fcmplt>
 80076d4:	b100      	cbz	r0, 80076d8 <neai_classification+0x6c>
 80076d6:	462e      	mov	r6, r5
 80076d8:	69a5      	ldr	r5, [r4, #24]
 80076da:	4630      	mov	r0, r6
 80076dc:	4629      	mov	r1, r5
 80076de:	f7f9 fcf1 	bl	80010c4 <__aeabi_fcmplt>
 80076e2:	b100      	cbz	r0, 80076e6 <neai_classification+0x7a>
 80076e4:	4635      	mov	r5, r6
 80076e6:	69e6      	ldr	r6, [r4, #28]
 80076e8:	4628      	mov	r0, r5
 80076ea:	4631      	mov	r1, r6
 80076ec:	f7f9 fcea 	bl	80010c4 <__aeabi_fcmplt>
 80076f0:	b100      	cbz	r0, 80076f4 <neai_classification+0x88>
 80076f2:	462e      	mov	r6, r5
 80076f4:	6a25      	ldr	r5, [r4, #32]
 80076f6:	4630      	mov	r0, r6
 80076f8:	4629      	mov	r1, r5
 80076fa:	f7f9 fce3 	bl	80010c4 <__aeabi_fcmplt>
 80076fe:	b100      	cbz	r0, 8007702 <neai_classification+0x96>
 8007700:	4635      	mov	r5, r6
 8007702:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8007704:	4628      	mov	r0, r5
 8007706:	4631      	mov	r1, r6
 8007708:	f7f9 fcdc 	bl	80010c4 <__aeabi_fcmplt>
 800770c:	b100      	cbz	r0, 8007710 <neai_classification+0xa4>
 800770e:	462e      	mov	r6, r5
 8007710:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007712:	4630      	mov	r0, r6
 8007714:	4629      	mov	r1, r5
 8007716:	f7f9 fcd5 	bl	80010c4 <__aeabi_fcmplt>
 800771a:	b100      	cbz	r0, 800771e <neai_classification+0xb2>
 800771c:	4635      	mov	r5, r6
 800771e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 8007722:	4628      	mov	r0, r5
 8007724:	4651      	mov	r1, sl
 8007726:	f7f9 fccd 	bl	80010c4 <__aeabi_fcmplt>
 800772a:	b100      	cbz	r0, 800772e <neai_classification+0xc2>
 800772c:	46aa      	mov	sl, r5
 800772e:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8007732:	4650      	mov	r0, sl
 8007734:	4641      	mov	r1, r8
 8007736:	f7f9 fcc5 	bl	80010c4 <__aeabi_fcmplt>
 800773a:	2800      	cmp	r0, #0
 800773c:	f003 8324 	beq.w	800ad88 <neai_classification+0x371c>
 8007740:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8007742:	4650      	mov	r0, sl
 8007744:	4631      	mov	r1, r6
 8007746:	f7f9 fcbd 	bl	80010c4 <__aeabi_fcmplt>
 800774a:	2800      	cmp	r0, #0
 800774c:	f003 8319 	beq.w	800ad82 <neai_classification+0x3716>
 8007750:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007752:	4650      	mov	r0, sl
 8007754:	4629      	mov	r1, r5
 8007756:	f7f9 fcb5 	bl	80010c4 <__aeabi_fcmplt>
 800775a:	2800      	cmp	r0, #0
 800775c:	f003 830e 	beq.w	800ad7c <neai_classification+0x3710>
 8007760:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 8007762:	4651      	mov	r1, sl
 8007764:	4638      	mov	r0, r7
 8007766:	f7f9 fccb 	bl	8001100 <__aeabi_fcmpgt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f003 8303 	beq.w	800ad76 <neai_classification+0x370a>
 8007770:	4b87      	ldr	r3, [pc, #540]	@ (8007990 <neai_classification+0x324>)
 8007772:	f8c3 a02c 	str.w	sl, [r3, #44]	@ 0x2c
 8007776:	f8d4 b000 	ldr.w	fp, [r4]
 800777a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800777e:	4658      	mov	r0, fp
 8007780:	4651      	mov	r1, sl
 8007782:	f7f9 fcbd 	bl	8001100 <__aeabi_fcmpgt>
 8007786:	b100      	cbz	r0, 800778a <neai_classification+0x11e>
 8007788:	46da      	mov	sl, fp
 800778a:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800778e:	4650      	mov	r0, sl
 8007790:	4659      	mov	r1, fp
 8007792:	f7f9 fcb5 	bl	8001100 <__aeabi_fcmpgt>
 8007796:	b100      	cbz	r0, 800779a <neai_classification+0x12e>
 8007798:	46d3      	mov	fp, sl
 800779a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800779e:	4658      	mov	r0, fp
 80077a0:	4651      	mov	r1, sl
 80077a2:	f7f9 fcad 	bl	8001100 <__aeabi_fcmpgt>
 80077a6:	b100      	cbz	r0, 80077aa <neai_classification+0x13e>
 80077a8:	46da      	mov	sl, fp
 80077aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077ae:	4650      	mov	r0, sl
 80077b0:	4659      	mov	r1, fp
 80077b2:	f7f9 fca5 	bl	8001100 <__aeabi_fcmpgt>
 80077b6:	b100      	cbz	r0, 80077ba <neai_classification+0x14e>
 80077b8:	46d3      	mov	fp, sl
 80077ba:	f8d4 a014 	ldr.w	sl, [r4, #20]
 80077be:	4658      	mov	r0, fp
 80077c0:	4651      	mov	r1, sl
 80077c2:	f7f9 fc9d 	bl	8001100 <__aeabi_fcmpgt>
 80077c6:	b100      	cbz	r0, 80077ca <neai_classification+0x15e>
 80077c8:	46da      	mov	sl, fp
 80077ca:	f8d4 b018 	ldr.w	fp, [r4, #24]
 80077ce:	4650      	mov	r0, sl
 80077d0:	4659      	mov	r1, fp
 80077d2:	f7f9 fc95 	bl	8001100 <__aeabi_fcmpgt>
 80077d6:	b100      	cbz	r0, 80077da <neai_classification+0x16e>
 80077d8:	46d3      	mov	fp, sl
 80077da:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 80077de:	4658      	mov	r0, fp
 80077e0:	4651      	mov	r1, sl
 80077e2:	f7f9 fc8d 	bl	8001100 <__aeabi_fcmpgt>
 80077e6:	b100      	cbz	r0, 80077ea <neai_classification+0x17e>
 80077e8:	46da      	mov	sl, fp
 80077ea:	f8d4 b020 	ldr.w	fp, [r4, #32]
 80077ee:	4650      	mov	r0, sl
 80077f0:	4659      	mov	r1, fp
 80077f2:	f7f9 fc85 	bl	8001100 <__aeabi_fcmpgt>
 80077f6:	b100      	cbz	r0, 80077fa <neai_classification+0x18e>
 80077f8:	46d3      	mov	fp, sl
 80077fa:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
 80077fe:	4658      	mov	r0, fp
 8007800:	4651      	mov	r1, sl
 8007802:	f7f9 fc7d 	bl	8001100 <__aeabi_fcmpgt>
 8007806:	b100      	cbz	r0, 800780a <neai_classification+0x19e>
 8007808:	46da      	mov	sl, fp
 800780a:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 800780e:	4650      	mov	r0, sl
 8007810:	4659      	mov	r1, fp
 8007812:	f7f9 fc75 	bl	8001100 <__aeabi_fcmpgt>
 8007816:	b100      	cbz	r0, 800781a <neai_classification+0x1ae>
 8007818:	46d3      	mov	fp, sl
 800781a:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 800781e:	4658      	mov	r0, fp
 8007820:	4651      	mov	r1, sl
 8007822:	f7f9 fc6d 	bl	8001100 <__aeabi_fcmpgt>
 8007826:	b100      	cbz	r0, 800782a <neai_classification+0x1be>
 8007828:	46da      	mov	sl, fp
 800782a:	4641      	mov	r1, r8
 800782c:	4650      	mov	r0, sl
 800782e:	f7f9 fc67 	bl	8001100 <__aeabi_fcmpgt>
 8007832:	b100      	cbz	r0, 8007836 <neai_classification+0x1ca>
 8007834:	46d0      	mov	r8, sl
 8007836:	4631      	mov	r1, r6
 8007838:	4640      	mov	r0, r8
 800783a:	f7f9 fc61 	bl	8001100 <__aeabi_fcmpgt>
 800783e:	b100      	cbz	r0, 8007842 <neai_classification+0x1d6>
 8007840:	4646      	mov	r6, r8
 8007842:	4629      	mov	r1, r5
 8007844:	4630      	mov	r0, r6
 8007846:	f7f9 fc5b 	bl	8001100 <__aeabi_fcmpgt>
 800784a:	b100      	cbz	r0, 800784e <neai_classification+0x1e2>
 800784c:	4635      	mov	r5, r6
 800784e:	4629      	mov	r1, r5
 8007850:	4638      	mov	r0, r7
 8007852:	f7f9 fc37 	bl	80010c4 <__aeabi_fcmplt>
 8007856:	b900      	cbnz	r0, 800785a <neai_classification+0x1ee>
 8007858:	463d      	mov	r5, r7
 800785a:	4b4d      	ldr	r3, [pc, #308]	@ (8007990 <neai_classification+0x324>)
 800785c:	639d      	str	r5, [r3, #56]	@ 0x38
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	6861      	ldr	r1, [r4, #4]
 8007862:	4628      	mov	r0, r5
 8007864:	46a9      	mov	r9, r5
 8007866:	9100      	str	r1, [sp, #0]
 8007868:	f7f9 fc4a 	bl	8001100 <__aeabi_fcmpgt>
 800786c:	b900      	cbnz	r0, 8007870 <neai_classification+0x204>
 800786e:	9d00      	ldr	r5, [sp, #0]
 8007870:	68a3      	ldr	r3, [r4, #8]
 8007872:	4628      	mov	r0, r5
 8007874:	4619      	mov	r1, r3
 8007876:	461e      	mov	r6, r3
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	f7f9 fc41 	bl	8001100 <__aeabi_fcmpgt>
 800787e:	b900      	cbnz	r0, 8007882 <neai_classification+0x216>
 8007880:	4635      	mov	r5, r6
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	4628      	mov	r0, r5
 8007886:	4619      	mov	r1, r3
 8007888:	461e      	mov	r6, r3
 800788a:	9305      	str	r3, [sp, #20]
 800788c:	f7f9 fc38 	bl	8001100 <__aeabi_fcmpgt>
 8007890:	b900      	cbnz	r0, 8007894 <neai_classification+0x228>
 8007892:	4635      	mov	r5, r6
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	4628      	mov	r0, r5
 8007898:	4619      	mov	r1, r3
 800789a:	461e      	mov	r6, r3
 800789c:	9306      	str	r3, [sp, #24]
 800789e:	f7f9 fc2f 	bl	8001100 <__aeabi_fcmpgt>
 80078a2:	b900      	cbnz	r0, 80078a6 <neai_classification+0x23a>
 80078a4:	4635      	mov	r5, r6
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	4628      	mov	r0, r5
 80078aa:	4619      	mov	r1, r3
 80078ac:	461e      	mov	r6, r3
 80078ae:	9307      	str	r3, [sp, #28]
 80078b0:	f7f9 fc26 	bl	8001100 <__aeabi_fcmpgt>
 80078b4:	b900      	cbnz	r0, 80078b8 <neai_classification+0x24c>
 80078b6:	4635      	mov	r5, r6
 80078b8:	69a3      	ldr	r3, [r4, #24]
 80078ba:	4628      	mov	r0, r5
 80078bc:	4619      	mov	r1, r3
 80078be:	461e      	mov	r6, r3
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	f7f9 fc1d 	bl	8001100 <__aeabi_fcmpgt>
 80078c6:	b900      	cbnz	r0, 80078ca <neai_classification+0x25e>
 80078c8:	4635      	mov	r5, r6
 80078ca:	69e3      	ldr	r3, [r4, #28]
 80078cc:	4628      	mov	r0, r5
 80078ce:	4619      	mov	r1, r3
 80078d0:	461e      	mov	r6, r3
 80078d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d4:	f7f9 fc14 	bl	8001100 <__aeabi_fcmpgt>
 80078d8:	b900      	cbnz	r0, 80078dc <neai_classification+0x270>
 80078da:	4635      	mov	r5, r6
 80078dc:	6a26      	ldr	r6, [r4, #32]
 80078de:	4628      	mov	r0, r5
 80078e0:	4631      	mov	r1, r6
 80078e2:	f7f9 fc0d 	bl	8001100 <__aeabi_fcmpgt>
 80078e6:	b900      	cbnz	r0, 80078ea <neai_classification+0x27e>
 80078e8:	4635      	mov	r5, r6
 80078ea:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
 80078ee:	4628      	mov	r0, r5
 80078f0:	4651      	mov	r1, sl
 80078f2:	f7f9 fc05 	bl	8001100 <__aeabi_fcmpgt>
 80078f6:	b900      	cbnz	r0, 80078fa <neai_classification+0x28e>
 80078f8:	4655      	mov	r5, sl
 80078fa:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80078fe:	4628      	mov	r0, r5
 8007900:	4659      	mov	r1, fp
 8007902:	f7f9 fbfd 	bl	8001100 <__aeabi_fcmpgt>
 8007906:	b900      	cbnz	r0, 800790a <neai_classification+0x29e>
 8007908:	465d      	mov	r5, fp
 800790a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800790c:	4628      	mov	r0, r5
 800790e:	4619      	mov	r1, r3
 8007910:	4698      	mov	r8, r3
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	f7f9 fbf4 	bl	8001100 <__aeabi_fcmpgt>
 8007918:	b900      	cbnz	r0, 800791c <neai_classification+0x2b0>
 800791a:	4645      	mov	r5, r8
 800791c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800791e:	4628      	mov	r0, r5
 8007920:	4619      	mov	r1, r3
 8007922:	4698      	mov	r8, r3
 8007924:	9302      	str	r3, [sp, #8]
 8007926:	f7f9 fbeb 	bl	8001100 <__aeabi_fcmpgt>
 800792a:	b900      	cbnz	r0, 800792e <neai_classification+0x2c2>
 800792c:	4645      	mov	r5, r8
 800792e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007930:	4628      	mov	r0, r5
 8007932:	4619      	mov	r1, r3
 8007934:	4698      	mov	r8, r3
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	f7f9 fbe2 	bl	8001100 <__aeabi_fcmpgt>
 800793c:	b900      	cbnz	r0, 8007940 <neai_classification+0x2d4>
 800793e:	4645      	mov	r5, r8
 8007940:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 8007944:	4628      	mov	r0, r5
 8007946:	4641      	mov	r1, r8
 8007948:	f7f9 fbda 	bl	8001100 <__aeabi_fcmpgt>
 800794c:	b900      	cbnz	r0, 8007950 <neai_classification+0x2e4>
 800794e:	4645      	mov	r5, r8
 8007950:	4629      	mov	r1, r5
 8007952:	4638      	mov	r0, r7
 8007954:	f7f9 fbb6 	bl	80010c4 <__aeabi_fcmplt>
 8007958:	b900      	cbnz	r0, 800795c <neai_classification+0x2f0>
 800795a:	463d      	mov	r5, r7
 800795c:	4648      	mov	r0, r9
 800795e:	9900      	ldr	r1, [sp, #0]
 8007960:	f7f9 fbb0 	bl	80010c4 <__aeabi_fcmplt>
 8007964:	b108      	cbz	r0, 800796a <neai_classification+0x2fe>
 8007966:	f8cd 9000 	str.w	r9, [sp]
 800796a:	f8dd 9000 	ldr.w	r9, [sp]
 800796e:	9904      	ldr	r1, [sp, #16]
 8007970:	4648      	mov	r0, r9
 8007972:	f7f9 fba7 	bl	80010c4 <__aeabi_fcmplt>
 8007976:	b108      	cbz	r0, 800797c <neai_classification+0x310>
 8007978:	f8cd 9010 	str.w	r9, [sp, #16]
 800797c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007980:	9905      	ldr	r1, [sp, #20]
 8007982:	4648      	mov	r0, r9
 8007984:	f7f9 fb9e 	bl	80010c4 <__aeabi_fcmplt>
 8007988:	b120      	cbz	r0, 8007994 <neai_classification+0x328>
 800798a:	f8cd 9014 	str.w	r9, [sp, #20]
 800798e:	e001      	b.n	8007994 <neai_classification+0x328>
 8007990:	20000568 	.word	0x20000568
 8007994:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007998:	9906      	ldr	r1, [sp, #24]
 800799a:	4648      	mov	r0, r9
 800799c:	f7f9 fb92 	bl	80010c4 <__aeabi_fcmplt>
 80079a0:	b108      	cbz	r0, 80079a6 <neai_classification+0x33a>
 80079a2:	f8cd 9018 	str.w	r9, [sp, #24]
 80079a6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80079aa:	9907      	ldr	r1, [sp, #28]
 80079ac:	4648      	mov	r0, r9
 80079ae:	f7f9 fb89 	bl	80010c4 <__aeabi_fcmplt>
 80079b2:	b108      	cbz	r0, 80079b8 <neai_classification+0x34c>
 80079b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80079b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80079bc:	9908      	ldr	r1, [sp, #32]
 80079be:	4648      	mov	r0, r9
 80079c0:	f7f9 fb80 	bl	80010c4 <__aeabi_fcmplt>
 80079c4:	b108      	cbz	r0, 80079ca <neai_classification+0x35e>
 80079c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80079ca:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079d0:	4648      	mov	r0, r9
 80079d2:	f7f9 fb77 	bl	80010c4 <__aeabi_fcmplt>
 80079d6:	b108      	cbz	r0, 80079dc <neai_classification+0x370>
 80079d8:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80079dc:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80079e0:	4631      	mov	r1, r6
 80079e2:	4648      	mov	r0, r9
 80079e4:	f7f9 fb6e 	bl	80010c4 <__aeabi_fcmplt>
 80079e8:	b100      	cbz	r0, 80079ec <neai_classification+0x380>
 80079ea:	464e      	mov	r6, r9
 80079ec:	4651      	mov	r1, sl
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7f9 fb68 	bl	80010c4 <__aeabi_fcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f003 81b5 	beq.w	800ad64 <neai_classification+0x36f8>
 80079fa:	4659      	mov	r1, fp
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7f9 fb61 	bl	80010c4 <__aeabi_fcmplt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f003 81ab 	beq.w	800ad5e <neai_classification+0x36f2>
 8007a08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7f9 fb58 	bl	80010c4 <__aeabi_fcmplt>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f003 819f 	beq.w	800ad58 <neai_classification+0x36ec>
 8007a1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4649      	mov	r1, r9
 8007a22:	f7f9 fb4f 	bl	80010c4 <__aeabi_fcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f003 8193 	beq.w	800ad52 <neai_classification+0x36e6>
 8007a2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007a30:	4630      	mov	r0, r6
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f9 fb46 	bl	80010c4 <__aeabi_fcmplt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f003 8181 	beq.w	800ad40 <neai_classification+0x36d4>
 8007a3e:	4641      	mov	r1, r8
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7f9 fb3f 	bl	80010c4 <__aeabi_fcmplt>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f003 8171 	beq.w	800ad2e <neai_classification+0x36c2>
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7f9 fb56 	bl	8001100 <__aeabi_fcmpgt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f003 8167 	beq.w	800ad28 <neai_classification+0x36bc>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f7f9 f889 	bl	8000b74 <__aeabi_fsub>
 8007a62:	4b9f      	ldr	r3, [pc, #636]	@ (8007ce0 <neai_classification+0x674>)
 8007a64:	6218      	str	r0, [r3, #32]
 8007a66:	6825      	ldr	r5, [r4, #0]
 8007a68:	6861      	ldr	r1, [r4, #4]
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007a6e:	9100      	str	r1, [sp, #0]
 8007a70:	f7f9 fb28 	bl	80010c4 <__aeabi_fcmplt>
 8007a74:	b900      	cbnz	r0, 8007a78 <neai_classification+0x40c>
 8007a76:	9d00      	ldr	r5, [sp, #0]
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	461e      	mov	r6, r3
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	f7f9 fb1f 	bl	80010c4 <__aeabi_fcmplt>
 8007a86:	b900      	cbnz	r0, 8007a8a <neai_classification+0x41e>
 8007a88:	4635      	mov	r5, r6
 8007a8a:	68e3      	ldr	r3, [r4, #12]
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	4619      	mov	r1, r3
 8007a90:	461e      	mov	r6, r3
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	f7f9 fb16 	bl	80010c4 <__aeabi_fcmplt>
 8007a98:	b900      	cbnz	r0, 8007a9c <neai_classification+0x430>
 8007a9a:	4635      	mov	r5, r6
 8007a9c:	6926      	ldr	r6, [r4, #16]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	f7f9 fb0f 	bl	80010c4 <__aeabi_fcmplt>
 8007aa6:	b900      	cbnz	r0, 8007aaa <neai_classification+0x43e>
 8007aa8:	4635      	mov	r5, r6
 8007aaa:	6963      	ldr	r3, [r4, #20]
 8007aac:	4628      	mov	r0, r5
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4699      	mov	r9, r3
 8007ab2:	9306      	str	r3, [sp, #24]
 8007ab4:	f7f9 fb06 	bl	80010c4 <__aeabi_fcmplt>
 8007ab8:	b900      	cbnz	r0, 8007abc <neai_classification+0x450>
 8007aba:	464d      	mov	r5, r9
 8007abc:	69a3      	ldr	r3, [r4, #24]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4699      	mov	r9, r3
 8007ac4:	9307      	str	r3, [sp, #28]
 8007ac6:	f7f9 fafd 	bl	80010c4 <__aeabi_fcmplt>
 8007aca:	b900      	cbnz	r0, 8007ace <neai_classification+0x462>
 8007acc:	464d      	mov	r5, r9
 8007ace:	69e3      	ldr	r3, [r4, #28]
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4699      	mov	r9, r3
 8007ad6:	9308      	str	r3, [sp, #32]
 8007ad8:	f7f9 faf4 	bl	80010c4 <__aeabi_fcmplt>
 8007adc:	b900      	cbnz	r0, 8007ae0 <neai_classification+0x474>
 8007ade:	464d      	mov	r5, r9
 8007ae0:	6a23      	ldr	r3, [r4, #32]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4699      	mov	r9, r3
 8007ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aea:	f7f9 faeb 	bl	80010c4 <__aeabi_fcmplt>
 8007aee:	b900      	cbnz	r0, 8007af2 <neai_classification+0x486>
 8007af0:	464d      	mov	r5, r9
 8007af2:	4651      	mov	r1, sl
 8007af4:	4628      	mov	r0, r5
 8007af6:	f7f9 fae5 	bl	80010c4 <__aeabi_fcmplt>
 8007afa:	b900      	cbnz	r0, 8007afe <neai_classification+0x492>
 8007afc:	4655      	mov	r5, sl
 8007afe:	4659      	mov	r1, fp
 8007b00:	4628      	mov	r0, r5
 8007b02:	f7f9 fadf 	bl	80010c4 <__aeabi_fcmplt>
 8007b06:	b900      	cbnz	r0, 8007b0a <neai_classification+0x49e>
 8007b08:	465d      	mov	r5, fp
 8007b0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b0e:	4628      	mov	r0, r5
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f9 fad7 	bl	80010c4 <__aeabi_fcmplt>
 8007b16:	b900      	cbnz	r0, 8007b1a <neai_classification+0x4ae>
 8007b18:	464d      	mov	r5, r9
 8007b1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	4649      	mov	r1, r9
 8007b22:	f7f9 facf 	bl	80010c4 <__aeabi_fcmplt>
 8007b26:	b900      	cbnz	r0, 8007b2a <neai_classification+0x4be>
 8007b28:	464d      	mov	r5, r9
 8007b2a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f9 fac7 	bl	80010c4 <__aeabi_fcmplt>
 8007b36:	b900      	cbnz	r0, 8007b3a <neai_classification+0x4ce>
 8007b38:	464d      	mov	r5, r9
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7f9 fac1 	bl	80010c4 <__aeabi_fcmplt>
 8007b42:	b900      	cbnz	r0, 8007b46 <neai_classification+0x4da>
 8007b44:	4645      	mov	r5, r8
 8007b46:	4629      	mov	r1, r5
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7f9 fad9 	bl	8001100 <__aeabi_fcmpgt>
 8007b4e:	b900      	cbnz	r0, 8007b52 <neai_classification+0x4e6>
 8007b50:	463d      	mov	r5, r7
 8007b52:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8007b56:	9900      	ldr	r1, [sp, #0]
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f7f9 fad1 	bl	8001100 <__aeabi_fcmpgt>
 8007b5e:	b108      	cbz	r0, 8007b64 <neai_classification+0x4f8>
 8007b60:	f8cd 9000 	str.w	r9, [sp]
 8007b64:	f8dd 9000 	ldr.w	r9, [sp]
 8007b68:	9904      	ldr	r1, [sp, #16]
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	f7f9 fac8 	bl	8001100 <__aeabi_fcmpgt>
 8007b70:	b108      	cbz	r0, 8007b76 <neai_classification+0x50a>
 8007b72:	f8cd 9010 	str.w	r9, [sp, #16]
 8007b76:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007b7a:	9905      	ldr	r1, [sp, #20]
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f7f9 fabf 	bl	8001100 <__aeabi_fcmpgt>
 8007b82:	b108      	cbz	r0, 8007b88 <neai_classification+0x51c>
 8007b84:	f8cd 9014 	str.w	r9, [sp, #20]
 8007b88:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4648      	mov	r0, r9
 8007b90:	f7f9 fab6 	bl	8001100 <__aeabi_fcmpgt>
 8007b94:	b100      	cbz	r0, 8007b98 <neai_classification+0x52c>
 8007b96:	464e      	mov	r6, r9
 8007b98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	f7f9 faae 	bl	8001100 <__aeabi_fcmpgt>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f003 80bc 	beq.w	800ad22 <neai_classification+0x36b6>
 8007baa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f9 faa5 	bl	8001100 <__aeabi_fcmpgt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f003 80b0 	beq.w	800ad1c <neai_classification+0x36b0>
 8007bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f9 fa9c 	bl	8001100 <__aeabi_fcmpgt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f003 80a4 	beq.w	800ad16 <neai_classification+0x36aa>
 8007bce:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	f7f9 fa93 	bl	8001100 <__aeabi_fcmpgt>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f003 8092 	beq.w	800ad04 <neai_classification+0x3698>
 8007be0:	4651      	mov	r1, sl
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7f9 fa8c 	bl	8001100 <__aeabi_fcmpgt>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f003 8082 	beq.w	800acf2 <neai_classification+0x3686>
 8007bee:	4659      	mov	r1, fp
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7f9 fa85 	bl	8001100 <__aeabi_fcmpgt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f003 8078 	beq.w	800acec <neai_classification+0x3680>
 8007bfc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007c00:	4630      	mov	r0, r6
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f9 fa7c 	bl	8001100 <__aeabi_fcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f003 806c 	beq.w	800ace6 <neai_classification+0x367a>
 8007c0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007c12:	4630      	mov	r0, r6
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f9 fa73 	bl	8001100 <__aeabi_fcmpgt>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f003 8060 	beq.w	800ace0 <neai_classification+0x3674>
 8007c20:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c24:	4630      	mov	r0, r6
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f9 fa6a 	bl	8001100 <__aeabi_fcmpgt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f003 804e 	beq.w	800acce <neai_classification+0x3662>
 8007c32:	4641      	mov	r1, r8
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7f9 fa63 	bl	8001100 <__aeabi_fcmpgt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f003 803e 	beq.w	800acbc <neai_classification+0x3650>
 8007c40:	4631      	mov	r1, r6
 8007c42:	4638      	mov	r0, r7
 8007c44:	f7f9 fa3e 	bl	80010c4 <__aeabi_fcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f003 8034 	beq.w	800acb6 <neai_classification+0x364a>
 8007c4e:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
 8007c52:	f026 4600 	bic.w	r6, r6, #2147483648	@ 0x80000000
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7f9 fa33 	bl	80010c4 <__aeabi_fcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f043 8026 	bne.w	800acb0 <neai_classification+0x3644>
 8007c64:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007ce0 <neai_classification+0x674>
 8007c68:	f8c9 5010 	str.w	r5, [r9, #16]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	6820      	ldr	r0, [r4, #0]
 8007c70:	f7f8 ff82 	bl	8000b78 <__addsf3>
 8007c74:	68a1      	ldr	r1, [r4, #8]
 8007c76:	f7f8 ff7f 	bl	8000b78 <__addsf3>
 8007c7a:	68e1      	ldr	r1, [r4, #12]
 8007c7c:	f7f8 ff7c 	bl	8000b78 <__addsf3>
 8007c80:	6921      	ldr	r1, [r4, #16]
 8007c82:	f7f8 ff79 	bl	8000b78 <__addsf3>
 8007c86:	9906      	ldr	r1, [sp, #24]
 8007c88:	f7f8 ff76 	bl	8000b78 <__addsf3>
 8007c8c:	9907      	ldr	r1, [sp, #28]
 8007c8e:	f7f8 ff73 	bl	8000b78 <__addsf3>
 8007c92:	9908      	ldr	r1, [sp, #32]
 8007c94:	f7f8 ff70 	bl	8000b78 <__addsf3>
 8007c98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c9a:	f7f8 ff6d 	bl	8000b78 <__addsf3>
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	f7f8 ff6a 	bl	8000b78 <__addsf3>
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	f7f8 ff67 	bl	8000b78 <__addsf3>
 8007caa:	9901      	ldr	r1, [sp, #4]
 8007cac:	f7f8 ff64 	bl	8000b78 <__addsf3>
 8007cb0:	9902      	ldr	r1, [sp, #8]
 8007cb2:	f7f8 ff61 	bl	8000b78 <__addsf3>
 8007cb6:	9903      	ldr	r1, [sp, #12]
 8007cb8:	f7f8 ff5e 	bl	8000b78 <__addsf3>
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	f7f8 ff5b 	bl	8000b78 <__addsf3>
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7f8 ff57 	bl	8000b78 <__addsf3>
 8007cca:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8007cce:	f7f9 f85b 	bl	8000d88 <__aeabi_fmul>
 8007cd2:	f8c9 0034 	str.w	r0, [r9, #52]	@ 0x34
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e001      	b.n	8007ce4 <neai_classification+0x678>
 8007ce0:	20000568 	.word	0x20000568
 8007ce4:	4651      	mov	r1, sl
 8007ce6:	f7f8 ff47 	bl	8000b78 <__addsf3>
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	4619      	mov	r1, r3
 8007cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf0:	f7f8 ff42 	bl	8000b78 <__addsf3>
 8007cf4:	68e6      	ldr	r6, [r4, #12]
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	f7f8 ff3e 	bl	8000b78 <__addsf3>
 8007cfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d00:	4659      	mov	r1, fp
 8007d02:	f7f8 ff39 	bl	8000b78 <__addsf3>
 8007d06:	6963      	ldr	r3, [r4, #20]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f7f8 ff34 	bl	8000b78 <__addsf3>
 8007d10:	69a2      	ldr	r2, [r4, #24]
 8007d12:	4611      	mov	r1, r2
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	f7f8 ff2f 	bl	8000b78 <__addsf3>
 8007d1a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8007d1e:	4661      	mov	r1, ip
 8007d20:	f8cd c008 	str.w	ip, [sp, #8]
 8007d24:	f7f8 ff28 	bl	8000b78 <__addsf3>
 8007d28:	f8d4 e020 	ldr.w	lr, [r4, #32]
 8007d2c:	4671      	mov	r1, lr
 8007d2e:	f8cd e00c 	str.w	lr, [sp, #12]
 8007d32:	f7f8 ff21 	bl	8000b78 <__addsf3>
 8007d36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d38:	4619      	mov	r1, r3
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	f7f8 ff1c 	bl	8000b78 <__addsf3>
 8007d40:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007d42:	4611      	mov	r1, r2
 8007d44:	9205      	str	r2, [sp, #20]
 8007d46:	f7f8 ff17 	bl	8000b78 <__addsf3>
 8007d4a:	f8d4 c02c 	ldr.w	ip, [r4, #44]	@ 0x2c
 8007d4e:	4661      	mov	r1, ip
 8007d50:	f8cd c018 	str.w	ip, [sp, #24]
 8007d54:	f7f8 ff10 	bl	8000b78 <__addsf3>
 8007d58:	f8d4 e030 	ldr.w	lr, [r4, #48]	@ 0x30
 8007d5c:	4671      	mov	r1, lr
 8007d5e:	f8cd e01c 	str.w	lr, [sp, #28]
 8007d62:	f7f8 ff09 	bl	8000b78 <__addsf3>
 8007d66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d68:	4619      	mov	r1, r3
 8007d6a:	9308      	str	r3, [sp, #32]
 8007d6c:	f7f8 ff04 	bl	8000b78 <__addsf3>
 8007d70:	4641      	mov	r1, r8
 8007d72:	f7f8 ff01 	bl	8000b78 <__addsf3>
 8007d76:	4601      	mov	r1, r0
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7f8 fefd 	bl	8000b78 <__addsf3>
 8007d7e:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8007d82:	f7f9 f801 	bl	8000d88 <__aeabi_fmul>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	461d      	mov	r5, r3
 8007d8e:	f7f8 fef1 	bl	8000b74 <__aeabi_fsub>
 8007d92:	4601      	mov	r1, r0
 8007d94:	f7f8 fff8 	bl	8000d88 <__aeabi_fmul>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	469a      	mov	sl, r3
 8007da0:	f7f8 fee8 	bl	8000b74 <__aeabi_fsub>
 8007da4:	4601      	mov	r1, r0
 8007da6:	f7f8 ffef 	bl	8000d88 <__aeabi_fmul>
 8007daa:	4651      	mov	r1, sl
 8007dac:	f7f8 fee4 	bl	8000b78 <__addsf3>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4682      	mov	sl, r0
 8007db4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007db6:	f7f8 fedd 	bl	8000b74 <__aeabi_fsub>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	f7f8 ffe4 	bl	8000d88 <__aeabi_fmul>
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	f7f8 fed9 	bl	8000b78 <__addsf3>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4682      	mov	sl, r0
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7f8 fed2 	bl	8000b74 <__aeabi_fsub>
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	f7f8 ffd9 	bl	8000d88 <__aeabi_fmul>
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	f7f8 fece 	bl	8000b78 <__addsf3>
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4682      	mov	sl, r0
 8007de0:	4658      	mov	r0, fp
 8007de2:	f7f8 fec7 	bl	8000b74 <__aeabi_fsub>
 8007de6:	4601      	mov	r1, r0
 8007de8:	f7f8 ffce 	bl	8000d88 <__aeabi_fmul>
 8007dec:	4651      	mov	r1, sl
 8007dee:	f7f8 fec3 	bl	8000b78 <__addsf3>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4682      	mov	sl, r0
 8007df6:	9800      	ldr	r0, [sp, #0]
 8007df8:	f7f8 febc 	bl	8000b74 <__aeabi_fsub>
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	f7f8 ffc3 	bl	8000d88 <__aeabi_fmul>
 8007e02:	4651      	mov	r1, sl
 8007e04:	f7f8 feb8 	bl	8000b78 <__addsf3>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4682      	mov	sl, r0
 8007e0c:	9801      	ldr	r0, [sp, #4]
 8007e0e:	f7f8 feb1 	bl	8000b74 <__aeabi_fsub>
 8007e12:	4601      	mov	r1, r0
 8007e14:	f7f8 ffb8 	bl	8000d88 <__aeabi_fmul>
 8007e18:	4651      	mov	r1, sl
 8007e1a:	f7f8 fead 	bl	8000b78 <__addsf3>
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4682      	mov	sl, r0
 8007e22:	9802      	ldr	r0, [sp, #8]
 8007e24:	f7f8 fea6 	bl	8000b74 <__aeabi_fsub>
 8007e28:	4601      	mov	r1, r0
 8007e2a:	f7f8 ffad 	bl	8000d88 <__aeabi_fmul>
 8007e2e:	4651      	mov	r1, sl
 8007e30:	f7f8 fea2 	bl	8000b78 <__addsf3>
 8007e34:	4629      	mov	r1, r5
 8007e36:	4682      	mov	sl, r0
 8007e38:	9803      	ldr	r0, [sp, #12]
 8007e3a:	f7f8 fe9b 	bl	8000b74 <__aeabi_fsub>
 8007e3e:	4601      	mov	r1, r0
 8007e40:	f7f8 ffa2 	bl	8000d88 <__aeabi_fmul>
 8007e44:	4651      	mov	r1, sl
 8007e46:	f7f8 fe97 	bl	8000b78 <__addsf3>
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4682      	mov	sl, r0
 8007e4e:	9804      	ldr	r0, [sp, #16]
 8007e50:	f7f8 fe90 	bl	8000b74 <__aeabi_fsub>
 8007e54:	4601      	mov	r1, r0
 8007e56:	f7f8 ff97 	bl	8000d88 <__aeabi_fmul>
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	f7f8 fe8c 	bl	8000b78 <__addsf3>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4682      	mov	sl, r0
 8007e64:	9805      	ldr	r0, [sp, #20]
 8007e66:	f7f8 fe85 	bl	8000b74 <__aeabi_fsub>
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	f7f8 ff8c 	bl	8000d88 <__aeabi_fmul>
 8007e70:	4651      	mov	r1, sl
 8007e72:	f7f8 fe81 	bl	8000b78 <__addsf3>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4682      	mov	sl, r0
 8007e7a:	9806      	ldr	r0, [sp, #24]
 8007e7c:	f7f8 fe7a 	bl	8000b74 <__aeabi_fsub>
 8007e80:	4601      	mov	r1, r0
 8007e82:	f7f8 ff81 	bl	8000d88 <__aeabi_fmul>
 8007e86:	4651      	mov	r1, sl
 8007e88:	f7f8 fe76 	bl	8000b78 <__addsf3>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4682      	mov	sl, r0
 8007e90:	9807      	ldr	r0, [sp, #28]
 8007e92:	f7f8 fe6f 	bl	8000b74 <__aeabi_fsub>
 8007e96:	4601      	mov	r1, r0
 8007e98:	f7f8 ff76 	bl	8000d88 <__aeabi_fmul>
 8007e9c:	4651      	mov	r1, sl
 8007e9e:	f7f8 fe6b 	bl	8000b78 <__addsf3>
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	9808      	ldr	r0, [sp, #32]
 8007ea8:	f7f8 fe64 	bl	8000b74 <__aeabi_fsub>
 8007eac:	4601      	mov	r1, r0
 8007eae:	f7f8 ff6b 	bl	8000d88 <__aeabi_fmul>
 8007eb2:	4651      	mov	r1, sl
 8007eb4:	f7f8 fe60 	bl	8000b78 <__addsf3>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4682      	mov	sl, r0
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	f7f8 fe59 	bl	8000b74 <__aeabi_fsub>
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	f7f8 ff60 	bl	8000d88 <__aeabi_fmul>
 8007ec8:	4651      	mov	r1, sl
 8007eca:	f7f8 fe55 	bl	8000b78 <__addsf3>
 8007ece:	4629      	mov	r1, r5
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f7f8 fe4e 	bl	8000b74 <__aeabi_fsub>
 8007ed8:	4601      	mov	r1, r0
 8007eda:	f7f8 ff55 	bl	8000d88 <__aeabi_fmul>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fe4a 	bl	8000b78 <__addsf3>
 8007ee4:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8007ee8:	f7f8 ff4e 	bl	8000d88 <__aeabi_fmul>
 8007eec:	f8c9 0004 	str.w	r0, [r9, #4]
 8007ef0:	6825      	ldr	r5, [r4, #0]
 8007ef2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	4651      	mov	r1, sl
 8007efa:	f7f8 fe3d 	bl	8000b78 <__addsf3>
 8007efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f00:	f7f8 fe3a 	bl	8000b78 <__addsf3>
 8007f04:	4631      	mov	r1, r6
 8007f06:	f7f8 fe37 	bl	8000b78 <__addsf3>
 8007f0a:	4659      	mov	r1, fp
 8007f0c:	f7f8 fe34 	bl	8000b78 <__addsf3>
 8007f10:	9900      	ldr	r1, [sp, #0]
 8007f12:	f7f8 fe31 	bl	8000b78 <__addsf3>
 8007f16:	9901      	ldr	r1, [sp, #4]
 8007f18:	f7f8 fe2e 	bl	8000b78 <__addsf3>
 8007f1c:	9902      	ldr	r1, [sp, #8]
 8007f1e:	f7f8 fe2b 	bl	8000b78 <__addsf3>
 8007f22:	9903      	ldr	r1, [sp, #12]
 8007f24:	f7f8 fe28 	bl	8000b78 <__addsf3>
 8007f28:	9904      	ldr	r1, [sp, #16]
 8007f2a:	f7f8 fe25 	bl	8000b78 <__addsf3>
 8007f2e:	9905      	ldr	r1, [sp, #20]
 8007f30:	f7f8 fe22 	bl	8000b78 <__addsf3>
 8007f34:	9906      	ldr	r1, [sp, #24]
 8007f36:	f7f8 fe1f 	bl	8000b78 <__addsf3>
 8007f3a:	9907      	ldr	r1, [sp, #28]
 8007f3c:	f7f8 fe1c 	bl	8000b78 <__addsf3>
 8007f40:	9908      	ldr	r1, [sp, #32]
 8007f42:	f7f8 fe19 	bl	8000b78 <__addsf3>
 8007f46:	4641      	mov	r1, r8
 8007f48:	f7f8 fe16 	bl	8000b78 <__addsf3>
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7f8 fe12 	bl	8000b78 <__addsf3>
 8007f54:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8007f58:	f7f8 ff16 	bl	8000d88 <__aeabi_fmul>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	4619      	mov	r1, r3
 8007f62:	461d      	mov	r5, r3
 8007f64:	f7f8 fe06 	bl	8000b74 <__aeabi_fsub>
 8007f68:	4601      	mov	r1, r0
 8007f6a:	f7f8 ff0d 	bl	8000d88 <__aeabi_fmul>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4629      	mov	r1, r5
 8007f72:	4650      	mov	r0, sl
 8007f74:	469a      	mov	sl, r3
 8007f76:	f7f8 fdfd 	bl	8000b74 <__aeabi_fsub>
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	f7f8 ff04 	bl	8000d88 <__aeabi_fmul>
 8007f80:	4651      	mov	r1, sl
 8007f82:	f7f8 fdf9 	bl	8000b78 <__addsf3>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4682      	mov	sl, r0
 8007f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f8c:	f7f8 fdf2 	bl	8000b74 <__aeabi_fsub>
 8007f90:	4601      	mov	r1, r0
 8007f92:	f7f8 fef9 	bl	8000d88 <__aeabi_fmul>
 8007f96:	4651      	mov	r1, sl
 8007f98:	f7f8 fdee 	bl	8000b78 <__addsf3>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7f8 fde7 	bl	8000b74 <__aeabi_fsub>
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	f7f8 feee 	bl	8000d88 <__aeabi_fmul>
 8007fac:	4651      	mov	r1, sl
 8007fae:	f7f8 fde3 	bl	8000b78 <__addsf3>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	4658      	mov	r0, fp
 8007fb8:	f7f8 fddc 	bl	8000b74 <__aeabi_fsub>
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	f7f8 fee3 	bl	8000d88 <__aeabi_fmul>
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	f7f8 fdd8 	bl	8000b78 <__addsf3>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4682      	mov	sl, r0
 8007fcc:	9800      	ldr	r0, [sp, #0]
 8007fce:	f7f8 fdd1 	bl	8000b74 <__aeabi_fsub>
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	f7f8 fed8 	bl	8000d88 <__aeabi_fmul>
 8007fd8:	4651      	mov	r1, sl
 8007fda:	f7f8 fdcd 	bl	8000b78 <__addsf3>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	9801      	ldr	r0, [sp, #4]
 8007fe4:	f7f8 fdc6 	bl	8000b74 <__aeabi_fsub>
 8007fe8:	4601      	mov	r1, r0
 8007fea:	f7f8 fecd 	bl	8000d88 <__aeabi_fmul>
 8007fee:	4651      	mov	r1, sl
 8007ff0:	f7f8 fdc2 	bl	8000b78 <__addsf3>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	9802      	ldr	r0, [sp, #8]
 8007ffa:	f7f8 fdbb 	bl	8000b74 <__aeabi_fsub>
 8007ffe:	4601      	mov	r1, r0
 8008000:	f7f8 fec2 	bl	8000d88 <__aeabi_fmul>
 8008004:	4651      	mov	r1, sl
 8008006:	f7f8 fdb7 	bl	8000b78 <__addsf3>
 800800a:	4629      	mov	r1, r5
 800800c:	4682      	mov	sl, r0
 800800e:	9803      	ldr	r0, [sp, #12]
 8008010:	f7f8 fdb0 	bl	8000b74 <__aeabi_fsub>
 8008014:	4601      	mov	r1, r0
 8008016:	f7f8 feb7 	bl	8000d88 <__aeabi_fmul>
 800801a:	4651      	mov	r1, sl
 800801c:	f7f8 fdac 	bl	8000b78 <__addsf3>
 8008020:	4629      	mov	r1, r5
 8008022:	4682      	mov	sl, r0
 8008024:	9804      	ldr	r0, [sp, #16]
 8008026:	f7f8 fda5 	bl	8000b74 <__aeabi_fsub>
 800802a:	4601      	mov	r1, r0
 800802c:	f7f8 feac 	bl	8000d88 <__aeabi_fmul>
 8008030:	4651      	mov	r1, sl
 8008032:	f7f8 fda1 	bl	8000b78 <__addsf3>
 8008036:	4629      	mov	r1, r5
 8008038:	4682      	mov	sl, r0
 800803a:	9805      	ldr	r0, [sp, #20]
 800803c:	f7f8 fd9a 	bl	8000b74 <__aeabi_fsub>
 8008040:	4601      	mov	r1, r0
 8008042:	f7f8 fea1 	bl	8000d88 <__aeabi_fmul>
 8008046:	4651      	mov	r1, sl
 8008048:	f7f8 fd96 	bl	8000b78 <__addsf3>
 800804c:	4629      	mov	r1, r5
 800804e:	4682      	mov	sl, r0
 8008050:	9806      	ldr	r0, [sp, #24]
 8008052:	f7f8 fd8f 	bl	8000b74 <__aeabi_fsub>
 8008056:	4601      	mov	r1, r0
 8008058:	f7f8 fe96 	bl	8000d88 <__aeabi_fmul>
 800805c:	4651      	mov	r1, sl
 800805e:	f7f8 fd8b 	bl	8000b78 <__addsf3>
 8008062:	4629      	mov	r1, r5
 8008064:	4682      	mov	sl, r0
 8008066:	9807      	ldr	r0, [sp, #28]
 8008068:	f7f8 fd84 	bl	8000b74 <__aeabi_fsub>
 800806c:	4601      	mov	r1, r0
 800806e:	f7f8 fe8b 	bl	8000d88 <__aeabi_fmul>
 8008072:	4651      	mov	r1, sl
 8008074:	f7f8 fd80 	bl	8000b78 <__addsf3>
 8008078:	4629      	mov	r1, r5
 800807a:	4682      	mov	sl, r0
 800807c:	9808      	ldr	r0, [sp, #32]
 800807e:	f7f8 fd79 	bl	8000b74 <__aeabi_fsub>
 8008082:	4601      	mov	r1, r0
 8008084:	f7f8 fe80 	bl	8000d88 <__aeabi_fmul>
 8008088:	4651      	mov	r1, sl
 800808a:	f7f8 fd75 	bl	8000b78 <__addsf3>
 800808e:	4629      	mov	r1, r5
 8008090:	4682      	mov	sl, r0
 8008092:	4640      	mov	r0, r8
 8008094:	f7f8 fd6e 	bl	8000b74 <__aeabi_fsub>
 8008098:	4601      	mov	r1, r0
 800809a:	f7f8 fe75 	bl	8000d88 <__aeabi_fmul>
 800809e:	4651      	mov	r1, sl
 80080a0:	f7f8 fd6a 	bl	8000b78 <__addsf3>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4605      	mov	r5, r0
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7f8 fd63 	bl	8000b74 <__aeabi_fsub>
 80080ae:	4601      	mov	r1, r0
 80080b0:	f7f8 fe6a 	bl	8000d88 <__aeabi_fmul>
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 fd5f 	bl	8000b78 <__addsf3>
 80080ba:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80080be:	f7f8 fe63 	bl	8000d88 <__aeabi_fmul>
 80080c2:	f005 fd0b 	bl	800dadc <sqrtf>
 80080c6:	f8c9 0008 	str.w	r0, [r9, #8]
 80080ca:	6825      	ldr	r5, [r4, #0]
 80080cc:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80080d0:	4628      	mov	r0, r5
 80080d2:	4651      	mov	r1, sl
 80080d4:	f7f8 fd50 	bl	8000b78 <__addsf3>
 80080d8:	68a2      	ldr	r2, [r4, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80080de:	f7f8 fd4b 	bl	8000b78 <__addsf3>
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7f8 fd48 	bl	8000b78 <__addsf3>
 80080e8:	4659      	mov	r1, fp
 80080ea:	f7f8 fd45 	bl	8000b78 <__addsf3>
 80080ee:	9900      	ldr	r1, [sp, #0]
 80080f0:	f7f8 fd42 	bl	8000b78 <__addsf3>
 80080f4:	9901      	ldr	r1, [sp, #4]
 80080f6:	f7f8 fd3f 	bl	8000b78 <__addsf3>
 80080fa:	9902      	ldr	r1, [sp, #8]
 80080fc:	f7f8 fd3c 	bl	8000b78 <__addsf3>
 8008100:	9903      	ldr	r1, [sp, #12]
 8008102:	f7f8 fd39 	bl	8000b78 <__addsf3>
 8008106:	9904      	ldr	r1, [sp, #16]
 8008108:	f7f8 fd36 	bl	8000b78 <__addsf3>
 800810c:	9905      	ldr	r1, [sp, #20]
 800810e:	f7f8 fd33 	bl	8000b78 <__addsf3>
 8008112:	9906      	ldr	r1, [sp, #24]
 8008114:	f7f8 fd30 	bl	8000b78 <__addsf3>
 8008118:	9907      	ldr	r1, [sp, #28]
 800811a:	f7f8 fd2d 	bl	8000b78 <__addsf3>
 800811e:	9908      	ldr	r1, [sp, #32]
 8008120:	f7f8 fd2a 	bl	8000b78 <__addsf3>
 8008124:	4641      	mov	r1, r8
 8008126:	f7f8 fd27 	bl	8000b78 <__addsf3>
 800812a:	4601      	mov	r1, r0
 800812c:	4638      	mov	r0, r7
 800812e:	f7f8 fd23 	bl	8000b78 <__addsf3>
 8008132:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008136:	f7f8 fe27 	bl	8000d88 <__aeabi_fmul>
 800813a:	4603      	mov	r3, r0
 800813c:	4628      	mov	r0, r5
 800813e:	4619      	mov	r1, r3
 8008140:	461d      	mov	r5, r3
 8008142:	f7f8 fd17 	bl	8000b74 <__aeabi_fsub>
 8008146:	4601      	mov	r1, r0
 8008148:	900a      	str	r0, [sp, #40]	@ 0x28
 800814a:	f7f8 fe1d 	bl	8000d88 <__aeabi_fmul>
 800814e:	4603      	mov	r3, r0
 8008150:	4629      	mov	r1, r5
 8008152:	4650      	mov	r0, sl
 8008154:	469a      	mov	sl, r3
 8008156:	f7f8 fd0d 	bl	8000b74 <__aeabi_fsub>
 800815a:	4601      	mov	r1, r0
 800815c:	900d      	str	r0, [sp, #52]	@ 0x34
 800815e:	f7f8 fe13 	bl	8000d88 <__aeabi_fmul>
 8008162:	4603      	mov	r3, r0
 8008164:	4650      	mov	r0, sl
 8008166:	4619      	mov	r1, r3
 8008168:	931e      	str	r3, [sp, #120]	@ 0x78
 800816a:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800816e:	f7f8 fd03 	bl	8000b78 <__addsf3>
 8008172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008174:	4682      	mov	sl, r0
 8008176:	4629      	mov	r1, r5
 8008178:	4610      	mov	r0, r2
 800817a:	f7f8 fcfb 	bl	8000b74 <__aeabi_fsub>
 800817e:	4601      	mov	r1, r0
 8008180:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008182:	f7f8 fe01 	bl	8000d88 <__aeabi_fmul>
 8008186:	4602      	mov	r2, r0
 8008188:	4650      	mov	r0, sl
 800818a:	4611      	mov	r1, r2
 800818c:	4692      	mov	sl, r2
 800818e:	f7f8 fcf3 	bl	8000b78 <__addsf3>
 8008192:	4602      	mov	r2, r0
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	4616      	mov	r6, r2
 800819a:	f7f8 fceb 	bl	8000b74 <__aeabi_fsub>
 800819e:	4601      	mov	r1, r0
 80081a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80081a2:	f7f8 fdf1 	bl	8000d88 <__aeabi_fmul>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4630      	mov	r0, r6
 80081aa:	4611      	mov	r1, r2
 80081ac:	921d      	str	r2, [sp, #116]	@ 0x74
 80081ae:	f7f8 fce3 	bl	8000b78 <__addsf3>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4606      	mov	r6, r0
 80081b6:	4658      	mov	r0, fp
 80081b8:	f7f8 fcdc 	bl	8000b74 <__aeabi_fsub>
 80081bc:	4601      	mov	r1, r0
 80081be:	9011      	str	r0, [sp, #68]	@ 0x44
 80081c0:	f7f8 fde2 	bl	8000d88 <__aeabi_fmul>
 80081c4:	4683      	mov	fp, r0
 80081c6:	4630      	mov	r0, r6
 80081c8:	4659      	mov	r1, fp
 80081ca:	f7f8 fcd5 	bl	8000b78 <__addsf3>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4606      	mov	r6, r0
 80081d2:	9800      	ldr	r0, [sp, #0]
 80081d4:	f7f8 fcce 	bl	8000b74 <__aeabi_fsub>
 80081d8:	4601      	mov	r1, r0
 80081da:	9000      	str	r0, [sp, #0]
 80081dc:	f7f8 fdd4 	bl	8000d88 <__aeabi_fmul>
 80081e0:	4601      	mov	r1, r0
 80081e2:	4630      	mov	r0, r6
 80081e4:	9112      	str	r1, [sp, #72]	@ 0x48
 80081e6:	f7f8 fcc7 	bl	8000b78 <__addsf3>
 80081ea:	4629      	mov	r1, r5
 80081ec:	4606      	mov	r6, r0
 80081ee:	9801      	ldr	r0, [sp, #4]
 80081f0:	f7f8 fcc0 	bl	8000b74 <__aeabi_fsub>
 80081f4:	4601      	mov	r1, r0
 80081f6:	9001      	str	r0, [sp, #4]
 80081f8:	f7f8 fdc6 	bl	8000d88 <__aeabi_fmul>
 80081fc:	4601      	mov	r1, r0
 80081fe:	4630      	mov	r0, r6
 8008200:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008202:	f7f8 fcb9 	bl	8000b78 <__addsf3>
 8008206:	4629      	mov	r1, r5
 8008208:	4606      	mov	r6, r0
 800820a:	9802      	ldr	r0, [sp, #8]
 800820c:	f7f8 fcb2 	bl	8000b74 <__aeabi_fsub>
 8008210:	4601      	mov	r1, r0
 8008212:	9002      	str	r0, [sp, #8]
 8008214:	f7f8 fdb8 	bl	8000d88 <__aeabi_fmul>
 8008218:	4601      	mov	r1, r0
 800821a:	4630      	mov	r0, r6
 800821c:	9114      	str	r1, [sp, #80]	@ 0x50
 800821e:	f7f8 fcab 	bl	8000b78 <__addsf3>
 8008222:	4629      	mov	r1, r5
 8008224:	4606      	mov	r6, r0
 8008226:	9803      	ldr	r0, [sp, #12]
 8008228:	f7f8 fca4 	bl	8000b74 <__aeabi_fsub>
 800822c:	4601      	mov	r1, r0
 800822e:	9003      	str	r0, [sp, #12]
 8008230:	f7f8 fdaa 	bl	8000d88 <__aeabi_fmul>
 8008234:	4601      	mov	r1, r0
 8008236:	4630      	mov	r0, r6
 8008238:	9115      	str	r1, [sp, #84]	@ 0x54
 800823a:	f7f8 fc9d 	bl	8000b78 <__addsf3>
 800823e:	4629      	mov	r1, r5
 8008240:	4606      	mov	r6, r0
 8008242:	9804      	ldr	r0, [sp, #16]
 8008244:	f7f8 fc96 	bl	8000b74 <__aeabi_fsub>
 8008248:	4601      	mov	r1, r0
 800824a:	9004      	str	r0, [sp, #16]
 800824c:	f7f8 fd9c 	bl	8000d88 <__aeabi_fmul>
 8008250:	4601      	mov	r1, r0
 8008252:	4630      	mov	r0, r6
 8008254:	9116      	str	r1, [sp, #88]	@ 0x58
 8008256:	f7f8 fc8f 	bl	8000b78 <__addsf3>
 800825a:	4629      	mov	r1, r5
 800825c:	4606      	mov	r6, r0
 800825e:	9805      	ldr	r0, [sp, #20]
 8008260:	f7f8 fc88 	bl	8000b74 <__aeabi_fsub>
 8008264:	4601      	mov	r1, r0
 8008266:	9005      	str	r0, [sp, #20]
 8008268:	f7f8 fd8e 	bl	8000d88 <__aeabi_fmul>
 800826c:	4601      	mov	r1, r0
 800826e:	4630      	mov	r0, r6
 8008270:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008272:	f7f8 fc81 	bl	8000b78 <__addsf3>
 8008276:	4629      	mov	r1, r5
 8008278:	4606      	mov	r6, r0
 800827a:	9806      	ldr	r0, [sp, #24]
 800827c:	f7f8 fc7a 	bl	8000b74 <__aeabi_fsub>
 8008280:	4601      	mov	r1, r0
 8008282:	9006      	str	r0, [sp, #24]
 8008284:	f7f8 fd80 	bl	8000d88 <__aeabi_fmul>
 8008288:	4601      	mov	r1, r0
 800828a:	4630      	mov	r0, r6
 800828c:	9118      	str	r1, [sp, #96]	@ 0x60
 800828e:	f7f8 fc73 	bl	8000b78 <__addsf3>
 8008292:	4629      	mov	r1, r5
 8008294:	4606      	mov	r6, r0
 8008296:	9807      	ldr	r0, [sp, #28]
 8008298:	f7f8 fc6c 	bl	8000b74 <__aeabi_fsub>
 800829c:	4601      	mov	r1, r0
 800829e:	9007      	str	r0, [sp, #28]
 80082a0:	f7f8 fd72 	bl	8000d88 <__aeabi_fmul>
 80082a4:	4601      	mov	r1, r0
 80082a6:	4630      	mov	r0, r6
 80082a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80082aa:	f7f8 fc65 	bl	8000b78 <__addsf3>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4606      	mov	r6, r0
 80082b2:	9808      	ldr	r0, [sp, #32]
 80082b4:	f7f8 fc5e 	bl	8000b74 <__aeabi_fsub>
 80082b8:	4601      	mov	r1, r0
 80082ba:	9008      	str	r0, [sp, #32]
 80082bc:	f7f8 fd64 	bl	8000d88 <__aeabi_fmul>
 80082c0:	4601      	mov	r1, r0
 80082c2:	4630      	mov	r0, r6
 80082c4:	911a      	str	r1, [sp, #104]	@ 0x68
 80082c6:	f7f8 fc57 	bl	8000b78 <__addsf3>
 80082ca:	4629      	mov	r1, r5
 80082cc:	4606      	mov	r6, r0
 80082ce:	4640      	mov	r0, r8
 80082d0:	f7f8 fc50 	bl	8000b74 <__aeabi_fsub>
 80082d4:	4601      	mov	r1, r0
 80082d6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80082d8:	f7f8 fd56 	bl	8000d88 <__aeabi_fmul>
 80082dc:	4680      	mov	r8, r0
 80082de:	4630      	mov	r0, r6
 80082e0:	4641      	mov	r1, r8
 80082e2:	f7f8 fc49 	bl	8000b78 <__addsf3>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4606      	mov	r6, r0
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7f8 fc42 	bl	8000b74 <__aeabi_fsub>
 80082f0:	4601      	mov	r1, r0
 80082f2:	4607      	mov	r7, r0
 80082f4:	f7f8 fd48 	bl	8000d88 <__aeabi_fmul>
 80082f8:	4631      	mov	r1, r6
 80082fa:	901c      	str	r0, [sp, #112]	@ 0x70
 80082fc:	f7f8 fc3c 	bl	8000b78 <__addsf3>
 8008300:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008304:	f7f8 fd40 	bl	8000d88 <__aeabi_fmul>
 8008308:	f005 fbe8 	bl	800dadc <sqrtf>
 800830c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800830e:	4605      	mov	r5, r0
 8008310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008312:	f7f8 fd39 	bl	8000d88 <__aeabi_fmul>
 8008316:	4606      	mov	r6, r0
 8008318:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800831a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800831c:	4619      	mov	r1, r3
 800831e:	f7f8 fd33 	bl	8000d88 <__aeabi_fmul>
 8008322:	4631      	mov	r1, r6
 8008324:	f7f8 fc28 	bl	8000b78 <__addsf3>
 8008328:	4606      	mov	r6, r0
 800832a:	4651      	mov	r1, sl
 800832c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800832e:	f7f8 fd2b 	bl	8000d88 <__aeabi_fmul>
 8008332:	4631      	mov	r1, r6
 8008334:	f7f8 fc20 	bl	8000b78 <__addsf3>
 8008338:	4606      	mov	r6, r0
 800833a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800833c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800833e:	4611      	mov	r1, r2
 8008340:	f7f8 fd22 	bl	8000d88 <__aeabi_fmul>
 8008344:	4631      	mov	r1, r6
 8008346:	f7f8 fc17 	bl	8000b78 <__addsf3>
 800834a:	4606      	mov	r6, r0
 800834c:	4659      	mov	r1, fp
 800834e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008350:	f7f8 fd1a 	bl	8000d88 <__aeabi_fmul>
 8008354:	4631      	mov	r1, r6
 8008356:	f7f8 fc0f 	bl	8000b78 <__addsf3>
 800835a:	4606      	mov	r6, r0
 800835c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800835e:	9800      	ldr	r0, [sp, #0]
 8008360:	f7f8 fd12 	bl	8000d88 <__aeabi_fmul>
 8008364:	4631      	mov	r1, r6
 8008366:	f7f8 fc07 	bl	8000b78 <__addsf3>
 800836a:	4606      	mov	r6, r0
 800836c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800836e:	9801      	ldr	r0, [sp, #4]
 8008370:	f7f8 fd0a 	bl	8000d88 <__aeabi_fmul>
 8008374:	4631      	mov	r1, r6
 8008376:	f7f8 fbff 	bl	8000b78 <__addsf3>
 800837a:	4606      	mov	r6, r0
 800837c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800837e:	9802      	ldr	r0, [sp, #8]
 8008380:	f7f8 fd02 	bl	8000d88 <__aeabi_fmul>
 8008384:	4631      	mov	r1, r6
 8008386:	f7f8 fbf7 	bl	8000b78 <__addsf3>
 800838a:	4606      	mov	r6, r0
 800838c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800838e:	9803      	ldr	r0, [sp, #12]
 8008390:	f7f8 fcfa 	bl	8000d88 <__aeabi_fmul>
 8008394:	4631      	mov	r1, r6
 8008396:	f7f8 fbef 	bl	8000b78 <__addsf3>
 800839a:	4606      	mov	r6, r0
 800839c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800839e:	9804      	ldr	r0, [sp, #16]
 80083a0:	f7f8 fcf2 	bl	8000d88 <__aeabi_fmul>
 80083a4:	4631      	mov	r1, r6
 80083a6:	f7f8 fbe7 	bl	8000b78 <__addsf3>
 80083aa:	4606      	mov	r6, r0
 80083ac:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80083ae:	9805      	ldr	r0, [sp, #20]
 80083b0:	f7f8 fcea 	bl	8000d88 <__aeabi_fmul>
 80083b4:	4631      	mov	r1, r6
 80083b6:	f7f8 fbdf 	bl	8000b78 <__addsf3>
 80083ba:	4606      	mov	r6, r0
 80083bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80083be:	9806      	ldr	r0, [sp, #24]
 80083c0:	f7f8 fce2 	bl	8000d88 <__aeabi_fmul>
 80083c4:	4631      	mov	r1, r6
 80083c6:	f7f8 fbd7 	bl	8000b78 <__addsf3>
 80083ca:	4606      	mov	r6, r0
 80083cc:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80083ce:	9807      	ldr	r0, [sp, #28]
 80083d0:	f7f8 fcda 	bl	8000d88 <__aeabi_fmul>
 80083d4:	4631      	mov	r1, r6
 80083d6:	f7f8 fbcf 	bl	8000b78 <__addsf3>
 80083da:	4606      	mov	r6, r0
 80083dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083de:	9808      	ldr	r0, [sp, #32]
 80083e0:	f7f8 fcd2 	bl	8000d88 <__aeabi_fmul>
 80083e4:	4631      	mov	r1, r6
 80083e6:	f7f8 fbc7 	bl	8000b78 <__addsf3>
 80083ea:	4606      	mov	r6, r0
 80083ec:	4641      	mov	r1, r8
 80083ee:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80083f0:	f7f8 fcca 	bl	8000d88 <__aeabi_fmul>
 80083f4:	4631      	mov	r1, r6
 80083f6:	f7f8 fbbf 	bl	8000b78 <__addsf3>
 80083fa:	4606      	mov	r6, r0
 80083fc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80083fe:	4638      	mov	r0, r7
 8008400:	f7f8 fcc2 	bl	8000d88 <__aeabi_fmul>
 8008404:	4631      	mov	r1, r6
 8008406:	f7f8 fbb7 	bl	8000b78 <__addsf3>
 800840a:	4629      	mov	r1, r5
 800840c:	4606      	mov	r6, r0
 800840e:	4628      	mov	r0, r5
 8008410:	f7f8 fcba 	bl	8000d88 <__aeabi_fmul>
 8008414:	4629      	mov	r1, r5
 8008416:	f7f8 fcb7 	bl	8000d88 <__aeabi_fmul>
 800841a:	4601      	mov	r1, r0
 800841c:	4630      	mov	r0, r6
 800841e:	f7f8 fd67 	bl	8000ef0 <__aeabi_fdiv>
 8008422:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008426:	f7f8 fcaf 	bl	8000d88 <__aeabi_fmul>
 800842a:	f8c9 0064 	str.w	r0, [r9, #100]	@ 0x64
 800842e:	6827      	ldr	r7, [r4, #0]
 8008430:	6866      	ldr	r6, [r4, #4]
 8008432:	4638      	mov	r0, r7
 8008434:	4631      	mov	r1, r6
 8008436:	f7f8 fb9f 	bl	8000b78 <__addsf3>
 800843a:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800843e:	4651      	mov	r1, sl
 8008440:	f7f8 fb9a 	bl	8000b78 <__addsf3>
 8008444:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8008448:	4659      	mov	r1, fp
 800844a:	f7f8 fb95 	bl	8000b78 <__addsf3>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	4619      	mov	r1, r3
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	f7f8 fb90 	bl	8000b78 <__addsf3>
 8008458:	6963      	ldr	r3, [r4, #20]
 800845a:	4619      	mov	r1, r3
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f7f8 fb8b 	bl	8000b78 <__addsf3>
 8008462:	69a3      	ldr	r3, [r4, #24]
 8008464:	4619      	mov	r1, r3
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	f7f8 fb86 	bl	8000b78 <__addsf3>
 800846c:	69e3      	ldr	r3, [r4, #28]
 800846e:	4619      	mov	r1, r3
 8008470:	9303      	str	r3, [sp, #12]
 8008472:	f7f8 fb81 	bl	8000b78 <__addsf3>
 8008476:	6a23      	ldr	r3, [r4, #32]
 8008478:	4619      	mov	r1, r3
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	f7f8 fb7c 	bl	8000b78 <__addsf3>
 8008480:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008482:	4619      	mov	r1, r3
 8008484:	9305      	str	r3, [sp, #20]
 8008486:	f7f8 fb77 	bl	8000b78 <__addsf3>
 800848a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800848c:	4619      	mov	r1, r3
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	f7f8 fb72 	bl	8000b78 <__addsf3>
 8008494:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008496:	4619      	mov	r1, r3
 8008498:	9307      	str	r3, [sp, #28]
 800849a:	f7f8 fb6d 	bl	8000b78 <__addsf3>
 800849e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80084a0:	4619      	mov	r1, r3
 80084a2:	9308      	str	r3, [sp, #32]
 80084a4:	f7f8 fb68 	bl	8000b78 <__addsf3>
 80084a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084aa:	4619      	mov	r1, r3
 80084ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ae:	f7f8 fb63 	bl	8000b78 <__addsf3>
 80084b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084b4:	4619      	mov	r1, r3
 80084b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b8:	f7f8 fb5e 	bl	8000b78 <__addsf3>
 80084bc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80084be:	4601      	mov	r1, r0
 80084c0:	4610      	mov	r0, r2
 80084c2:	921c      	str	r2, [sp, #112]	@ 0x70
 80084c4:	f7f8 fb58 	bl	8000b78 <__addsf3>
 80084c8:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80084cc:	f7f8 fc5c 	bl	8000d88 <__aeabi_fmul>
 80084d0:	4605      	mov	r5, r0
 80084d2:	4638      	mov	r0, r7
 80084d4:	4629      	mov	r1, r5
 80084d6:	f7f8 fb4d 	bl	8000b74 <__aeabi_fsub>
 80084da:	4601      	mov	r1, r0
 80084dc:	4607      	mov	r7, r0
 80084de:	f7f8 fc53 	bl	8000d88 <__aeabi_fmul>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	4698      	mov	r8, r3
 80084ea:	f7f8 fb43 	bl	8000b74 <__aeabi_fsub>
 80084ee:	4601      	mov	r1, r0
 80084f0:	4606      	mov	r6, r0
 80084f2:	f7f8 fc49 	bl	8000d88 <__aeabi_fmul>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4640      	mov	r0, r8
 80084fa:	4619      	mov	r1, r3
 80084fc:	931d      	str	r3, [sp, #116]	@ 0x74
 80084fe:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8008502:	f7f8 fb39 	bl	8000b78 <__addsf3>
 8008506:	4629      	mov	r1, r5
 8008508:	4680      	mov	r8, r0
 800850a:	4650      	mov	r0, sl
 800850c:	f7f8 fb32 	bl	8000b74 <__aeabi_fsub>
 8008510:	4601      	mov	r1, r0
 8008512:	4682      	mov	sl, r0
 8008514:	f7f8 fc38 	bl	8000d88 <__aeabi_fmul>
 8008518:	4601      	mov	r1, r0
 800851a:	4640      	mov	r0, r8
 800851c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800851e:	f7f8 fb2b 	bl	8000b78 <__addsf3>
 8008522:	4629      	mov	r1, r5
 8008524:	4680      	mov	r8, r0
 8008526:	4658      	mov	r0, fp
 8008528:	f7f8 fb24 	bl	8000b74 <__aeabi_fsub>
 800852c:	4601      	mov	r1, r0
 800852e:	4683      	mov	fp, r0
 8008530:	f7f8 fc2a 	bl	8000d88 <__aeabi_fmul>
 8008534:	4601      	mov	r1, r0
 8008536:	4640      	mov	r0, r8
 8008538:	9110      	str	r1, [sp, #64]	@ 0x40
 800853a:	f7f8 fb1d 	bl	8000b78 <__addsf3>
 800853e:	4629      	mov	r1, r5
 8008540:	4680      	mov	r8, r0
 8008542:	9800      	ldr	r0, [sp, #0]
 8008544:	f7f8 fb16 	bl	8000b74 <__aeabi_fsub>
 8008548:	4601      	mov	r1, r0
 800854a:	9000      	str	r0, [sp, #0]
 800854c:	f7f8 fc1c 	bl	8000d88 <__aeabi_fmul>
 8008550:	4601      	mov	r1, r0
 8008552:	4640      	mov	r0, r8
 8008554:	9111      	str	r1, [sp, #68]	@ 0x44
 8008556:	f7f8 fb0f 	bl	8000b78 <__addsf3>
 800855a:	4629      	mov	r1, r5
 800855c:	4680      	mov	r8, r0
 800855e:	9801      	ldr	r0, [sp, #4]
 8008560:	f7f8 fb08 	bl	8000b74 <__aeabi_fsub>
 8008564:	4601      	mov	r1, r0
 8008566:	9001      	str	r0, [sp, #4]
 8008568:	f7f8 fc0e 	bl	8000d88 <__aeabi_fmul>
 800856c:	4601      	mov	r1, r0
 800856e:	4640      	mov	r0, r8
 8008570:	9112      	str	r1, [sp, #72]	@ 0x48
 8008572:	f7f8 fb01 	bl	8000b78 <__addsf3>
 8008576:	4629      	mov	r1, r5
 8008578:	4680      	mov	r8, r0
 800857a:	9802      	ldr	r0, [sp, #8]
 800857c:	f7f8 fafa 	bl	8000b74 <__aeabi_fsub>
 8008580:	4601      	mov	r1, r0
 8008582:	9002      	str	r0, [sp, #8]
 8008584:	f7f8 fc00 	bl	8000d88 <__aeabi_fmul>
 8008588:	4601      	mov	r1, r0
 800858a:	4640      	mov	r0, r8
 800858c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800858e:	f7f8 faf3 	bl	8000b78 <__addsf3>
 8008592:	4629      	mov	r1, r5
 8008594:	4680      	mov	r8, r0
 8008596:	9803      	ldr	r0, [sp, #12]
 8008598:	f7f8 faec 	bl	8000b74 <__aeabi_fsub>
 800859c:	4601      	mov	r1, r0
 800859e:	9003      	str	r0, [sp, #12]
 80085a0:	f7f8 fbf2 	bl	8000d88 <__aeabi_fmul>
 80085a4:	4601      	mov	r1, r0
 80085a6:	4640      	mov	r0, r8
 80085a8:	9114      	str	r1, [sp, #80]	@ 0x50
 80085aa:	f7f8 fae5 	bl	8000b78 <__addsf3>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4680      	mov	r8, r0
 80085b2:	9804      	ldr	r0, [sp, #16]
 80085b4:	f7f8 fade 	bl	8000b74 <__aeabi_fsub>
 80085b8:	4601      	mov	r1, r0
 80085ba:	9004      	str	r0, [sp, #16]
 80085bc:	f7f8 fbe4 	bl	8000d88 <__aeabi_fmul>
 80085c0:	4601      	mov	r1, r0
 80085c2:	4640      	mov	r0, r8
 80085c4:	9115      	str	r1, [sp, #84]	@ 0x54
 80085c6:	f7f8 fad7 	bl	8000b78 <__addsf3>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4680      	mov	r8, r0
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	f7f8 fad0 	bl	8000b74 <__aeabi_fsub>
 80085d4:	4601      	mov	r1, r0
 80085d6:	9005      	str	r0, [sp, #20]
 80085d8:	f7f8 fbd6 	bl	8000d88 <__aeabi_fmul>
 80085dc:	4601      	mov	r1, r0
 80085de:	4640      	mov	r0, r8
 80085e0:	9116      	str	r1, [sp, #88]	@ 0x58
 80085e2:	f7f8 fac9 	bl	8000b78 <__addsf3>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4680      	mov	r8, r0
 80085ea:	9806      	ldr	r0, [sp, #24]
 80085ec:	f7f8 fac2 	bl	8000b74 <__aeabi_fsub>
 80085f0:	4601      	mov	r1, r0
 80085f2:	9006      	str	r0, [sp, #24]
 80085f4:	f7f8 fbc8 	bl	8000d88 <__aeabi_fmul>
 80085f8:	4601      	mov	r1, r0
 80085fa:	4640      	mov	r0, r8
 80085fc:	9117      	str	r1, [sp, #92]	@ 0x5c
 80085fe:	f7f8 fabb 	bl	8000b78 <__addsf3>
 8008602:	4629      	mov	r1, r5
 8008604:	4680      	mov	r8, r0
 8008606:	9807      	ldr	r0, [sp, #28]
 8008608:	f7f8 fab4 	bl	8000b74 <__aeabi_fsub>
 800860c:	4601      	mov	r1, r0
 800860e:	9007      	str	r0, [sp, #28]
 8008610:	f7f8 fbba 	bl	8000d88 <__aeabi_fmul>
 8008614:	4601      	mov	r1, r0
 8008616:	4640      	mov	r0, r8
 8008618:	9118      	str	r1, [sp, #96]	@ 0x60
 800861a:	f7f8 faad 	bl	8000b78 <__addsf3>
 800861e:	4629      	mov	r1, r5
 8008620:	4680      	mov	r8, r0
 8008622:	9808      	ldr	r0, [sp, #32]
 8008624:	f7f8 faa6 	bl	8000b74 <__aeabi_fsub>
 8008628:	4601      	mov	r1, r0
 800862a:	9008      	str	r0, [sp, #32]
 800862c:	f7f8 fbac 	bl	8000d88 <__aeabi_fmul>
 8008630:	4601      	mov	r1, r0
 8008632:	4640      	mov	r0, r8
 8008634:	9119      	str	r1, [sp, #100]	@ 0x64
 8008636:	f7f8 fa9f 	bl	8000b78 <__addsf3>
 800863a:	4629      	mov	r1, r5
 800863c:	4680      	mov	r8, r0
 800863e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008640:	f7f8 fa98 	bl	8000b74 <__aeabi_fsub>
 8008644:	4601      	mov	r1, r0
 8008646:	900a      	str	r0, [sp, #40]	@ 0x28
 8008648:	f7f8 fb9e 	bl	8000d88 <__aeabi_fmul>
 800864c:	4601      	mov	r1, r0
 800864e:	4640      	mov	r0, r8
 8008650:	911a      	str	r1, [sp, #104]	@ 0x68
 8008652:	f7f8 fa91 	bl	8000b78 <__addsf3>
 8008656:	4629      	mov	r1, r5
 8008658:	4680      	mov	r8, r0
 800865a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800865c:	f7f8 fa8a 	bl	8000b74 <__aeabi_fsub>
 8008660:	4601      	mov	r1, r0
 8008662:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008664:	f7f8 fb90 	bl	8000d88 <__aeabi_fmul>
 8008668:	4601      	mov	r1, r0
 800866a:	4640      	mov	r0, r8
 800866c:	911b      	str	r1, [sp, #108]	@ 0x6c
 800866e:	f7f8 fa83 	bl	8000b78 <__addsf3>
 8008672:	4684      	mov	ip, r0
 8008674:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008676:	4629      	mov	r1, r5
 8008678:	4610      	mov	r0, r2
 800867a:	4665      	mov	r5, ip
 800867c:	f7f8 fa7a 	bl	8000b74 <__aeabi_fsub>
 8008680:	4601      	mov	r1, r0
 8008682:	4680      	mov	r8, r0
 8008684:	f7f8 fb80 	bl	8000d88 <__aeabi_fmul>
 8008688:	4629      	mov	r1, r5
 800868a:	901c      	str	r0, [sp, #112]	@ 0x70
 800868c:	f7f8 fa74 	bl	8000b78 <__addsf3>
 8008690:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008694:	f7f8 fb78 	bl	8000d88 <__aeabi_fmul>
 8008698:	f005 fa20 	bl	800dadc <sqrtf>
 800869c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800869e:	4605      	mov	r5, r0
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7f8 fb71 	bl	8000d88 <__aeabi_fmul>
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f8 fb6e 	bl	8000d88 <__aeabi_fmul>
 80086ac:	4607      	mov	r7, r0
 80086ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086b0:	4630      	mov	r0, r6
 80086b2:	4619      	mov	r1, r3
 80086b4:	f7f8 fb68 	bl	8000d88 <__aeabi_fmul>
 80086b8:	4631      	mov	r1, r6
 80086ba:	f7f8 fb65 	bl	8000d88 <__aeabi_fmul>
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 fa5a 	bl	8000b78 <__addsf3>
 80086c4:	4606      	mov	r6, r0
 80086c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086c8:	4650      	mov	r0, sl
 80086ca:	f7f8 fb5d 	bl	8000d88 <__aeabi_fmul>
 80086ce:	4651      	mov	r1, sl
 80086d0:	f7f8 fb5a 	bl	8000d88 <__aeabi_fmul>
 80086d4:	4631      	mov	r1, r6
 80086d6:	f7f8 fa4f 	bl	8000b78 <__addsf3>
 80086da:	4606      	mov	r6, r0
 80086dc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80086de:	4658      	mov	r0, fp
 80086e0:	f7f8 fb52 	bl	8000d88 <__aeabi_fmul>
 80086e4:	4659      	mov	r1, fp
 80086e6:	f7f8 fb4f 	bl	8000d88 <__aeabi_fmul>
 80086ea:	4631      	mov	r1, r6
 80086ec:	f7f8 fa44 	bl	8000b78 <__addsf3>
 80086f0:	4606      	mov	r6, r0
 80086f2:	f8dd a000 	ldr.w	sl, [sp]
 80086f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80086f8:	4650      	mov	r0, sl
 80086fa:	f7f8 fb45 	bl	8000d88 <__aeabi_fmul>
 80086fe:	4651      	mov	r1, sl
 8008700:	f7f8 fb42 	bl	8000d88 <__aeabi_fmul>
 8008704:	4631      	mov	r1, r6
 8008706:	f7f8 fa37 	bl	8000b78 <__addsf3>
 800870a:	4606      	mov	r6, r0
 800870c:	9f01      	ldr	r7, [sp, #4]
 800870e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008710:	4638      	mov	r0, r7
 8008712:	f7f8 fb39 	bl	8000d88 <__aeabi_fmul>
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 fb36 	bl	8000d88 <__aeabi_fmul>
 800871c:	4631      	mov	r1, r6
 800871e:	f7f8 fa2b 	bl	8000b78 <__addsf3>
 8008722:	4606      	mov	r6, r0
 8008724:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008728:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800872a:	4658      	mov	r0, fp
 800872c:	f7f8 fb2c 	bl	8000d88 <__aeabi_fmul>
 8008730:	4659      	mov	r1, fp
 8008732:	f7f8 fb29 	bl	8000d88 <__aeabi_fmul>
 8008736:	4631      	mov	r1, r6
 8008738:	f7f8 fa1e 	bl	8000b78 <__addsf3>
 800873c:	4606      	mov	r6, r0
 800873e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8008742:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008744:	4650      	mov	r0, sl
 8008746:	f7f8 fb1f 	bl	8000d88 <__aeabi_fmul>
 800874a:	4651      	mov	r1, sl
 800874c:	f7f8 fb1c 	bl	8000d88 <__aeabi_fmul>
 8008750:	4631      	mov	r1, r6
 8008752:	f7f8 fa11 	bl	8000b78 <__addsf3>
 8008756:	4606      	mov	r6, r0
 8008758:	9f04      	ldr	r7, [sp, #16]
 800875a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800875c:	4638      	mov	r0, r7
 800875e:	f7f8 fb13 	bl	8000d88 <__aeabi_fmul>
 8008762:	4639      	mov	r1, r7
 8008764:	f7f8 fb10 	bl	8000d88 <__aeabi_fmul>
 8008768:	4631      	mov	r1, r6
 800876a:	f7f8 fa05 	bl	8000b78 <__addsf3>
 800876e:	4606      	mov	r6, r0
 8008770:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008774:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008776:	4658      	mov	r0, fp
 8008778:	f7f8 fb06 	bl	8000d88 <__aeabi_fmul>
 800877c:	4659      	mov	r1, fp
 800877e:	f7f8 fb03 	bl	8000d88 <__aeabi_fmul>
 8008782:	4631      	mov	r1, r6
 8008784:	f7f8 f9f8 	bl	8000b78 <__addsf3>
 8008788:	4606      	mov	r6, r0
 800878a:	f8dd a018 	ldr.w	sl, [sp, #24]
 800878e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008790:	4650      	mov	r0, sl
 8008792:	f7f8 faf9 	bl	8000d88 <__aeabi_fmul>
 8008796:	4651      	mov	r1, sl
 8008798:	f7f8 faf6 	bl	8000d88 <__aeabi_fmul>
 800879c:	4631      	mov	r1, r6
 800879e:	f7f8 f9eb 	bl	8000b78 <__addsf3>
 80087a2:	4606      	mov	r6, r0
 80087a4:	9f07      	ldr	r7, [sp, #28]
 80087a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7f8 faed 	bl	8000d88 <__aeabi_fmul>
 80087ae:	4639      	mov	r1, r7
 80087b0:	f7f8 faea 	bl	8000d88 <__aeabi_fmul>
 80087b4:	4631      	mov	r1, r6
 80087b6:	f7f8 f9df 	bl	8000b78 <__addsf3>
 80087ba:	4606      	mov	r6, r0
 80087bc:	f8dd b020 	ldr.w	fp, [sp, #32]
 80087c0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80087c2:	4658      	mov	r0, fp
 80087c4:	f7f8 fae0 	bl	8000d88 <__aeabi_fmul>
 80087c8:	4659      	mov	r1, fp
 80087ca:	f7f8 fadd 	bl	8000d88 <__aeabi_fmul>
 80087ce:	4631      	mov	r1, r6
 80087d0:	f7f8 f9d2 	bl	8000b78 <__addsf3>
 80087d4:	4606      	mov	r6, r0
 80087d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087dc:	4650      	mov	r0, sl
 80087de:	f7f8 fad3 	bl	8000d88 <__aeabi_fmul>
 80087e2:	4651      	mov	r1, sl
 80087e4:	f7f8 fad0 	bl	8000d88 <__aeabi_fmul>
 80087e8:	4631      	mov	r1, r6
 80087ea:	f7f8 f9c5 	bl	8000b78 <__addsf3>
 80087ee:	4606      	mov	r6, r0
 80087f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80087f2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7f8 fac7 	bl	8000d88 <__aeabi_fmul>
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f8 fac4 	bl	8000d88 <__aeabi_fmul>
 8008800:	4631      	mov	r1, r6
 8008802:	f7f8 f9b9 	bl	8000b78 <__addsf3>
 8008806:	4606      	mov	r6, r0
 8008808:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800880a:	4640      	mov	r0, r8
 800880c:	f7f8 fabc 	bl	8000d88 <__aeabi_fmul>
 8008810:	4641      	mov	r1, r8
 8008812:	f7f8 fab9 	bl	8000d88 <__aeabi_fmul>
 8008816:	4631      	mov	r1, r6
 8008818:	f7f8 f9ae 	bl	8000b78 <__addsf3>
 800881c:	4629      	mov	r1, r5
 800881e:	4606      	mov	r6, r0
 8008820:	4628      	mov	r0, r5
 8008822:	f7f8 fab1 	bl	8000d88 <__aeabi_fmul>
 8008826:	4629      	mov	r1, r5
 8008828:	f7f8 faae 	bl	8000d88 <__aeabi_fmul>
 800882c:	4629      	mov	r1, r5
 800882e:	f7f8 faab 	bl	8000d88 <__aeabi_fmul>
 8008832:	4601      	mov	r1, r0
 8008834:	4630      	mov	r0, r6
 8008836:	f7f8 fb5b 	bl	8000ef0 <__aeabi_fdiv>
 800883a:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800883e:	f7f8 faa3 	bl	8000d88 <__aeabi_fmul>
 8008842:	49a2      	ldr	r1, [pc, #648]	@ (8008acc <neai_classification+0x1460>)
 8008844:	f7f8 f996 	bl	8000b74 <__aeabi_fsub>
 8008848:	f8c9 0068 	str.w	r0, [r9, #104]	@ 0x68
 800884c:	6866      	ldr	r6, [r4, #4]
 800884e:	6821      	ldr	r1, [r4, #0]
 8008850:	4630      	mov	r0, r6
 8008852:	f7f8 fa99 	bl	8000d88 <__aeabi_fmul>
 8008856:	2100      	movs	r1, #0
 8008858:	f7f8 fc34 	bl	80010c4 <__aeabi_fcmplt>
 800885c:	4605      	mov	r5, r0
 800885e:	4630      	mov	r0, r6
 8008860:	68a6      	ldr	r6, [r4, #8]
 8008862:	3d00      	subs	r5, #0
 8008864:	4631      	mov	r1, r6
 8008866:	bf18      	it	ne
 8008868:	2501      	movne	r5, #1
 800886a:	f7f8 fa8d 	bl	8000d88 <__aeabi_fmul>
 800886e:	2100      	movs	r1, #0
 8008870:	f7f8 fc28 	bl	80010c4 <__aeabi_fcmplt>
 8008874:	b100      	cbz	r0, 8008878 <neai_classification+0x120c>
 8008876:	3501      	adds	r5, #1
 8008878:	4630      	mov	r0, r6
 800887a:	68e6      	ldr	r6, [r4, #12]
 800887c:	4631      	mov	r1, r6
 800887e:	f7f8 fa83 	bl	8000d88 <__aeabi_fmul>
 8008882:	2100      	movs	r1, #0
 8008884:	f7f8 fc1e 	bl	80010c4 <__aeabi_fcmplt>
 8008888:	b108      	cbz	r0, 800888e <neai_classification+0x1222>
 800888a:	3501      	adds	r5, #1
 800888c:	b2ad      	uxth	r5, r5
 800888e:	4630      	mov	r0, r6
 8008890:	6926      	ldr	r6, [r4, #16]
 8008892:	4631      	mov	r1, r6
 8008894:	f7f8 fa78 	bl	8000d88 <__aeabi_fmul>
 8008898:	2100      	movs	r1, #0
 800889a:	f7f8 fc13 	bl	80010c4 <__aeabi_fcmplt>
 800889e:	b108      	cbz	r0, 80088a4 <neai_classification+0x1238>
 80088a0:	3501      	adds	r5, #1
 80088a2:	b2ad      	uxth	r5, r5
 80088a4:	4630      	mov	r0, r6
 80088a6:	6966      	ldr	r6, [r4, #20]
 80088a8:	4631      	mov	r1, r6
 80088aa:	f7f8 fa6d 	bl	8000d88 <__aeabi_fmul>
 80088ae:	2100      	movs	r1, #0
 80088b0:	f7f8 fc08 	bl	80010c4 <__aeabi_fcmplt>
 80088b4:	b108      	cbz	r0, 80088ba <neai_classification+0x124e>
 80088b6:	3501      	adds	r5, #1
 80088b8:	b2ad      	uxth	r5, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	69a6      	ldr	r6, [r4, #24]
 80088be:	4631      	mov	r1, r6
 80088c0:	f7f8 fa62 	bl	8000d88 <__aeabi_fmul>
 80088c4:	2100      	movs	r1, #0
 80088c6:	f7f8 fbfd 	bl	80010c4 <__aeabi_fcmplt>
 80088ca:	b108      	cbz	r0, 80088d0 <neai_classification+0x1264>
 80088cc:	3501      	adds	r5, #1
 80088ce:	b2ad      	uxth	r5, r5
 80088d0:	4630      	mov	r0, r6
 80088d2:	69e6      	ldr	r6, [r4, #28]
 80088d4:	4631      	mov	r1, r6
 80088d6:	f7f8 fa57 	bl	8000d88 <__aeabi_fmul>
 80088da:	2100      	movs	r1, #0
 80088dc:	f7f8 fbf2 	bl	80010c4 <__aeabi_fcmplt>
 80088e0:	b108      	cbz	r0, 80088e6 <neai_classification+0x127a>
 80088e2:	3501      	adds	r5, #1
 80088e4:	b2ad      	uxth	r5, r5
 80088e6:	4630      	mov	r0, r6
 80088e8:	6a26      	ldr	r6, [r4, #32]
 80088ea:	4631      	mov	r1, r6
 80088ec:	f7f8 fa4c 	bl	8000d88 <__aeabi_fmul>
 80088f0:	2100      	movs	r1, #0
 80088f2:	f7f8 fbe7 	bl	80010c4 <__aeabi_fcmplt>
 80088f6:	b108      	cbz	r0, 80088fc <neai_classification+0x1290>
 80088f8:	3501      	adds	r5, #1
 80088fa:	b2ad      	uxth	r5, r5
 80088fc:	4630      	mov	r0, r6
 80088fe:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008900:	4631      	mov	r1, r6
 8008902:	f7f8 fa41 	bl	8000d88 <__aeabi_fmul>
 8008906:	2100      	movs	r1, #0
 8008908:	f7f8 fbdc 	bl	80010c4 <__aeabi_fcmplt>
 800890c:	b108      	cbz	r0, 8008912 <neai_classification+0x12a6>
 800890e:	3501      	adds	r5, #1
 8008910:	b2ad      	uxth	r5, r5
 8008912:	4630      	mov	r0, r6
 8008914:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008916:	4631      	mov	r1, r6
 8008918:	f7f8 fa36 	bl	8000d88 <__aeabi_fmul>
 800891c:	2100      	movs	r1, #0
 800891e:	f7f8 fbd1 	bl	80010c4 <__aeabi_fcmplt>
 8008922:	b108      	cbz	r0, 8008928 <neai_classification+0x12bc>
 8008924:	3501      	adds	r5, #1
 8008926:	b2ad      	uxth	r5, r5
 8008928:	4630      	mov	r0, r6
 800892a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800892c:	4631      	mov	r1, r6
 800892e:	f7f8 fa2b 	bl	8000d88 <__aeabi_fmul>
 8008932:	2100      	movs	r1, #0
 8008934:	f7f8 fbc6 	bl	80010c4 <__aeabi_fcmplt>
 8008938:	b108      	cbz	r0, 800893e <neai_classification+0x12d2>
 800893a:	3501      	adds	r5, #1
 800893c:	b2ad      	uxth	r5, r5
 800893e:	4630      	mov	r0, r6
 8008940:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8008942:	4631      	mov	r1, r6
 8008944:	f7f8 fa20 	bl	8000d88 <__aeabi_fmul>
 8008948:	2100      	movs	r1, #0
 800894a:	f7f8 fbbb 	bl	80010c4 <__aeabi_fcmplt>
 800894e:	b108      	cbz	r0, 8008954 <neai_classification+0x12e8>
 8008950:	3501      	adds	r5, #1
 8008952:	b2ad      	uxth	r5, r5
 8008954:	4631      	mov	r1, r6
 8008956:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8008958:	4630      	mov	r0, r6
 800895a:	f7f8 fa15 	bl	8000d88 <__aeabi_fmul>
 800895e:	2100      	movs	r1, #0
 8008960:	f7f8 fbb0 	bl	80010c4 <__aeabi_fcmplt>
 8008964:	b108      	cbz	r0, 800896a <neai_classification+0x12fe>
 8008966:	3501      	adds	r5, #1
 8008968:	b2ad      	uxth	r5, r5
 800896a:	4630      	mov	r0, r6
 800896c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800896e:	4631      	mov	r1, r6
 8008970:	f7f8 fa0a 	bl	8000d88 <__aeabi_fmul>
 8008974:	2100      	movs	r1, #0
 8008976:	f7f8 fba5 	bl	80010c4 <__aeabi_fcmplt>
 800897a:	b108      	cbz	r0, 8008980 <neai_classification+0x1314>
 800897c:	3501      	adds	r5, #1
 800897e:	b2ad      	uxth	r5, r5
 8008980:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008982:	4630      	mov	r0, r6
 8008984:	f7f8 fa00 	bl	8000d88 <__aeabi_fmul>
 8008988:	2100      	movs	r1, #0
 800898a:	f7f8 fb9b 	bl	80010c4 <__aeabi_fcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	f042 82ba 	bne.w	800af08 <neai_classification+0x389c>
 8008994:	4628      	mov	r0, r5
 8008996:	f7f8 f99f 	bl	8000cd8 <__aeabi_ui2f>
 800899a:	4b4d      	ldr	r3, [pc, #308]	@ (8008ad0 <neai_classification+0x1464>)
 800899c:	6618      	str	r0, [r3, #96]	@ 0x60
 800899e:	6826      	ldr	r6, [r4, #0]
 80089a0:	6865      	ldr	r5, [r4, #4]
 80089a2:	4630      	mov	r0, r6
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f8 f8e7 	bl	8000b78 <__addsf3>
 80089aa:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80089ae:	4651      	mov	r1, sl
 80089b0:	f7f8 f8e2 	bl	8000b78 <__addsf3>
 80089b4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80089b8:	4659      	mov	r1, fp
 80089ba:	f7f8 f8dd 	bl	8000b78 <__addsf3>
 80089be:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80089c2:	4641      	mov	r1, r8
 80089c4:	f7f8 f8d8 	bl	8000b78 <__addsf3>
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	4619      	mov	r1, r3
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	f7f8 f8d3 	bl	8000b78 <__addsf3>
 80089d2:	69a3      	ldr	r3, [r4, #24]
 80089d4:	4619      	mov	r1, r3
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	f7f8 f8ce 	bl	8000b78 <__addsf3>
 80089dc:	69e3      	ldr	r3, [r4, #28]
 80089de:	4619      	mov	r1, r3
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	f7f8 f8c9 	bl	8000b78 <__addsf3>
 80089e6:	6a23      	ldr	r3, [r4, #32]
 80089e8:	4619      	mov	r1, r3
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	f7f8 f8c4 	bl	8000b78 <__addsf3>
 80089f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80089f2:	4619      	mov	r1, r3
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	f7f8 f8bf 	bl	8000b78 <__addsf3>
 80089fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80089fc:	4619      	mov	r1, r3
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	f7f8 f8ba 	bl	8000b78 <__addsf3>
 8008a04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008a06:	4619      	mov	r1, r3
 8008a08:	9306      	str	r3, [sp, #24]
 8008a0a:	f7f8 f8b5 	bl	8000b78 <__addsf3>
 8008a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a10:	4619      	mov	r1, r3
 8008a12:	9307      	str	r3, [sp, #28]
 8008a14:	f7f8 f8b0 	bl	8000b78 <__addsf3>
 8008a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	9308      	str	r3, [sp, #32]
 8008a1e:	f7f8 f8ab 	bl	8000b78 <__addsf3>
 8008a22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a24:	4619      	mov	r1, r3
 8008a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a28:	f7f8 f8a6 	bl	8000b78 <__addsf3>
 8008a2c:	f8d4 903c 	ldr.w	r9, [r4, #60]	@ 0x3c
 8008a30:	4601      	mov	r1, r0
 8008a32:	4648      	mov	r0, r9
 8008a34:	f7f8 f8a0 	bl	8000b78 <__addsf3>
 8008a38:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008a3c:	f7f8 f9a4 	bl	8000d88 <__aeabi_fmul>
 8008a40:	4603      	mov	r3, r0
 8008a42:	4628      	mov	r0, r5
 8008a44:	4619      	mov	r1, r3
 8008a46:	461d      	mov	r5, r3
 8008a48:	f7f8 f894 	bl	8000b74 <__aeabi_fsub>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4630      	mov	r0, r6
 8008a50:	461e      	mov	r6, r3
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f8 f88e 	bl	8000b74 <__aeabi_fsub>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	f7f8 f995 	bl	8000d88 <__aeabi_fmul>
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f7f8 fb30 	bl	80010c4 <__aeabi_fcmplt>
 8008a64:	4607      	mov	r7, r0
 8008a66:	4629      	mov	r1, r5
 8008a68:	3f00      	subs	r7, #0
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	bf18      	it	ne
 8008a6e:	2701      	movne	r7, #1
 8008a70:	f7f8 f880 	bl	8000b74 <__aeabi_fsub>
 8008a74:	4682      	mov	sl, r0
 8008a76:	4630      	mov	r0, r6
 8008a78:	4651      	mov	r1, sl
 8008a7a:	f7f8 f985 	bl	8000d88 <__aeabi_fmul>
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f7f8 fb20 	bl	80010c4 <__aeabi_fcmplt>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f042 8237 	bne.w	800aef8 <neai_classification+0x388c>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f7f8 f871 	bl	8000b74 <__aeabi_fsub>
 8008a92:	4606      	mov	r6, r0
 8008a94:	4650      	mov	r0, sl
 8008a96:	4631      	mov	r1, r6
 8008a98:	f7f8 f976 	bl	8000d88 <__aeabi_fmul>
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	f7f8 fb11 	bl	80010c4 <__aeabi_fcmplt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	f042 8100 	bne.w	800aca8 <neai_classification+0x363c>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7f8 f862 	bl	8000b74 <__aeabi_fsub>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4616      	mov	r6, r2
 8008ab8:	f7f8 f966 	bl	8000d88 <__aeabi_fmul>
 8008abc:	2100      	movs	r1, #0
 8008abe:	f7f8 fb01 	bl	80010c4 <__aeabi_fcmplt>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f042 80ec 	bne.w	800aca0 <neai_classification+0x3634>
 8008ac8:	e004      	b.n	8008ad4 <neai_classification+0x1468>
 8008aca:	bf00      	nop
 8008acc:	40400000 	.word	0x40400000
 8008ad0:	20000568 	.word	0x20000568
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	9800      	ldr	r0, [sp, #0]
 8008ad8:	f7f8 f84c 	bl	8000b74 <__aeabi_fsub>
 8008adc:	4602      	mov	r2, r0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4616      	mov	r6, r2
 8008ae4:	f7f8 f950 	bl	8000d88 <__aeabi_fmul>
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f7f8 faeb 	bl	80010c4 <__aeabi_fcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f042 80d2 	bne.w	800ac98 <neai_classification+0x362c>
 8008af4:	4629      	mov	r1, r5
 8008af6:	9801      	ldr	r0, [sp, #4]
 8008af8:	f7f8 f83c 	bl	8000b74 <__aeabi_fsub>
 8008afc:	4602      	mov	r2, r0
 8008afe:	4630      	mov	r0, r6
 8008b00:	4611      	mov	r1, r2
 8008b02:	4616      	mov	r6, r2
 8008b04:	f7f8 f940 	bl	8000d88 <__aeabi_fmul>
 8008b08:	2100      	movs	r1, #0
 8008b0a:	f7f8 fadb 	bl	80010c4 <__aeabi_fcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f042 80be 	bne.w	800ac90 <neai_classification+0x3624>
 8008b14:	4629      	mov	r1, r5
 8008b16:	9802      	ldr	r0, [sp, #8]
 8008b18:	f7f8 f82c 	bl	8000b74 <__aeabi_fsub>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	4611      	mov	r1, r2
 8008b22:	4616      	mov	r6, r2
 8008b24:	f7f8 f930 	bl	8000d88 <__aeabi_fmul>
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f7f8 facb 	bl	80010c4 <__aeabi_fcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f042 80aa 	bne.w	800ac88 <neai_classification+0x361c>
 8008b34:	4629      	mov	r1, r5
 8008b36:	9803      	ldr	r0, [sp, #12]
 8008b38:	f7f8 f81c 	bl	8000b74 <__aeabi_fsub>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4611      	mov	r1, r2
 8008b42:	4616      	mov	r6, r2
 8008b44:	f7f8 f920 	bl	8000d88 <__aeabi_fmul>
 8008b48:	2100      	movs	r1, #0
 8008b4a:	f7f8 fabb 	bl	80010c4 <__aeabi_fcmplt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f042 8096 	bne.w	800ac80 <neai_classification+0x3614>
 8008b54:	4629      	mov	r1, r5
 8008b56:	9804      	ldr	r0, [sp, #16]
 8008b58:	f7f8 f80c 	bl	8000b74 <__aeabi_fsub>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4611      	mov	r1, r2
 8008b62:	4616      	mov	r6, r2
 8008b64:	f7f8 f910 	bl	8000d88 <__aeabi_fmul>
 8008b68:	2100      	movs	r1, #0
 8008b6a:	f7f8 faab 	bl	80010c4 <__aeabi_fcmplt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f042 8082 	bne.w	800ac78 <neai_classification+0x360c>
 8008b74:	4629      	mov	r1, r5
 8008b76:	9805      	ldr	r0, [sp, #20]
 8008b78:	f7f7 fffc 	bl	8000b74 <__aeabi_fsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4611      	mov	r1, r2
 8008b82:	4616      	mov	r6, r2
 8008b84:	f7f8 f900 	bl	8000d88 <__aeabi_fmul>
 8008b88:	2100      	movs	r1, #0
 8008b8a:	f7f8 fa9b 	bl	80010c4 <__aeabi_fcmplt>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f042 806e 	bne.w	800ac70 <neai_classification+0x3604>
 8008b94:	4629      	mov	r1, r5
 8008b96:	9806      	ldr	r0, [sp, #24]
 8008b98:	f7f7 ffec 	bl	8000b74 <__aeabi_fsub>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4616      	mov	r6, r2
 8008ba4:	f7f8 f8f0 	bl	8000d88 <__aeabi_fmul>
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f7f8 fa8b 	bl	80010c4 <__aeabi_fcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f042 805a 	bne.w	800ac68 <neai_classification+0x35fc>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	9807      	ldr	r0, [sp, #28]
 8008bb8:	f7f7 ffdc 	bl	8000b74 <__aeabi_fsub>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4616      	mov	r6, r2
 8008bc4:	f7f8 f8e0 	bl	8000d88 <__aeabi_fmul>
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f7f8 fa7b 	bl	80010c4 <__aeabi_fcmplt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f042 8046 	bne.w	800ac60 <neai_classification+0x35f4>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	9808      	ldr	r0, [sp, #32]
 8008bd8:	f7f7 ffcc 	bl	8000b74 <__aeabi_fsub>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4606      	mov	r6, r0
 8008be0:	f7f8 f8d2 	bl	8000d88 <__aeabi_fmul>
 8008be4:	2100      	movs	r1, #0
 8008be6:	f7f8 fa6d 	bl	80010c4 <__aeabi_fcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f042 8034 	bne.w	800ac58 <neai_classification+0x35ec>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bf4:	f7f7 ffbe 	bl	8000b74 <__aeabi_fsub>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4616      	mov	r6, r2
 8008c00:	f7f8 f8c2 	bl	8000d88 <__aeabi_fmul>
 8008c04:	2100      	movs	r1, #0
 8008c06:	f7f8 fa5d 	bl	80010c4 <__aeabi_fcmplt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f042 8020 	bne.w	800ac50 <neai_classification+0x35e4>
 8008c10:	4629      	mov	r1, r5
 8008c12:	4648      	mov	r0, r9
 8008c14:	f7f7 ffae 	bl	8000b74 <__aeabi_fsub>
 8008c18:	4631      	mov	r1, r6
 8008c1a:	f7f8 f8b5 	bl	8000d88 <__aeabi_fmul>
 8008c1e:	2100      	movs	r1, #0
 8008c20:	f7f8 fa50 	bl	80010c4 <__aeabi_fcmplt>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f042 8173 	bne.w	800af10 <neai_classification+0x38a4>
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7f8 f854 	bl	8000cd8 <__aeabi_ui2f>
 8008c30:	4bb2      	ldr	r3, [pc, #712]	@ (8008efc <neai_classification+0x1890>)
 8008c32:	6558      	str	r0, [r3, #84]	@ 0x54
 8008c34:	6821      	ldr	r1, [r4, #0]
 8008c36:	4608      	mov	r0, r1
 8008c38:	f7f8 f8a6 	bl	8000d88 <__aeabi_fmul>
 8008c3c:	6862      	ldr	r2, [r4, #4]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	4611      	mov	r1, r2
 8008c42:	4610      	mov	r0, r2
 8008c44:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c46:	f7f8 f89f 	bl	8000d88 <__aeabi_fmul>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	4619      	mov	r1, r3
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	f7f7 ff91 	bl	8000b78 <__addsf3>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c60:	f7f8 f892 	bl	8000d88 <__aeabi_fmul>
 8008c64:	4601      	mov	r1, r0
 8008c66:	4628      	mov	r0, r5
 8008c68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c6a:	f7f7 ff85 	bl	8000b78 <__addsf3>
 8008c6e:	68e2      	ldr	r2, [r4, #12]
 8008c70:	4605      	mov	r5, r0
 8008c72:	4611      	mov	r1, r2
 8008c74:	4610      	mov	r0, r2
 8008c76:	9206      	str	r2, [sp, #24]
 8008c78:	f7f8 f886 	bl	8000d88 <__aeabi_fmul>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4628      	mov	r0, r5
 8008c80:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008c82:	f7f7 ff79 	bl	8000b78 <__addsf3>
 8008c86:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7f8 f87a 	bl	8000d88 <__aeabi_fmul>
 8008c94:	4601      	mov	r1, r0
 8008c96:	4628      	mov	r0, r5
 8008c98:	9118      	str	r1, [sp, #96]	@ 0x60
 8008c9a:	f7f7 ff6d 	bl	8000b78 <__addsf3>
 8008c9e:	6967      	ldr	r7, [r4, #20]
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7f8 f86f 	bl	8000d88 <__aeabi_fmul>
 8008caa:	4601      	mov	r1, r0
 8008cac:	4628      	mov	r0, r5
 8008cae:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cb0:	f7f7 ff62 	bl	8000b78 <__addsf3>
 8008cb4:	69a6      	ldr	r6, [r4, #24]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7f8 f864 	bl	8000d88 <__aeabi_fmul>
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	911a      	str	r1, [sp, #104]	@ 0x68
 8008cc6:	f7f7 ff57 	bl	8000b78 <__addsf3>
 8008cca:	69e5      	ldr	r5, [r4, #28]
 8008ccc:	4682      	mov	sl, r0
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f7f8 f859 	bl	8000d88 <__aeabi_fmul>
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4650      	mov	r0, sl
 8008cda:	911b      	str	r1, [sp, #108]	@ 0x6c
 8008cdc:	f7f7 ff4c 	bl	8000b78 <__addsf3>
 8008ce0:	f8d4 b020 	ldr.w	fp, [r4, #32]
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	4658      	mov	r0, fp
 8008cea:	f7f8 f84d 	bl	8000d88 <__aeabi_fmul>
 8008cee:	4601      	mov	r1, r0
 8008cf0:	4650      	mov	r0, sl
 8008cf2:	911c      	str	r1, [sp, #112]	@ 0x70
 8008cf4:	f7f7 ff40 	bl	8000b78 <__addsf3>
 8008cf8:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8008cfc:	4682      	mov	sl, r0
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4648      	mov	r0, r9
 8008d02:	f8cd 9020 	str.w	r9, [sp, #32]
 8008d06:	f7f8 f83f 	bl	8000d88 <__aeabi_fmul>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	911d      	str	r1, [sp, #116]	@ 0x74
 8008d10:	f7f7 ff32 	bl	8000b78 <__addsf3>
 8008d14:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008d16:	4682      	mov	sl, r0
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	f7f8 f833 	bl	8000d88 <__aeabi_fmul>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4650      	mov	r0, sl
 8008d26:	911e      	str	r1, [sp, #120]	@ 0x78
 8008d28:	f7f7 ff26 	bl	8000b78 <__addsf3>
 8008d2c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008d2e:	4682      	mov	sl, r0
 8008d30:	4611      	mov	r1, r2
 8008d32:	4610      	mov	r0, r2
 8008d34:	9202      	str	r2, [sp, #8]
 8008d36:	f7f8 f827 	bl	8000d88 <__aeabi_fmul>
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008d40:	f7f7 ff1a 	bl	8000b78 <__addsf3>
 8008d44:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8008d48:	4682      	mov	sl, r0
 8008d4a:	4661      	mov	r1, ip
 8008d4c:	4660      	mov	r0, ip
 8008d4e:	f8cd c00c 	str.w	ip, [sp, #12]
 8008d52:	f7f8 f819 	bl	8000d88 <__aeabi_fmul>
 8008d56:	4601      	mov	r1, r0
 8008d58:	4650      	mov	r0, sl
 8008d5a:	9120      	str	r1, [sp, #128]	@ 0x80
 8008d5c:	f7f7 ff0c 	bl	8000b78 <__addsf3>
 8008d60:	f8d4 e034 	ldr.w	lr, [r4, #52]	@ 0x34
 8008d64:	4682      	mov	sl, r0
 8008d66:	4671      	mov	r1, lr
 8008d68:	4670      	mov	r0, lr
 8008d6a:	f8cd e010 	str.w	lr, [sp, #16]
 8008d6e:	f7f8 f80b 	bl	8000d88 <__aeabi_fmul>
 8008d72:	4601      	mov	r1, r0
 8008d74:	4650      	mov	r0, sl
 8008d76:	9121      	str	r1, [sp, #132]	@ 0x84
 8008d78:	f7f7 fefe 	bl	8000b78 <__addsf3>
 8008d7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008d7e:	4682      	mov	sl, r0
 8008d80:	4619      	mov	r1, r3
 8008d82:	4618      	mov	r0, r3
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	f7f7 ffff 	bl	8000d88 <__aeabi_fmul>
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	9122      	str	r1, [sp, #136]	@ 0x88
 8008d90:	f7f7 fef2 	bl	8000b78 <__addsf3>
 8008d94:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008d96:	4682      	mov	sl, r0
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	9200      	str	r2, [sp, #0]
 8008d9e:	f7f7 fff3 	bl	8000d88 <__aeabi_fmul>
 8008da2:	4651      	mov	r1, sl
 8008da4:	9023      	str	r0, [sp, #140]	@ 0x8c
 8008da6:	f7f7 fee7 	bl	8000b78 <__addsf3>
 8008daa:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008dae:	f7f7 ffeb 	bl	8000d88 <__aeabi_fmul>
 8008db2:	f004 fe93 	bl	800dadc <sqrtf>
 8008db6:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8008efc <neai_classification+0x1890>
 8008dba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dbc:	f8ca 0000 	str.w	r0, [sl]
 8008dc0:	f8d4 a000 	ldr.w	sl, [r4]
 8008dc4:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8008dc8:	f02a 4100 	bic.w	r1, sl, #2147483648	@ 0x80000000
 8008dcc:	f7f7 fed4 	bl	8000b78 <__addsf3>
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008dd8:	f7f7 fece 	bl	8000b78 <__addsf3>
 8008ddc:	f8dd e018 	ldr.w	lr, [sp, #24]
 8008de0:	4601      	mov	r1, r0
 8008de2:	f02e 4000 	bic.w	r0, lr, #2147483648	@ 0x80000000
 8008de6:	f7f7 fec7 	bl	8000b78 <__addsf3>
 8008dea:	f028 4300 	bic.w	r3, r8, #2147483648	@ 0x80000000
 8008dee:	4619      	mov	r1, r3
 8008df0:	9325      	str	r3, [sp, #148]	@ 0x94
 8008df2:	f7f7 fec1 	bl	8000b78 <__addsf3>
 8008df6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	9224      	str	r2, [sp, #144]	@ 0x90
 8008dfe:	f7f7 febb 	bl	8000b78 <__addsf3>
 8008e02:	f026 4e00 	bic.w	lr, r6, #2147483648	@ 0x80000000
 8008e06:	4671      	mov	r1, lr
 8008e08:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8008e0c:	f7f7 feb4 	bl	8000b78 <__addsf3>
 8008e10:	f025 4e00 	bic.w	lr, r5, #2147483648	@ 0x80000000
 8008e14:	4671      	mov	r1, lr
 8008e16:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 8008e1a:	f7f7 fead 	bl	8000b78 <__addsf3>
 8008e1e:	f02b 4e00 	bic.w	lr, fp, #2147483648	@ 0x80000000
 8008e22:	4671      	mov	r1, lr
 8008e24:	f029 4900 	bic.w	r9, r9, #2147483648	@ 0x80000000
 8008e28:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
 8008e2c:	f7f7 fea4 	bl	8000b78 <__addsf3>
 8008e30:	4649      	mov	r1, r9
 8008e32:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8008e36:	f7f7 fe9f 	bl	8000b78 <__addsf3>
 8008e3a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e3e:	f029 4900 	bic.w	r9, r9, #2147483648	@ 0x80000000
 8008e42:	4649      	mov	r1, r9
 8008e44:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
 8008e48:	f7f7 fe96 	bl	8000b78 <__addsf3>
 8008e4c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008e50:	f029 4900 	bic.w	r9, r9, #2147483648	@ 0x80000000
 8008e54:	4649      	mov	r1, r9
 8008e56:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8008e5a:	f7f7 fe8d 	bl	8000b78 <__addsf3>
 8008e5e:	9a03      	ldr	r2, [sp, #12]
 8008e60:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008e64:	4611      	mov	r1, r2
 8008e66:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e68:	f7f7 fe86 	bl	8000b78 <__addsf3>
 8008e6c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008e70:	f02e 4e00 	bic.w	lr, lr, #2147483648	@ 0x80000000
 8008e74:	4671      	mov	r1, lr
 8008e76:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
 8008e7a:	f7f7 fe7d 	bl	8000b78 <__addsf3>
 8008e7e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008e82:	f02e 4e00 	bic.w	lr, lr, #2147483648	@ 0x80000000
 8008e86:	4671      	mov	r1, lr
 8008e88:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 8008e8c:	f7f7 fe74 	bl	8000b78 <__addsf3>
 8008e90:	9a00      	ldr	r2, [sp, #0]
 8008e92:	4601      	mov	r1, r0
 8008e94:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008e98:	4610      	mov	r0, r2
 8008e9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8008e9c:	f7f7 fe6c 	bl	8000b78 <__addsf3>
 8008ea0:	4651      	mov	r1, sl
 8008ea2:	4681      	mov	r9, r0
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f7f7 ff6f 	bl	8000d88 <__aeabi_fmul>
 8008eaa:	9907      	ldr	r1, [sp, #28]
 8008eac:	f7f7 fe64 	bl	8000b78 <__addsf3>
 8008eb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eb2:	f7f7 fe61 	bl	8000b78 <__addsf3>
 8008eb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008eb8:	f7f7 fe5e 	bl	8000b78 <__addsf3>
 8008ebc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008ebe:	f7f7 fe5b 	bl	8000b78 <__addsf3>
 8008ec2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008ec4:	f7f7 fe58 	bl	8000b78 <__addsf3>
 8008ec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008eca:	f7f7 fe55 	bl	8000b78 <__addsf3>
 8008ece:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8008ed0:	f7f7 fe52 	bl	8000b78 <__addsf3>
 8008ed4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008ed6:	f7f7 fe4f 	bl	8000b78 <__addsf3>
 8008eda:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8008edc:	f7f7 fe4c 	bl	8000b78 <__addsf3>
 8008ee0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008ee2:	f7f7 fe49 	bl	8000b78 <__addsf3>
 8008ee6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8008ee8:	f7f7 fe46 	bl	8000b78 <__addsf3>
 8008eec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008eee:	f7f7 fe43 	bl	8000b78 <__addsf3>
 8008ef2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8008ef4:	f7f7 fe40 	bl	8000b78 <__addsf3>
 8008ef8:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008efa:	e001      	b.n	8008f00 <neai_classification+0x1894>
 8008efc:	20000568 	.word	0x20000568
 8008f00:	f7f7 fe3a 	bl	8000b78 <__addsf3>
 8008f04:	4601      	mov	r1, r0
 8008f06:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8008f08:	f7f7 fe36 	bl	8000b78 <__addsf3>
 8008f0c:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008f10:	f7f7 ff3a 	bl	8000d88 <__aeabi_fmul>
 8008f14:	f004 fde2 	bl	800dadc <sqrtf>
 8008f18:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	4648      	mov	r0, r9
 8008f20:	f7f7 ff32 	bl	8000d88 <__aeabi_fmul>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4650      	mov	r0, sl
 8008f28:	f7f7 ffe2 	bl	8000ef0 <__aeabi_fdiv>
 8008f2c:	4b9b      	ldr	r3, [pc, #620]	@ (800919c <neai_classification+0x1b30>)
 8008f2e:	60d8      	str	r0, [r3, #12]
 8008f30:	f8d4 a000 	ldr.w	sl, [r4]
 8008f34:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008f38:	f02a 4100 	bic.w	r1, sl, #2147483648	@ 0x80000000
 8008f3c:	f029 4000 	bic.w	r0, r9, #2147483648	@ 0x80000000
 8008f40:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8008f44:	f7f7 fe18 	bl	8000b78 <__addsf3>
 8008f48:	68a3      	ldr	r3, [r4, #8]
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008f50:	9306      	str	r3, [sp, #24]
 8008f52:	f7f7 fe11 	bl	8000b78 <__addsf3>
 8008f56:	68e3      	ldr	r3, [r4, #12]
 8008f58:	4601      	mov	r1, r0
 8008f5a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008f5e:	9307      	str	r3, [sp, #28]
 8008f60:	f7f7 fe0a 	bl	8000b78 <__addsf3>
 8008f64:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008f66:	4619      	mov	r1, r3
 8008f68:	f7f7 fe06 	bl	8000b78 <__addsf3>
 8008f6c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f6e:	4611      	mov	r1, r2
 8008f70:	f7f7 fe02 	bl	8000b78 <__addsf3>
 8008f74:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008f76:	f7f7 fdff 	bl	8000b78 <__addsf3>
 8008f7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f7c:	f7f7 fdfc 	bl	8000b78 <__addsf3>
 8008f80:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008f82:	f7f7 fdf9 	bl	8000b78 <__addsf3>
 8008f86:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008f88:	f7f7 fdf6 	bl	8000b78 <__addsf3>
 8008f8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008f8e:	f7f7 fdf3 	bl	8000b78 <__addsf3>
 8008f92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008f94:	f7f7 fdf0 	bl	8000b78 <__addsf3>
 8008f98:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008f9a:	f7f7 fded 	bl	8000b78 <__addsf3>
 8008f9e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8008fa0:	f7f7 fdea 	bl	8000b78 <__addsf3>
 8008fa4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008fa6:	f7f7 fde7 	bl	8000b78 <__addsf3>
 8008faa:	4601      	mov	r1, r0
 8008fac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008fae:	f7f7 fde3 	bl	8000b78 <__addsf3>
 8008fb2:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008fb6:	f7f7 fee7 	bl	8000d88 <__aeabi_fmul>
 8008fba:	4649      	mov	r1, r9
 8008fbc:	900d      	str	r0, [sp, #52]	@ 0x34
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	f7f8 f880 	bl	80010c4 <__aeabi_fcmplt>
 8008fc4:	b900      	cbnz	r0, 8008fc8 <neai_classification+0x195c>
 8008fc6:	46ca      	mov	sl, r9
 8008fc8:	4650      	mov	r0, sl
 8008fca:	9906      	ldr	r1, [sp, #24]
 8008fcc:	f7f8 f87a 	bl	80010c4 <__aeabi_fcmplt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f001 8633 	beq.w	800ac3c <neai_classification+0x35d0>
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	9907      	ldr	r1, [sp, #28]
 8008fda:	f7f8 f873 	bl	80010c4 <__aeabi_fcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f001 8622 	beq.w	800ac28 <neai_classification+0x35bc>
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	f7f8 f86c 	bl	80010c4 <__aeabi_fcmplt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f001 8612 	beq.w	800ac16 <neai_classification+0x35aa>
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4650      	mov	r0, sl
 8008ff6:	f7f8 f865 	bl	80010c4 <__aeabi_fcmplt>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f001 8602 	beq.w	800ac04 <neai_classification+0x3598>
 8009000:	4631      	mov	r1, r6
 8009002:	4650      	mov	r0, sl
 8009004:	f7f8 f85e 	bl	80010c4 <__aeabi_fcmplt>
 8009008:	2800      	cmp	r0, #0
 800900a:	f001 85f2 	beq.w	800abf2 <neai_classification+0x3586>
 800900e:	4629      	mov	r1, r5
 8009010:	4650      	mov	r0, sl
 8009012:	f7f8 f857 	bl	80010c4 <__aeabi_fcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f001 85e2 	beq.w	800abe0 <neai_classification+0x3574>
 800901c:	4659      	mov	r1, fp
 800901e:	4650      	mov	r0, sl
 8009020:	f7f8 f850 	bl	80010c4 <__aeabi_fcmplt>
 8009024:	2800      	cmp	r0, #0
 8009026:	f001 85d2 	beq.w	800abce <neai_classification+0x3562>
 800902a:	4650      	mov	r0, sl
 800902c:	9908      	ldr	r1, [sp, #32]
 800902e:	f7f8 f849 	bl	80010c4 <__aeabi_fcmplt>
 8009032:	2800      	cmp	r0, #0
 8009034:	f001 85c1 	beq.w	800abba <neai_classification+0x354e>
 8009038:	4650      	mov	r0, sl
 800903a:	9901      	ldr	r1, [sp, #4]
 800903c:	f7f8 f842 	bl	80010c4 <__aeabi_fcmplt>
 8009040:	2800      	cmp	r0, #0
 8009042:	f001 85b0 	beq.w	800aba6 <neai_classification+0x353a>
 8009046:	4650      	mov	r0, sl
 8009048:	9902      	ldr	r1, [sp, #8]
 800904a:	f7f8 f83b 	bl	80010c4 <__aeabi_fcmplt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f001 859f 	beq.w	800ab92 <neai_classification+0x3526>
 8009054:	4650      	mov	r0, sl
 8009056:	9903      	ldr	r1, [sp, #12]
 8009058:	f7f8 f834 	bl	80010c4 <__aeabi_fcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f001 858e 	beq.w	800ab7e <neai_classification+0x3512>
 8009062:	4650      	mov	r0, sl
 8009064:	9904      	ldr	r1, [sp, #16]
 8009066:	f7f8 f82d 	bl	80010c4 <__aeabi_fcmplt>
 800906a:	2800      	cmp	r0, #0
 800906c:	f001 857d 	beq.w	800ab6a <neai_classification+0x34fe>
 8009070:	4650      	mov	r0, sl
 8009072:	9905      	ldr	r1, [sp, #20]
 8009074:	f7f8 f826 	bl	80010c4 <__aeabi_fcmplt>
 8009078:	2800      	cmp	r0, #0
 800907a:	f001 856c 	beq.w	800ab56 <neai_classification+0x34ea>
 800907e:	4651      	mov	r1, sl
 8009080:	9800      	ldr	r0, [sp, #0]
 8009082:	f7f8 f83d 	bl	8001100 <__aeabi_fcmpgt>
 8009086:	2800      	cmp	r0, #0
 8009088:	f001 8561 	beq.w	800ab4e <neai_classification+0x34e2>
 800908c:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8009090:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8009094:	4649      	mov	r1, r9
 8009096:	4650      	mov	r0, sl
 8009098:	930a      	str	r3, [sp, #40]	@ 0x28
 800909a:	f7f8 f831 	bl	8001100 <__aeabi_fcmpgt>
 800909e:	b100      	cbz	r0, 80090a2 <neai_classification+0x1a36>
 80090a0:	46d1      	mov	r9, sl
 80090a2:	4648      	mov	r0, r9
 80090a4:	9906      	ldr	r1, [sp, #24]
 80090a6:	f7f8 f82b 	bl	8001100 <__aeabi_fcmpgt>
 80090aa:	b108      	cbz	r0, 80090b0 <neai_classification+0x1a44>
 80090ac:	f8cd 9018 	str.w	r9, [sp, #24]
 80090b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80090b4:	9907      	ldr	r1, [sp, #28]
 80090b6:	4648      	mov	r0, r9
 80090b8:	f7f8 f822 	bl	8001100 <__aeabi_fcmpgt>
 80090bc:	b108      	cbz	r0, 80090c2 <neai_classification+0x1a56>
 80090be:	f8cd 901c 	str.w	r9, [sp, #28]
 80090c2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80090c6:	4641      	mov	r1, r8
 80090c8:	4648      	mov	r0, r9
 80090ca:	f7f8 f819 	bl	8001100 <__aeabi_fcmpgt>
 80090ce:	b100      	cbz	r0, 80090d2 <neai_classification+0x1a66>
 80090d0:	46c8      	mov	r8, r9
 80090d2:	4639      	mov	r1, r7
 80090d4:	4640      	mov	r0, r8
 80090d6:	f7f8 f813 	bl	8001100 <__aeabi_fcmpgt>
 80090da:	b100      	cbz	r0, 80090de <neai_classification+0x1a72>
 80090dc:	4647      	mov	r7, r8
 80090de:	4631      	mov	r1, r6
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7f8 f80d 	bl	8001100 <__aeabi_fcmpgt>
 80090e6:	b100      	cbz	r0, 80090ea <neai_classification+0x1a7e>
 80090e8:	463e      	mov	r6, r7
 80090ea:	4629      	mov	r1, r5
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7f8 f807 	bl	8001100 <__aeabi_fcmpgt>
 80090f2:	b100      	cbz	r0, 80090f6 <neai_classification+0x1a8a>
 80090f4:	4635      	mov	r5, r6
 80090f6:	4659      	mov	r1, fp
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7f8 f801 	bl	8001100 <__aeabi_fcmpgt>
 80090fe:	b100      	cbz	r0, 8009102 <neai_classification+0x1a96>
 8009100:	46ab      	mov	fp, r5
 8009102:	4658      	mov	r0, fp
 8009104:	9908      	ldr	r1, [sp, #32]
 8009106:	f7f7 fffb 	bl	8001100 <__aeabi_fcmpgt>
 800910a:	b108      	cbz	r0, 8009110 <neai_classification+0x1aa4>
 800910c:	f8cd b020 	str.w	fp, [sp, #32]
 8009110:	9d08      	ldr	r5, [sp, #32]
 8009112:	9901      	ldr	r1, [sp, #4]
 8009114:	4628      	mov	r0, r5
 8009116:	f7f7 fff3 	bl	8001100 <__aeabi_fcmpgt>
 800911a:	b100      	cbz	r0, 800911e <neai_classification+0x1ab2>
 800911c:	9501      	str	r5, [sp, #4]
 800911e:	9d01      	ldr	r5, [sp, #4]
 8009120:	9902      	ldr	r1, [sp, #8]
 8009122:	4628      	mov	r0, r5
 8009124:	f7f7 ffec 	bl	8001100 <__aeabi_fcmpgt>
 8009128:	b100      	cbz	r0, 800912c <neai_classification+0x1ac0>
 800912a:	9502      	str	r5, [sp, #8]
 800912c:	9d02      	ldr	r5, [sp, #8]
 800912e:	9903      	ldr	r1, [sp, #12]
 8009130:	4628      	mov	r0, r5
 8009132:	f7f7 ffe5 	bl	8001100 <__aeabi_fcmpgt>
 8009136:	b100      	cbz	r0, 800913a <neai_classification+0x1ace>
 8009138:	9503      	str	r5, [sp, #12]
 800913a:	9d03      	ldr	r5, [sp, #12]
 800913c:	9904      	ldr	r1, [sp, #16]
 800913e:	4628      	mov	r0, r5
 8009140:	f7f7 ffde 	bl	8001100 <__aeabi_fcmpgt>
 8009144:	b100      	cbz	r0, 8009148 <neai_classification+0x1adc>
 8009146:	9504      	str	r5, [sp, #16]
 8009148:	9d04      	ldr	r5, [sp, #16]
 800914a:	9905      	ldr	r1, [sp, #20]
 800914c:	4628      	mov	r0, r5
 800914e:	f7f7 ffd7 	bl	8001100 <__aeabi_fcmpgt>
 8009152:	b100      	cbz	r0, 8009156 <neai_classification+0x1aea>
 8009154:	9505      	str	r5, [sp, #20]
 8009156:	9d05      	ldr	r5, [sp, #20]
 8009158:	9800      	ldr	r0, [sp, #0]
 800915a:	4629      	mov	r1, r5
 800915c:	f7f7 ffb2 	bl	80010c4 <__aeabi_fcmplt>
 8009160:	b100      	cbz	r0, 8009164 <neai_classification+0x1af8>
 8009162:	9500      	str	r5, [sp, #0]
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009168:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800916c:	4629      	mov	r1, r5
 800916e:	f7f7 ffa9 	bl	80010c4 <__aeabi_fcmplt>
 8009172:	2800      	cmp	r0, #0
 8009174:	f041 84e8 	bne.w	800ab48 <neai_classification+0x34dc>
 8009178:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800917a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800917c:	f7f7 feb8 	bl	8000ef0 <__aeabi_fdiv>
 8009180:	4b06      	ldr	r3, [pc, #24]	@ (800919c <neai_classification+0x1b30>)
 8009182:	4627      	mov	r7, r4
 8009184:	6418      	str	r0, [r3, #64]	@ 0x40
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 800918c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009192:	f004 fca3 	bl	800dadc <sqrtf>
 8009196:	4605      	mov	r5, r0
 8009198:	e002      	b.n	80091a0 <neai_classification+0x1b34>
 800919a:	bf00      	nop
 800919c:	20000568 	.word	0x20000568
 80091a0:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80091a4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80091a8:	f004 fc98 	bl	800dadc <sqrtf>
 80091ac:	4601      	mov	r1, r0
 80091ae:	4628      	mov	r0, r5
 80091b0:	f7f7 fce2 	bl	8000b78 <__addsf3>
 80091b4:	42b7      	cmp	r7, r6
 80091b6:	4605      	mov	r5, r0
 80091b8:	d1f2      	bne.n	80091a0 <neai_classification+0x1b34>
 80091ba:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80091be:	f7f7 fde3 	bl	8000d88 <__aeabi_fmul>
 80091c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80091c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80091c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80091ca:	4641      	mov	r1, r8
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7f7 ff79 	bl	80010c4 <__aeabi_fcmplt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f001 860e 	beq.w	800adf4 <neai_classification+0x3788>
 80091d8:	68a7      	ldr	r7, [r4, #8]
 80091da:	4628      	mov	r0, r5
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 ff71 	bl	80010c4 <__aeabi_fcmplt>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f001 860e 	beq.w	800ae04 <neai_classification+0x3798>
 80091e8:	68e6      	ldr	r6, [r4, #12]
 80091ea:	4628      	mov	r0, r5
 80091ec:	4631      	mov	r1, r6
 80091ee:	f7f7 ff69 	bl	80010c4 <__aeabi_fcmplt>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f001 8601 	beq.w	800adfa <neai_classification+0x378e>
 80091f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091fc:	4628      	mov	r0, r5
 80091fe:	4649      	mov	r1, r9
 8009200:	f7f7 ff60 	bl	80010c4 <__aeabi_fcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	f001 8609 	beq.w	800ae1c <neai_classification+0x37b0>
 800920a:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800920e:	4628      	mov	r0, r5
 8009210:	4651      	mov	r1, sl
 8009212:	f7f7 ff57 	bl	80010c4 <__aeabi_fcmplt>
 8009216:	2800      	cmp	r0, #0
 8009218:	f001 85fd 	beq.w	800ae16 <neai_classification+0x37aa>
 800921c:	f8d4 b018 	ldr.w	fp, [r4, #24]
 8009220:	4628      	mov	r0, r5
 8009222:	4659      	mov	r1, fp
 8009224:	f7f7 ff4e 	bl	80010c4 <__aeabi_fcmplt>
 8009228:	2800      	cmp	r0, #0
 800922a:	f001 85f1 	beq.w	800ae10 <neai_classification+0x37a4>
 800922e:	69e3      	ldr	r3, [r4, #28]
 8009230:	4628      	mov	r0, r5
 8009232:	4619      	mov	r1, r3
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	f7f7 ff45 	bl	80010c4 <__aeabi_fcmplt>
 800923a:	2800      	cmp	r0, #0
 800923c:	f001 85e5 	beq.w	800ae0a <neai_classification+0x379e>
 8009240:	6a23      	ldr	r3, [r4, #32]
 8009242:	4628      	mov	r0, r5
 8009244:	4619      	mov	r1, r3
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	f7f7 ff3c 	bl	80010c4 <__aeabi_fcmplt>
 800924c:	2800      	cmp	r0, #0
 800924e:	f001 8648 	beq.w	800aee2 <neai_classification+0x3876>
 8009252:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009254:	4628      	mov	r0, r5
 8009256:	4619      	mov	r1, r3
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	f7f7 ff33 	bl	80010c4 <__aeabi_fcmplt>
 800925e:	2800      	cmp	r0, #0
 8009260:	f001 863c 	beq.w	800aedc <neai_classification+0x3870>
 8009264:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009266:	4628      	mov	r0, r5
 8009268:	4619      	mov	r1, r3
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	f7f7 ff2a 	bl	80010c4 <__aeabi_fcmplt>
 8009270:	2800      	cmp	r0, #0
 8009272:	f001 8630 	beq.w	800aed6 <neai_classification+0x386a>
 8009276:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009278:	4628      	mov	r0, r5
 800927a:	4619      	mov	r1, r3
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	f7f7 ff21 	bl	80010c4 <__aeabi_fcmplt>
 8009282:	2800      	cmp	r0, #0
 8009284:	f001 8624 	beq.w	800aed0 <neai_classification+0x3864>
 8009288:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800928a:	4628      	mov	r0, r5
 800928c:	4619      	mov	r1, r3
 800928e:	9306      	str	r3, [sp, #24]
 8009290:	f7f7 ff18 	bl	80010c4 <__aeabi_fcmplt>
 8009294:	2800      	cmp	r0, #0
 8009296:	f001 8618 	beq.w	800aeca <neai_classification+0x385e>
 800929a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800929c:	4628      	mov	r0, r5
 800929e:	4619      	mov	r1, r3
 80092a0:	9307      	str	r3, [sp, #28]
 80092a2:	f7f7 ff0f 	bl	80010c4 <__aeabi_fcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f001 860c 	beq.w	800aec4 <neai_classification+0x3858>
 80092ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092ae:	4628      	mov	r0, r5
 80092b0:	4619      	mov	r1, r3
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	f7f7 ff06 	bl	80010c4 <__aeabi_fcmplt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f001 8600 	beq.w	800aebe <neai_classification+0x3852>
 80092be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092c0:	4629      	mov	r1, r5
 80092c2:	4618      	mov	r0, r3
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	f7f7 ff1b 	bl	8001100 <__aeabi_fcmpgt>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f001 85f4 	beq.w	800aeb8 <neai_classification+0x384c>
 80092d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80092d4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80092d6:	4641      	mov	r1, r8
 80092d8:	4628      	mov	r0, r5
 80092da:	930a      	str	r3, [sp, #40]	@ 0x28
 80092dc:	f7f7 ff10 	bl	8001100 <__aeabi_fcmpgt>
 80092e0:	b100      	cbz	r0, 80092e4 <neai_classification+0x1c78>
 80092e2:	46a8      	mov	r8, r5
 80092e4:	4639      	mov	r1, r7
 80092e6:	4640      	mov	r0, r8
 80092e8:	f7f7 ff0a 	bl	8001100 <__aeabi_fcmpgt>
 80092ec:	b100      	cbz	r0, 80092f0 <neai_classification+0x1c84>
 80092ee:	4647      	mov	r7, r8
 80092f0:	4631      	mov	r1, r6
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7f7 ff04 	bl	8001100 <__aeabi_fcmpgt>
 80092f8:	b100      	cbz	r0, 80092fc <neai_classification+0x1c90>
 80092fa:	463e      	mov	r6, r7
 80092fc:	4649      	mov	r1, r9
 80092fe:	4630      	mov	r0, r6
 8009300:	f7f7 fefe 	bl	8001100 <__aeabi_fcmpgt>
 8009304:	b100      	cbz	r0, 8009308 <neai_classification+0x1c9c>
 8009306:	46b1      	mov	r9, r6
 8009308:	4651      	mov	r1, sl
 800930a:	4648      	mov	r0, r9
 800930c:	f7f7 fef8 	bl	8001100 <__aeabi_fcmpgt>
 8009310:	b100      	cbz	r0, 8009314 <neai_classification+0x1ca8>
 8009312:	46ca      	mov	sl, r9
 8009314:	4659      	mov	r1, fp
 8009316:	4650      	mov	r0, sl
 8009318:	f7f7 fef2 	bl	8001100 <__aeabi_fcmpgt>
 800931c:	b100      	cbz	r0, 8009320 <neai_classification+0x1cb4>
 800931e:	46d3      	mov	fp, sl
 8009320:	4658      	mov	r0, fp
 8009322:	9901      	ldr	r1, [sp, #4]
 8009324:	f7f7 feec 	bl	8001100 <__aeabi_fcmpgt>
 8009328:	b108      	cbz	r0, 800932e <neai_classification+0x1cc2>
 800932a:	f8cd b004 	str.w	fp, [sp, #4]
 800932e:	9d01      	ldr	r5, [sp, #4]
 8009330:	9902      	ldr	r1, [sp, #8]
 8009332:	4628      	mov	r0, r5
 8009334:	f7f7 fee4 	bl	8001100 <__aeabi_fcmpgt>
 8009338:	b100      	cbz	r0, 800933c <neai_classification+0x1cd0>
 800933a:	9502      	str	r5, [sp, #8]
 800933c:	9d02      	ldr	r5, [sp, #8]
 800933e:	9903      	ldr	r1, [sp, #12]
 8009340:	4628      	mov	r0, r5
 8009342:	f7f7 fedd 	bl	8001100 <__aeabi_fcmpgt>
 8009346:	b100      	cbz	r0, 800934a <neai_classification+0x1cde>
 8009348:	9503      	str	r5, [sp, #12]
 800934a:	9d03      	ldr	r5, [sp, #12]
 800934c:	9904      	ldr	r1, [sp, #16]
 800934e:	4628      	mov	r0, r5
 8009350:	f7f7 fed6 	bl	8001100 <__aeabi_fcmpgt>
 8009354:	b100      	cbz	r0, 8009358 <neai_classification+0x1cec>
 8009356:	9504      	str	r5, [sp, #16]
 8009358:	9d04      	ldr	r5, [sp, #16]
 800935a:	9905      	ldr	r1, [sp, #20]
 800935c:	4628      	mov	r0, r5
 800935e:	f7f7 fecf 	bl	8001100 <__aeabi_fcmpgt>
 8009362:	b100      	cbz	r0, 8009366 <neai_classification+0x1cfa>
 8009364:	9505      	str	r5, [sp, #20]
 8009366:	9d05      	ldr	r5, [sp, #20]
 8009368:	9906      	ldr	r1, [sp, #24]
 800936a:	4628      	mov	r0, r5
 800936c:	f7f7 fec8 	bl	8001100 <__aeabi_fcmpgt>
 8009370:	b100      	cbz	r0, 8009374 <neai_classification+0x1d08>
 8009372:	9506      	str	r5, [sp, #24]
 8009374:	9d06      	ldr	r5, [sp, #24]
 8009376:	9907      	ldr	r1, [sp, #28]
 8009378:	4628      	mov	r0, r5
 800937a:	f7f7 fec1 	bl	8001100 <__aeabi_fcmpgt>
 800937e:	b100      	cbz	r0, 8009382 <neai_classification+0x1d16>
 8009380:	9507      	str	r5, [sp, #28]
 8009382:	9d07      	ldr	r5, [sp, #28]
 8009384:	9908      	ldr	r1, [sp, #32]
 8009386:	4628      	mov	r0, r5
 8009388:	f7f7 feba 	bl	8001100 <__aeabi_fcmpgt>
 800938c:	b100      	cbz	r0, 8009390 <neai_classification+0x1d24>
 800938e:	9508      	str	r5, [sp, #32]
 8009390:	9d08      	ldr	r5, [sp, #32]
 8009392:	9800      	ldr	r0, [sp, #0]
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 fe95 	bl	80010c4 <__aeabi_fcmplt>
 800939a:	b100      	cbz	r0, 800939e <neai_classification+0x1d32>
 800939c:	9500      	str	r5, [sp, #0]
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093a2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f7 fe8c 	bl	80010c4 <__aeabi_fcmplt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f041 8580 	bne.w	800aeb2 <neai_classification+0x3846>
 80093b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80093b4:	4608      	mov	r0, r1
 80093b6:	f7f7 fce7 	bl	8000d88 <__aeabi_fmul>
 80093ba:	4601      	mov	r1, r0
 80093bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093be:	f7f7 fd97 	bl	8000ef0 <__aeabi_fdiv>
 80093c2:	4b98      	ldr	r3, [pc, #608]	@ (8009624 <neai_classification+0x1fb8>)
 80093c4:	64d8      	str	r0, [r3, #76]	@ 0x4c
 80093c6:	6825      	ldr	r5, [r4, #0]
 80093c8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80093cc:	4628      	mov	r0, r5
 80093ce:	4641      	mov	r1, r8
 80093d0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80093d2:	f7f7 fe77 	bl	80010c4 <__aeabi_fcmplt>
 80093d6:	b900      	cbnz	r0, 80093da <neai_classification+0x1d6e>
 80093d8:	4645      	mov	r5, r8
 80093da:	68a7      	ldr	r7, [r4, #8]
 80093dc:	4628      	mov	r0, r5
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 fe70 	bl	80010c4 <__aeabi_fcmplt>
 80093e4:	b900      	cbnz	r0, 80093e8 <neai_classification+0x1d7c>
 80093e6:	463d      	mov	r5, r7
 80093e8:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80093ec:	4628      	mov	r0, r5
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fe68 	bl	80010c4 <__aeabi_fcmplt>
 80093f4:	b900      	cbnz	r0, 80093f8 <neai_classification+0x1d8c>
 80093f6:	464d      	mov	r5, r9
 80093f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80093fc:	4628      	mov	r0, r5
 80093fe:	4651      	mov	r1, sl
 8009400:	f7f7 fe60 	bl	80010c4 <__aeabi_fcmplt>
 8009404:	b900      	cbnz	r0, 8009408 <neai_classification+0x1d9c>
 8009406:	4655      	mov	r5, sl
 8009408:	f8d4 b014 	ldr.w	fp, [r4, #20]
 800940c:	4628      	mov	r0, r5
 800940e:	4659      	mov	r1, fp
 8009410:	f7f7 fe58 	bl	80010c4 <__aeabi_fcmplt>
 8009414:	b900      	cbnz	r0, 8009418 <neai_classification+0x1dac>
 8009416:	465d      	mov	r5, fp
 8009418:	69a3      	ldr	r3, [r4, #24]
 800941a:	4628      	mov	r0, r5
 800941c:	4619      	mov	r1, r3
 800941e:	461e      	mov	r6, r3
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f7f7 fe4f 	bl	80010c4 <__aeabi_fcmplt>
 8009426:	b900      	cbnz	r0, 800942a <neai_classification+0x1dbe>
 8009428:	4635      	mov	r5, r6
 800942a:	69e3      	ldr	r3, [r4, #28]
 800942c:	4628      	mov	r0, r5
 800942e:	4619      	mov	r1, r3
 8009430:	461e      	mov	r6, r3
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	f7f7 fe46 	bl	80010c4 <__aeabi_fcmplt>
 8009438:	b900      	cbnz	r0, 800943c <neai_classification+0x1dd0>
 800943a:	4635      	mov	r5, r6
 800943c:	6a23      	ldr	r3, [r4, #32]
 800943e:	4628      	mov	r0, r5
 8009440:	4619      	mov	r1, r3
 8009442:	461e      	mov	r6, r3
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	f7f7 fe3d 	bl	80010c4 <__aeabi_fcmplt>
 800944a:	b900      	cbnz	r0, 800944e <neai_classification+0x1de2>
 800944c:	4635      	mov	r5, r6
 800944e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009450:	4628      	mov	r0, r5
 8009452:	4619      	mov	r1, r3
 8009454:	461e      	mov	r6, r3
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	f7f7 fe34 	bl	80010c4 <__aeabi_fcmplt>
 800945c:	b900      	cbnz	r0, 8009460 <neai_classification+0x1df4>
 800945e:	4635      	mov	r5, r6
 8009460:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009462:	4628      	mov	r0, r5
 8009464:	4619      	mov	r1, r3
 8009466:	461e      	mov	r6, r3
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	f7f7 fe2b 	bl	80010c4 <__aeabi_fcmplt>
 800946e:	b900      	cbnz	r0, 8009472 <neai_classification+0x1e06>
 8009470:	4635      	mov	r5, r6
 8009472:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009474:	4628      	mov	r0, r5
 8009476:	4619      	mov	r1, r3
 8009478:	461e      	mov	r6, r3
 800947a:	9306      	str	r3, [sp, #24]
 800947c:	f7f7 fe22 	bl	80010c4 <__aeabi_fcmplt>
 8009480:	b900      	cbnz	r0, 8009484 <neai_classification+0x1e18>
 8009482:	4635      	mov	r5, r6
 8009484:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009486:	4628      	mov	r0, r5
 8009488:	4619      	mov	r1, r3
 800948a:	461e      	mov	r6, r3
 800948c:	9307      	str	r3, [sp, #28]
 800948e:	f7f7 fe19 	bl	80010c4 <__aeabi_fcmplt>
 8009492:	b900      	cbnz	r0, 8009496 <neai_classification+0x1e2a>
 8009494:	4635      	mov	r5, r6
 8009496:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009498:	4628      	mov	r0, r5
 800949a:	4619      	mov	r1, r3
 800949c:	461e      	mov	r6, r3
 800949e:	9308      	str	r3, [sp, #32]
 80094a0:	f7f7 fe10 	bl	80010c4 <__aeabi_fcmplt>
 80094a4:	b900      	cbnz	r0, 80094a8 <neai_classification+0x1e3c>
 80094a6:	4635      	mov	r5, r6
 80094a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80094aa:	4628      	mov	r0, r5
 80094ac:	4619      	mov	r1, r3
 80094ae:	461e      	mov	r6, r3
 80094b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094b2:	f7f7 fe07 	bl	80010c4 <__aeabi_fcmplt>
 80094b6:	b900      	cbnz	r0, 80094ba <neai_classification+0x1e4e>
 80094b8:	4635      	mov	r5, r6
 80094ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80094bc:	4629      	mov	r1, r5
 80094be:	4618      	mov	r0, r3
 80094c0:	461e      	mov	r6, r3
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	f7f7 fe1c 	bl	8001100 <__aeabi_fcmpgt>
 80094c8:	b900      	cbnz	r0, 80094cc <neai_classification+0x1e60>
 80094ca:	4635      	mov	r5, r6
 80094cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80094ce:	4641      	mov	r1, r8
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7f7 fe15 	bl	8001100 <__aeabi_fcmpgt>
 80094d6:	b900      	cbnz	r0, 80094da <neai_classification+0x1e6e>
 80094d8:	4646      	mov	r6, r8
 80094da:	4639      	mov	r1, r7
 80094dc:	4630      	mov	r0, r6
 80094de:	f7f7 fe0f 	bl	8001100 <__aeabi_fcmpgt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f001 84dc 	beq.w	800aea0 <neai_classification+0x3834>
 80094e8:	4649      	mov	r1, r9
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7f7 fe08 	bl	8001100 <__aeabi_fcmpgt>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f001 84cc 	beq.w	800ae8e <neai_classification+0x3822>
 80094f6:	4651      	mov	r1, sl
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7f7 fe01 	bl	8001100 <__aeabi_fcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f001 84bc 	beq.w	800ae7c <neai_classification+0x3810>
 8009504:	4659      	mov	r1, fp
 8009506:	4630      	mov	r0, r6
 8009508:	f7f7 fdfa 	bl	8001100 <__aeabi_fcmpgt>
 800950c:	2800      	cmp	r0, #0
 800950e:	f001 84ac 	beq.w	800ae6a <neai_classification+0x37fe>
 8009512:	4630      	mov	r0, r6
 8009514:	9901      	ldr	r1, [sp, #4]
 8009516:	f7f7 fdf3 	bl	8001100 <__aeabi_fcmpgt>
 800951a:	2800      	cmp	r0, #0
 800951c:	f001 849c 	beq.w	800ae58 <neai_classification+0x37ec>
 8009520:	4630      	mov	r0, r6
 8009522:	9902      	ldr	r1, [sp, #8]
 8009524:	f7f7 fdec 	bl	8001100 <__aeabi_fcmpgt>
 8009528:	2800      	cmp	r0, #0
 800952a:	f001 848c 	beq.w	800ae46 <neai_classification+0x37da>
 800952e:	4630      	mov	r0, r6
 8009530:	9903      	ldr	r1, [sp, #12]
 8009532:	f7f7 fde5 	bl	8001100 <__aeabi_fcmpgt>
 8009536:	2800      	cmp	r0, #0
 8009538:	f001 847c 	beq.w	800ae34 <neai_classification+0x37c8>
 800953c:	4630      	mov	r0, r6
 800953e:	9904      	ldr	r1, [sp, #16]
 8009540:	f7f7 fdde 	bl	8001100 <__aeabi_fcmpgt>
 8009544:	2800      	cmp	r0, #0
 8009546:	f001 846c 	beq.w	800ae22 <neai_classification+0x37b6>
 800954a:	4630      	mov	r0, r6
 800954c:	9905      	ldr	r1, [sp, #20]
 800954e:	f7f7 fdd7 	bl	8001100 <__aeabi_fcmpgt>
 8009552:	2800      	cmp	r0, #0
 8009554:	f001 8436 	beq.w	800adc4 <neai_classification+0x3758>
 8009558:	4630      	mov	r0, r6
 800955a:	9906      	ldr	r1, [sp, #24]
 800955c:	f7f7 fdd0 	bl	8001100 <__aeabi_fcmpgt>
 8009560:	2800      	cmp	r0, #0
 8009562:	f001 8426 	beq.w	800adb2 <neai_classification+0x3746>
 8009566:	4630      	mov	r0, r6
 8009568:	9907      	ldr	r1, [sp, #28]
 800956a:	f7f7 fdc9 	bl	8001100 <__aeabi_fcmpgt>
 800956e:	2800      	cmp	r0, #0
 8009570:	f001 8416 	beq.w	800ada0 <neai_classification+0x3734>
 8009574:	4630      	mov	r0, r6
 8009576:	9908      	ldr	r1, [sp, #32]
 8009578:	f7f7 fdc2 	bl	8001100 <__aeabi_fcmpgt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f001 8406 	beq.w	800ad8e <neai_classification+0x3722>
 8009582:	4630      	mov	r0, r6
 8009584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009586:	f7f7 fdbb 	bl	8001100 <__aeabi_fcmpgt>
 800958a:	2800      	cmp	r0, #0
 800958c:	f001 8426 	beq.w	800addc <neai_classification+0x3770>
 8009590:	4631      	mov	r1, r6
 8009592:	9800      	ldr	r0, [sp, #0]
 8009594:	f7f7 fd96 	bl	80010c4 <__aeabi_fcmplt>
 8009598:	2800      	cmp	r0, #0
 800959a:	f001 841c 	beq.w	800add6 <neai_classification+0x376a>
 800959e:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80095a2:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80095a6:	4618      	mov	r0, r3
 80095a8:	4629      	mov	r1, r5
 80095aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80095ac:	f7f7 fd8a 	bl	80010c4 <__aeabi_fcmplt>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	f041 841c 	bne.w	800adee <neai_classification+0x3782>
 80095b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095b8:	4608      	mov	r0, r1
 80095ba:	f7f7 fbe5 	bl	8000d88 <__aeabi_fmul>
 80095be:	4605      	mov	r5, r0
 80095c0:	4641      	mov	r1, r8
 80095c2:	4640      	mov	r0, r8
 80095c4:	f7f7 fbe0 	bl	8000d88 <__aeabi_fmul>
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7f7 fad5 	bl	8000b78 <__addsf3>
 80095ce:	4605      	mov	r5, r0
 80095d0:	4639      	mov	r1, r7
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7f7 fbd8 	bl	8000d88 <__aeabi_fmul>
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 facd 	bl	8000b78 <__addsf3>
 80095de:	4605      	mov	r5, r0
 80095e0:	4649      	mov	r1, r9
 80095e2:	4648      	mov	r0, r9
 80095e4:	f7f7 fbd0 	bl	8000d88 <__aeabi_fmul>
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 fac5 	bl	8000b78 <__addsf3>
 80095ee:	4605      	mov	r5, r0
 80095f0:	4651      	mov	r1, sl
 80095f2:	4650      	mov	r0, sl
 80095f4:	f7f7 fbc8 	bl	8000d88 <__aeabi_fmul>
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f7 fabd 	bl	8000b78 <__addsf3>
 80095fe:	4605      	mov	r5, r0
 8009600:	4659      	mov	r1, fp
 8009602:	4658      	mov	r0, fp
 8009604:	f7f7 fbc0 	bl	8000d88 <__aeabi_fmul>
 8009608:	4629      	mov	r1, r5
 800960a:	f7f7 fab5 	bl	8000b78 <__addsf3>
 800960e:	4605      	mov	r5, r0
 8009610:	9901      	ldr	r1, [sp, #4]
 8009612:	4f04      	ldr	r7, [pc, #16]	@ (8009624 <neai_classification+0x1fb8>)
 8009614:	4608      	mov	r0, r1
 8009616:	f7f7 fbb7 	bl	8000d88 <__aeabi_fmul>
 800961a:	4629      	mov	r1, r5
 800961c:	f7f7 faac 	bl	8000b78 <__addsf3>
 8009620:	e002      	b.n	8009628 <neai_classification+0x1fbc>
 8009622:	bf00      	nop
 8009624:	20000568 	.word	0x20000568
 8009628:	4605      	mov	r5, r0
 800962a:	9902      	ldr	r1, [sp, #8]
 800962c:	f8df b2d8 	ldr.w	fp, [pc, #728]	@ 8009908 <neai_classification+0x229c>
 8009630:	4608      	mov	r0, r1
 8009632:	f7f7 fba9 	bl	8000d88 <__aeabi_fmul>
 8009636:	4629      	mov	r1, r5
 8009638:	f7f7 fa9e 	bl	8000b78 <__addsf3>
 800963c:	4605      	mov	r5, r0
 800963e:	9903      	ldr	r1, [sp, #12]
 8009640:	46b8      	mov	r8, r7
 8009642:	4608      	mov	r0, r1
 8009644:	f7f7 fba0 	bl	8000d88 <__aeabi_fmul>
 8009648:	4629      	mov	r1, r5
 800964a:	f7f7 fa95 	bl	8000b78 <__addsf3>
 800964e:	4605      	mov	r5, r0
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	4608      	mov	r0, r1
 8009654:	f7f7 fb98 	bl	8000d88 <__aeabi_fmul>
 8009658:	4629      	mov	r1, r5
 800965a:	f7f7 fa8d 	bl	8000b78 <__addsf3>
 800965e:	4605      	mov	r5, r0
 8009660:	9905      	ldr	r1, [sp, #20]
 8009662:	4608      	mov	r0, r1
 8009664:	f7f7 fb90 	bl	8000d88 <__aeabi_fmul>
 8009668:	4629      	mov	r1, r5
 800966a:	f7f7 fa85 	bl	8000b78 <__addsf3>
 800966e:	4605      	mov	r5, r0
 8009670:	9906      	ldr	r1, [sp, #24]
 8009672:	4608      	mov	r0, r1
 8009674:	f7f7 fb88 	bl	8000d88 <__aeabi_fmul>
 8009678:	4629      	mov	r1, r5
 800967a:	f7f7 fa7d 	bl	8000b78 <__addsf3>
 800967e:	4605      	mov	r5, r0
 8009680:	9907      	ldr	r1, [sp, #28]
 8009682:	4608      	mov	r0, r1
 8009684:	f7f7 fb80 	bl	8000d88 <__aeabi_fmul>
 8009688:	4629      	mov	r1, r5
 800968a:	f7f7 fa75 	bl	8000b78 <__addsf3>
 800968e:	4605      	mov	r5, r0
 8009690:	9908      	ldr	r1, [sp, #32]
 8009692:	4608      	mov	r0, r1
 8009694:	f7f7 fb78 	bl	8000d88 <__aeabi_fmul>
 8009698:	4629      	mov	r1, r5
 800969a:	f7f7 fa6d 	bl	8000b78 <__addsf3>
 800969e:	4605      	mov	r5, r0
 80096a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096a2:	4608      	mov	r0, r1
 80096a4:	f7f7 fb70 	bl	8000d88 <__aeabi_fmul>
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f7 fa65 	bl	8000b78 <__addsf3>
 80096ae:	4605      	mov	r5, r0
 80096b0:	9900      	ldr	r1, [sp, #0]
 80096b2:	4608      	mov	r0, r1
 80096b4:	f7f7 fb68 	bl	8000d88 <__aeabi_fmul>
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f7 fa5d 	bl	8000b78 <__addsf3>
 80096be:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80096c2:	f7f7 fb61 	bl	8000d88 <__aeabi_fmul>
 80096c6:	f004 fa09 	bl	800dadc <sqrtf>
 80096ca:	4601      	mov	r1, r0
 80096cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80096ce:	f7f7 fc0f 	bl	8000ef0 <__aeabi_fdiv>
 80096d2:	64b8      	str	r0, [r7, #72]	@ 0x48
 80096d4:	6865      	ldr	r5, [r4, #4]
 80096d6:	6821      	ldr	r1, [r4, #0]
 80096d8:	4628      	mov	r0, r5
 80096da:	f7f7 fa4b 	bl	8000b74 <__aeabi_fsub>
 80096de:	68a6      	ldr	r6, [r4, #8]
 80096e0:	4629      	mov	r1, r5
 80096e2:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7f7 fa44 	bl	8000b74 <__aeabi_fsub>
 80096ec:	4629      	mov	r1, r5
 80096ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80096f2:	f7f7 fa41 	bl	8000b78 <__addsf3>
 80096f6:	4631      	mov	r1, r6
 80096f8:	68e6      	ldr	r6, [r4, #12]
 80096fa:	4605      	mov	r5, r0
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7f7 fa39 	bl	8000b74 <__aeabi_fsub>
 8009702:	4629      	mov	r1, r5
 8009704:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009708:	f7f7 fa36 	bl	8000b78 <__addsf3>
 800970c:	4631      	mov	r1, r6
 800970e:	6926      	ldr	r6, [r4, #16]
 8009710:	4605      	mov	r5, r0
 8009712:	4630      	mov	r0, r6
 8009714:	f7f7 fa2e 	bl	8000b74 <__aeabi_fsub>
 8009718:	4629      	mov	r1, r5
 800971a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800971e:	f7f7 fa2b 	bl	8000b78 <__addsf3>
 8009722:	4631      	mov	r1, r6
 8009724:	6966      	ldr	r6, [r4, #20]
 8009726:	4605      	mov	r5, r0
 8009728:	4630      	mov	r0, r6
 800972a:	f7f7 fa23 	bl	8000b74 <__aeabi_fsub>
 800972e:	4629      	mov	r1, r5
 8009730:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009734:	f7f7 fa20 	bl	8000b78 <__addsf3>
 8009738:	4631      	mov	r1, r6
 800973a:	69a6      	ldr	r6, [r4, #24]
 800973c:	4605      	mov	r5, r0
 800973e:	4630      	mov	r0, r6
 8009740:	f7f7 fa18 	bl	8000b74 <__aeabi_fsub>
 8009744:	4629      	mov	r1, r5
 8009746:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800974a:	f7f7 fa15 	bl	8000b78 <__addsf3>
 800974e:	4631      	mov	r1, r6
 8009750:	69e6      	ldr	r6, [r4, #28]
 8009752:	4605      	mov	r5, r0
 8009754:	4630      	mov	r0, r6
 8009756:	f7f7 fa0d 	bl	8000b74 <__aeabi_fsub>
 800975a:	4629      	mov	r1, r5
 800975c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009760:	f7f7 fa0a 	bl	8000b78 <__addsf3>
 8009764:	4631      	mov	r1, r6
 8009766:	6a26      	ldr	r6, [r4, #32]
 8009768:	4605      	mov	r5, r0
 800976a:	4630      	mov	r0, r6
 800976c:	f7f7 fa02 	bl	8000b74 <__aeabi_fsub>
 8009770:	4629      	mov	r1, r5
 8009772:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009776:	f7f7 f9ff 	bl	8000b78 <__addsf3>
 800977a:	4631      	mov	r1, r6
 800977c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7f7 f9f7 	bl	8000b74 <__aeabi_fsub>
 8009786:	4629      	mov	r1, r5
 8009788:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800978c:	f7f7 f9f4 	bl	8000b78 <__addsf3>
 8009790:	4631      	mov	r1, r6
 8009792:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009794:	4605      	mov	r5, r0
 8009796:	4630      	mov	r0, r6
 8009798:	f7f7 f9ec 	bl	8000b74 <__aeabi_fsub>
 800979c:	4629      	mov	r1, r5
 800979e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097a2:	f7f7 f9e9 	bl	8000b78 <__addsf3>
 80097a6:	4631      	mov	r1, r6
 80097a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097aa:	4605      	mov	r5, r0
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7f7 f9e1 	bl	8000b74 <__aeabi_fsub>
 80097b2:	4629      	mov	r1, r5
 80097b4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097b8:	f7f7 f9de 	bl	8000b78 <__addsf3>
 80097bc:	4631      	mov	r1, r6
 80097be:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80097c0:	4605      	mov	r5, r0
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7f7 f9d6 	bl	8000b74 <__aeabi_fsub>
 80097c8:	4629      	mov	r1, r5
 80097ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097ce:	f7f7 f9d3 	bl	8000b78 <__addsf3>
 80097d2:	4631      	mov	r1, r6
 80097d4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80097d6:	4605      	mov	r5, r0
 80097d8:	4630      	mov	r0, r6
 80097da:	f7f7 f9cb 	bl	8000b74 <__aeabi_fsub>
 80097de:	4629      	mov	r1, r5
 80097e0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097e4:	f7f7 f9c8 	bl	8000b78 <__addsf3>
 80097e8:	4631      	mov	r1, r6
 80097ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80097ec:	4605      	mov	r5, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7f7 f9c0 	bl	8000b74 <__aeabi_fsub>
 80097f4:	4629      	mov	r1, r5
 80097f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80097fa:	f7f7 f9bd 	bl	8000b78 <__addsf3>
 80097fe:	4631      	mov	r1, r6
 8009800:	4605      	mov	r5, r0
 8009802:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009804:	f7f7 f9b6 	bl	8000b74 <__aeabi_fsub>
 8009808:	4629      	mov	r1, r5
 800980a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800980e:	f7f7 f9b3 	bl	8000b78 <__addsf3>
 8009812:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	210f      	movs	r1, #15
 8009818:	f8cb 3000 	str.w	r3, [fp]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	2000      	movs	r0, #0
 8009820:	f8cb 3004 	str.w	r3, [fp, #4]
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	f8cb 3008 	str.w	r3, [fp, #8]
 800982a:	68e3      	ldr	r3, [r4, #12]
 800982c:	f8cb 300c 	str.w	r3, [fp, #12]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	f8cb 3010 	str.w	r3, [fp, #16]
 8009836:	6963      	ldr	r3, [r4, #20]
 8009838:	f8cb 3014 	str.w	r3, [fp, #20]
 800983c:	69a3      	ldr	r3, [r4, #24]
 800983e:	f8cb 3018 	str.w	r3, [fp, #24]
 8009842:	69e3      	ldr	r3, [r4, #28]
 8009844:	f8cb 301c 	str.w	r3, [fp, #28]
 8009848:	6a23      	ldr	r3, [r4, #32]
 800984a:	f8cb 3020 	str.w	r3, [fp, #32]
 800984e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009850:	f8cb 3024 	str.w	r3, [fp, #36]	@ 0x24
 8009854:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009856:	f8cb 3028 	str.w	r3, [fp, #40]	@ 0x28
 800985a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800985c:	f8cb 302c 	str.w	r3, [fp, #44]	@ 0x2c
 8009860:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009862:	f8cb 3030 	str.w	r3, [fp, #48]	@ 0x30
 8009866:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009868:	f8cb 3034 	str.w	r3, [fp, #52]	@ 0x34
 800986c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800986e:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8009872:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009874:	f8cb 303c 	str.w	r3, [fp, #60]	@ 0x3c
 8009878:	f7fd fd8c 	bl	8007394 <funchclassifier78.constprop.0>
 800987c:	f8db 5000 	ldr.w	r5, [fp]
 8009880:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f7f7 f974 	bl	8000b74 <__aeabi_fsub>
 800988c:	491f      	ldr	r1, [pc, #124]	@ (800990c <neai_classification+0x22a0>)
 800988e:	f7f7 fa7b 	bl	8000d88 <__aeabi_fmul>
 8009892:	4629      	mov	r1, r5
 8009894:	f7f7 f970 	bl	8000b78 <__addsf3>
 8009898:	f8db 3010 	ldr.w	r3, [fp, #16]
 800989c:	6278      	str	r0, [r7, #36]	@ 0x24
 800989e:	f8db 700c 	ldr.w	r7, [fp, #12]
 80098a2:	4618      	mov	r0, r3
 80098a4:	4639      	mov	r1, r7
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	f7f7 f964 	bl	8000b74 <__aeabi_fsub>
 80098ac:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 80098b0:	f7f7 fa6a 	bl	8000d88 <__aeabi_fmul>
 80098b4:	4639      	mov	r1, r7
 80098b6:	f7f7 f95f 	bl	8000b78 <__addsf3>
 80098ba:	f8db 3030 	ldr.w	r3, [fp, #48]	@ 0x30
 80098be:	f8db a02c 	ldr.w	sl, [fp, #44]	@ 0x2c
 80098c2:	f8c8 0028 	str.w	r0, [r8, #40]	@ 0x28
 80098c6:	4651      	mov	r1, sl
 80098c8:	4618      	mov	r0, r3
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	f7f7 f952 	bl	8000b74 <__aeabi_fsub>
 80098d0:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80098d4:	f7f7 fa58 	bl	8000d88 <__aeabi_fmul>
 80098d8:	4651      	mov	r1, sl
 80098da:	f7f7 f94d 	bl	8000b78 <__addsf3>
 80098de:	f8db 303c 	ldr.w	r3, [fp, #60]	@ 0x3c
 80098e2:	f8db 9038 	ldr.w	r9, [fp, #56]	@ 0x38
 80098e6:	f8c8 001c 	str.w	r0, [r8, #28]
 80098ea:	4649      	mov	r1, r9
 80098ec:	4618      	mov	r0, r3
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	f7f7 f940 	bl	8000b74 <__aeabi_fsub>
 80098f4:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80098f8:	f7f7 fa46 	bl	8000d88 <__aeabi_fmul>
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f7 f93b 	bl	8000b78 <__addsf3>
 8009902:	f8db 2020 	ldr.w	r2, [fp, #32]
 8009906:	e003      	b.n	8009910 <neai_classification+0x22a4>
 8009908:	200004fc 	.word	0x200004fc
 800990c:	3f3fffff 	.word	0x3f3fffff
 8009910:	f8c8 0018 	str.w	r0, [r8, #24]
 8009914:	f8db 801c 	ldr.w	r8, [fp, #28]
 8009918:	4610      	mov	r0, r2
 800991a:	4641      	mov	r1, r8
 800991c:	9202      	str	r2, [sp, #8]
 800991e:	f7f7 f929 	bl	8000b74 <__aeabi_fsub>
 8009922:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009926:	f7f7 fa2f 	bl	8000d88 <__aeabi_fmul>
 800992a:	4641      	mov	r1, r8
 800992c:	f7f7 f924 	bl	8000b78 <__addsf3>
 8009930:	4ba1      	ldr	r3, [pc, #644]	@ (8009bb8 <neai_classification+0x254c>)
 8009932:	4629      	mov	r1, r5
 8009934:	6318      	str	r0, [r3, #48]	@ 0x30
 8009936:	4630      	mov	r0, r6
 8009938:	f7f7 fbba 	bl	80010b0 <__aeabi_fcmpeq>
 800993c:	2800      	cmp	r0, #0
 800993e:	f001 80fc 	beq.w	800ab3a <neai_classification+0x34ce>
 8009942:	462e      	mov	r6, r5
 8009944:	2302      	movs	r3, #2
 8009946:	2500      	movs	r5, #0
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800994e:	4630      	mov	r0, r6
 8009950:	4619      	mov	r1, r3
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	f7f7 fbac 	bl	80010b0 <__aeabi_fcmpeq>
 8009958:	9b05      	ldr	r3, [sp, #20]
 800995a:	2800      	cmp	r0, #0
 800995c:	f001 80d6 	beq.w	800ab0c <neai_classification+0x34a0>
 8009960:	3301      	adds	r3, #1
 8009962:	4631      	mov	r1, r6
 8009964:	4638      	mov	r0, r7
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	f7f7 fba2 	bl	80010b0 <__aeabi_fcmpeq>
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	2800      	cmp	r0, #0
 8009970:	f001 80b5 	beq.w	800aade <neai_classification+0x3472>
 8009974:	3301      	adds	r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	4631      	mov	r1, r6
 800997a:	9800      	ldr	r0, [sp, #0]
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	f7f7 fb97 	bl	80010b0 <__aeabi_fcmpeq>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	2800      	cmp	r0, #0
 8009986:	f001 8093 	beq.w	800aab0 <neai_classification+0x3444>
 800998a:	3301      	adds	r3, #1
 800998c:	b29b      	uxth	r3, r3
 800998e:	f8db 7014 	ldr.w	r7, [fp, #20]
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	f7f7 fb8a 	bl	80010b0 <__aeabi_fcmpeq>
 800999c:	9b00      	ldr	r3, [sp, #0]
 800999e:	2800      	cmp	r0, #0
 80099a0:	f001 806f 	beq.w	800aa82 <neai_classification+0x3416>
 80099a4:	3301      	adds	r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f8db 7018 	ldr.w	r7, [fp, #24]
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	f7f7 fb7d 	bl	80010b0 <__aeabi_fcmpeq>
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	f001 804b 	beq.w	800aa54 <neai_classification+0x33e8>
 80099be:	3301      	adds	r3, #1
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	4631      	mov	r1, r6
 80099c4:	4640      	mov	r0, r8
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	f7f7 fb72 	bl	80010b0 <__aeabi_fcmpeq>
 80099cc:	9b00      	ldr	r3, [sp, #0]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f001 801f 	beq.w	800aa12 <neai_classification+0x33a6>
 80099d4:	3301      	adds	r3, #1
 80099d6:	b29f      	uxth	r7, r3
 80099d8:	4631      	mov	r1, r6
 80099da:	9802      	ldr	r0, [sp, #8]
 80099dc:	f7f7 fb68 	bl	80010b0 <__aeabi_fcmpeq>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f000 87fe 	beq.w	800a9e2 <neai_classification+0x3376>
 80099e6:	3701      	adds	r7, #1
 80099e8:	fa1f f887 	uxth.w	r8, r7
 80099ec:	f8db 7024 	ldr.w	r7, [fp, #36]	@ 0x24
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 fb5c 	bl	80010b0 <__aeabi_fcmpeq>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f000 87da 	beq.w	800a9b2 <neai_classification+0x3346>
 80099fe:	f108 0801 	add.w	r8, r8, #1
 8009a02:	fa1f f888 	uxth.w	r8, r8
 8009a06:	f8db 7028 	ldr.w	r7, [fp, #40]	@ 0x28
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	f7f7 fb4f 	bl	80010b0 <__aeabi_fcmpeq>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f000 87b5 	beq.w	800a982 <neai_classification+0x3316>
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	fa1f f888 	uxth.w	r8, r8
 8009a20:	4631      	mov	r1, r6
 8009a22:	4650      	mov	r0, sl
 8009a24:	f7f7 fb44 	bl	80010b0 <__aeabi_fcmpeq>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f000 8793 	beq.w	800a954 <neai_classification+0x32e8>
 8009a2e:	f108 0701 	add.w	r7, r8, #1
 8009a32:	b2bf      	uxth	r7, r7
 8009a34:	4631      	mov	r1, r6
 8009a36:	9801      	ldr	r0, [sp, #4]
 8009a38:	f7f7 fb3a 	bl	80010b0 <__aeabi_fcmpeq>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f000 8771 	beq.w	800a924 <neai_classification+0x32b8>
 8009a42:	3701      	adds	r7, #1
 8009a44:	fa1f f887 	uxth.w	r8, r7
 8009a48:	f8db 7034 	ldr.w	r7, [fp, #52]	@ 0x34
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f7 fb2e 	bl	80010b0 <__aeabi_fcmpeq>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f000 874d 	beq.w	800a8f4 <neai_classification+0x3288>
 8009a5a:	f108 0801 	add.w	r8, r8, #1
 8009a5e:	fa1f f888 	uxth.w	r8, r8
 8009a62:	4631      	mov	r1, r6
 8009a64:	4648      	mov	r0, r9
 8009a66:	f7f7 fb23 	bl	80010b0 <__aeabi_fcmpeq>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f000 872b 	beq.w	800a8c6 <neai_classification+0x325a>
 8009a70:	f108 0701 	add.w	r7, r8, #1
 8009a74:	b2bf      	uxth	r7, r7
 8009a76:	4631      	mov	r1, r6
 8009a78:	9803      	ldr	r0, [sp, #12]
 8009a7a:	f7f7 fb19 	bl	80010b0 <__aeabi_fcmpeq>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f000 870b 	beq.w	800a89a <neai_classification+0x322e>
 8009a84:	1c7b      	adds	r3, r7, #1
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f7 f929 	bl	8000ce0 <__aeabi_i2f>
 8009a8e:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8009a92:	f7f7 f979 	bl	8000d88 <__aeabi_fmul>
 8009a96:	4606      	mov	r6, r0
 8009a98:	f003 fff8 	bl	800da8c <logf>
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7f7 f972 	bl	8000d88 <__aeabi_fmul>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7f7 f867 	bl	8000b78 <__addsf3>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8009ab0:	4841      	ldr	r0, [pc, #260]	@ (8009bb8 <neai_classification+0x254c>)
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6583      	str	r3, [r0, #88]	@ 0x58
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	4e40      	ldr	r6, [pc, #256]	@ (8009bbc <neai_classification+0x2550>)
 8009aba:	f8cb 3000 	str.w	r3, [fp]
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	6032      	str	r2, [r6, #0]
 8009ac2:	f8cb 3004 	str.w	r3, [fp, #4]
 8009ac6:	68a3      	ldr	r3, [r4, #8]
 8009ac8:	6072      	str	r2, [r6, #4]
 8009aca:	f8cb 3008 	str.w	r3, [fp, #8]
 8009ace:	68e3      	ldr	r3, [r4, #12]
 8009ad0:	60b2      	str	r2, [r6, #8]
 8009ad2:	f8cb 300c 	str.w	r3, [fp, #12]
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	60f2      	str	r2, [r6, #12]
 8009ada:	f8cb 3010 	str.w	r3, [fp, #16]
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	6132      	str	r2, [r6, #16]
 8009ae2:	f8cb 3014 	str.w	r3, [fp, #20]
 8009ae6:	69a3      	ldr	r3, [r4, #24]
 8009ae8:	6172      	str	r2, [r6, #20]
 8009aea:	f8cb 3018 	str.w	r3, [fp, #24]
 8009aee:	69e3      	ldr	r3, [r4, #28]
 8009af0:	61b2      	str	r2, [r6, #24]
 8009af2:	f8cb 301c 	str.w	r3, [fp, #28]
 8009af6:	6a23      	ldr	r3, [r4, #32]
 8009af8:	61f2      	str	r2, [r6, #28]
 8009afa:	f8cb 3020 	str.w	r3, [fp, #32]
 8009afe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b00:	6232      	str	r2, [r6, #32]
 8009b02:	f8cb 3024 	str.w	r3, [fp, #36]	@ 0x24
 8009b06:	6272      	str	r2, [r6, #36]	@ 0x24
 8009b08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009b0a:	62b2      	str	r2, [r6, #40]	@ 0x28
 8009b0c:	f8cb 3028 	str.w	r3, [fp, #40]	@ 0x28
 8009b10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009b12:	62f2      	str	r2, [r6, #44]	@ 0x2c
 8009b14:	f8cb 302c 	str.w	r3, [fp, #44]	@ 0x2c
 8009b18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009b1a:	6332      	str	r2, [r6, #48]	@ 0x30
 8009b1c:	f8cb 3030 	str.w	r3, [fp, #48]	@ 0x30
 8009b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b22:	6372      	str	r2, [r6, #52]	@ 0x34
 8009b24:	f8cb 3034 	str.w	r3, [fp, #52]	@ 0x34
 8009b28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009b2a:	63b2      	str	r2, [r6, #56]	@ 0x38
 8009b2c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8009b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009b32:	63f2      	str	r2, [r6, #60]	@ 0x3c
 8009b34:	f8cb 303c 	str.w	r3, [fp, #60]	@ 0x3c
 8009b38:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009bc0 <neai_classification+0x2554>
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4658      	mov	r0, fp
 8009b40:	b28a      	uxth	r2, r1
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d905      	bls.n	8009b52 <neai_classification+0x24e6>
 8009b46:	6802      	ldr	r2, [r0, #0]
 8009b48:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
 8009b4c:	6004      	str	r4, [r0, #0]
 8009b4e:	f84b 2023 	str.w	r2, [fp, r3, lsl #2]
 8009b52:	2b07      	cmp	r3, #7
 8009b54:	f04f 0208 	mov.w	r2, #8
 8009b58:	d904      	bls.n	8009b64 <neai_classification+0x24f8>
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	0852      	lsrs	r2, r2, #1
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d2fa      	bcs.n	8009b5a <neai_classification+0x24ee>
 8009b64:	3101      	adds	r1, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	290f      	cmp	r1, #15
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	f100 0004 	add.w	r0, r0, #4
 8009b70:	d1e6      	bne.n	8009b40 <neai_classification+0x24d4>
 8009b72:	2304      	movs	r3, #4
 8009b74:	4f13      	ldr	r7, [pc, #76]	@ (8009bc4 <neai_classification+0x2558>)
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	46b8      	mov	r8, r7
 8009b7e:	461f      	mov	r7, r3
 8009b80:	9201      	str	r2, [sp, #4]
 8009b82:	f8cd a014 	str.w	sl, [sp, #20]
 8009b86:	9a01      	ldr	r2, [sp, #4]
 8009b88:	0053      	lsls	r3, r2, #1
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	9202      	str	r2, [sp, #8]
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	f000 8085 	beq.w	8009ca0 <neai_classification+0x2634>
 8009b96:	2500      	movs	r5, #0
 8009b98:	1e53      	subs	r3, r2, #1
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b0f      	cmp	r3, #15
 8009b9e:	bf28      	it	cs
 8009ba0:	230f      	movcs	r3, #15
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	f04f 5a7e 	mov.w	sl, #1065353216	@ 0x3f800000
 8009baa:	462c      	mov	r4, r5
 8009bac:	9306      	str	r3, [sp, #24]
 8009bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb2:	9707      	str	r7, [sp, #28]
 8009bb4:	9504      	str	r5, [sp, #16]
 8009bb6:	e007      	b.n	8009bc8 <neai_classification+0x255c>
 8009bb8:	20000568 	.word	0x20000568
 8009bbc:	200004bc 	.word	0x200004bc
 8009bc0:	200004fc 	.word	0x200004fc
 8009bc4:	bf800000 	.word	0xbf800000
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	4650      	mov	r0, sl
 8009bcc:	191d      	adds	r5, r3, r4
 8009bce:	b2ad      	uxth	r5, r5
 8009bd0:	f85b 7025 	ldr.w	r7, [fp, r5, lsl #2]
 8009bd4:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8009bd8:	4639      	mov	r1, r7
 8009bda:	f7f7 f8d5 	bl	8000d88 <__aeabi_fmul>
 8009bde:	4641      	mov	r1, r8
 8009be0:	9000      	str	r0, [sp, #0]
 8009be2:	4648      	mov	r0, r9
 8009be4:	f7f7 f8d0 	bl	8000d88 <__aeabi_fmul>
 8009be8:	4601      	mov	r1, r0
 8009bea:	9800      	ldr	r0, [sp, #0]
 8009bec:	f7f6 ffc2 	bl	8000b74 <__aeabi_fsub>
 8009bf0:	4641      	mov	r1, r8
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	f7f7 f8c7 	bl	8000d88 <__aeabi_fmul>
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	4648      	mov	r0, r9
 8009c00:	f7f7 f8c2 	bl	8000d88 <__aeabi_fmul>
 8009c04:	4601      	mov	r1, r0
 8009c06:	4638      	mov	r0, r7
 8009c08:	f7f6 ffb6 	bl	8000b78 <__addsf3>
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	4607      	mov	r7, r0
 8009c10:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8009c14:	f7f6 ffae 	bl	8000b74 <__aeabi_fsub>
 8009c18:	4639      	mov	r1, r7
 8009c1a:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8009c1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c22:	f7f6 ffa7 	bl	8000b74 <__aeabi_fsub>
 8009c26:	4641      	mov	r1, r8
 8009c28:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8009c2c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8009c30:	f7f6 ffa2 	bl	8000b78 <__addsf3>
 8009c34:	4639      	mov	r1, r7
 8009c36:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8009c3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c3e:	f7f6 ff9b 	bl	8000b78 <__addsf3>
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8009c48:	441c      	add	r4, r3
 8009c4a:	b2a4      	uxth	r4, r4
 8009c4c:	2c0f      	cmp	r4, #15
 8009c4e:	d9bb      	bls.n	8009bc8 <neai_classification+0x255c>
 8009c50:	9903      	ldr	r1, [sp, #12]
 8009c52:	4650      	mov	r0, sl
 8009c54:	f7f7 f898 	bl	8000d88 <__aeabi_fmul>
 8009c58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	4641      	mov	r1, r8
 8009c60:	4648      	mov	r0, r9
 8009c62:	f7f7 f891 	bl	8000d88 <__aeabi_fmul>
 8009c66:	4601      	mov	r1, r0
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7f6 ff83 	bl	8000b74 <__aeabi_fsub>
 8009c6e:	9903      	ldr	r1, [sp, #12]
 8009c70:	4607      	mov	r7, r0
 8009c72:	4648      	mov	r0, r9
 8009c74:	f7f7 f888 	bl	8000d88 <__aeabi_fmul>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	f7f7 f883 	bl	8000d88 <__aeabi_fmul>
 8009c82:	4621      	mov	r1, r4
 8009c84:	f7f6 ff78 	bl	8000b78 <__addsf3>
 8009c88:	9d04      	ldr	r5, [sp, #16]
 8009c8a:	9b06      	ldr	r3, [sp, #24]
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	b2ac      	uxth	r4, r5
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	4681      	mov	r9, r0
 8009c94:	d301      	bcc.n	8009c9a <neai_classification+0x262e>
 8009c96:	46ba      	mov	sl, r7
 8009c98:	e78c      	b.n	8009bb4 <neai_classification+0x2548>
 8009c9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c9e:	9f07      	ldr	r7, [sp, #28]
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009ca6:	f7f6 ff65 	bl	8000b74 <__aeabi_fsub>
 8009caa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009cae:	f7f7 f86b 	bl	8000d88 <__aeabi_fmul>
 8009cb2:	f003 ff13 	bl	800dadc <sqrtf>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009cbc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	f7f6 ff58 	bl	8000b78 <__addsf3>
 8009cc8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009ccc:	f7f7 f85c 	bl	8000d88 <__aeabi_fmul>
 8009cd0:	f003 ff04 	bl	800dadc <sqrtf>
 8009cd4:	1e7b      	subs	r3, r7, #1
 8009cd6:	b29f      	uxth	r7, r3
 8009cd8:	4680      	mov	r8, r0
 8009cda:	2f00      	cmp	r7, #0
 8009cdc:	f47f af53 	bne.w	8009b86 <neai_classification+0x251a>
 8009ce0:	f8db 0000 	ldr.w	r0, [fp]
 8009ce4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009ce8:	9700      	str	r7, [sp, #0]
 8009cea:	f7f7 f84d 	bl	8000d88 <__aeabi_fmul>
 8009cee:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009cf2:	f8cb 0000 	str.w	r0, [fp]
 8009cf6:	f8db 0004 	ldr.w	r0, [fp, #4]
 8009cfa:	f7f7 f845 	bl	8000d88 <__aeabi_fmul>
 8009cfe:	4681      	mov	r9, r0
 8009d00:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d04:	6870      	ldr	r0, [r6, #4]
 8009d06:	f8cb 9004 	str.w	r9, [fp, #4]
 8009d0a:	f7f7 f83d 	bl	8000d88 <__aeabi_fmul>
 8009d0e:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d12:	9001      	str	r0, [sp, #4]
 8009d14:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009d18:	f7f7 f836 	bl	8000d88 <__aeabi_fmul>
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d22:	68b0      	ldr	r0, [r6, #8]
 8009d24:	f8cb 7008 	str.w	r7, [fp, #8]
 8009d28:	f7f7 f82e 	bl	8000d88 <__aeabi_fmul>
 8009d2c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d30:	9002      	str	r0, [sp, #8]
 8009d32:	f8db 000c 	ldr.w	r0, [fp, #12]
 8009d36:	f7f7 f827 	bl	8000d88 <__aeabi_fmul>
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d40:	68f0      	ldr	r0, [r6, #12]
 8009d42:	f8cb 500c 	str.w	r5, [fp, #12]
 8009d46:	f7f7 f81f 	bl	8000d88 <__aeabi_fmul>
 8009d4a:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d4e:	9003      	str	r0, [sp, #12]
 8009d50:	f8db 0010 	ldr.w	r0, [fp, #16]
 8009d54:	f7f7 f818 	bl	8000d88 <__aeabi_fmul>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d5e:	6930      	ldr	r0, [r6, #16]
 8009d60:	f8cb 4010 	str.w	r4, [fp, #16]
 8009d64:	f7f7 f810 	bl	8000d88 <__aeabi_fmul>
 8009d68:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d6c:	9004      	str	r0, [sp, #16]
 8009d6e:	f8db 0014 	ldr.w	r0, [fp, #20]
 8009d72:	f7f7 f809 	bl	8000d88 <__aeabi_fmul>
 8009d76:	4680      	mov	r8, r0
 8009d78:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d7c:	6970      	ldr	r0, [r6, #20]
 8009d7e:	f8cb 8014 	str.w	r8, [fp, #20]
 8009d82:	f7f7 f801 	bl	8000d88 <__aeabi_fmul>
 8009d86:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d8a:	9005      	str	r0, [sp, #20]
 8009d8c:	f8db 0018 	ldr.w	r0, [fp, #24]
 8009d90:	f7f6 fffa 	bl	8000d88 <__aeabi_fmul>
 8009d94:	4682      	mov	sl, r0
 8009d96:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009d9a:	69b0      	ldr	r0, [r6, #24]
 8009d9c:	f8cb a018 	str.w	sl, [fp, #24]
 8009da0:	f7f6 fff2 	bl	8000d88 <__aeabi_fmul>
 8009da4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009da8:	9006      	str	r0, [sp, #24]
 8009daa:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009dae:	f7f6 ffeb 	bl	8000d88 <__aeabi_fmul>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009db8:	f8cb 301c 	str.w	r3, [fp, #28]
 8009dbc:	69f0      	ldr	r0, [r6, #28]
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	f7f6 ffe2 	bl	8000d88 <__aeabi_fmul>
 8009dc4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009dc8:	9008      	str	r0, [sp, #32]
 8009dca:	f8db 0020 	ldr.w	r0, [fp, #32]
 8009dce:	f7f6 ffdb 	bl	8000d88 <__aeabi_fmul>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009dd8:	f8cb 3020 	str.w	r3, [fp, #32]
 8009ddc:	6a30      	ldr	r0, [r6, #32]
 8009dde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009de0:	f7f6 ffd2 	bl	8000d88 <__aeabi_fmul>
 8009de4:	4602      	mov	r2, r0
 8009de6:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009dea:	6232      	str	r2, [r6, #32]
 8009dec:	f8db 0024 	ldr.w	r0, [fp, #36]	@ 0x24
 8009df0:	920a      	str	r2, [sp, #40]	@ 0x28
 8009df2:	f7f6 ffc9 	bl	8000d88 <__aeabi_fmul>
 8009df6:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009dfa:	f8cb 0024 	str.w	r0, [fp, #36]	@ 0x24
 8009dfe:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8009e00:	f7f6 ffc2 	bl	8000d88 <__aeabi_fmul>
 8009e04:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e08:	6270      	str	r0, [r6, #36]	@ 0x24
 8009e0a:	f8db 0028 	ldr.w	r0, [fp, #40]	@ 0x28
 8009e0e:	f7f6 ffbb 	bl	8000d88 <__aeabi_fmul>
 8009e12:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e16:	f8cb 0028 	str.w	r0, [fp, #40]	@ 0x28
 8009e1a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8009e1c:	f7f6 ffb4 	bl	8000d88 <__aeabi_fmul>
 8009e20:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e24:	62b0      	str	r0, [r6, #40]	@ 0x28
 8009e26:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8009e2a:	f7f6 ffad 	bl	8000d88 <__aeabi_fmul>
 8009e2e:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e32:	f8cb 002c 	str.w	r0, [fp, #44]	@ 0x2c
 8009e36:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8009e38:	f7f6 ffa6 	bl	8000d88 <__aeabi_fmul>
 8009e3c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e40:	62f0      	str	r0, [r6, #44]	@ 0x2c
 8009e42:	f8db 0030 	ldr.w	r0, [fp, #48]	@ 0x30
 8009e46:	f7f6 ff9f 	bl	8000d88 <__aeabi_fmul>
 8009e4a:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e4e:	f8cb 0030 	str.w	r0, [fp, #48]	@ 0x30
 8009e52:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8009e54:	f7f6 ff98 	bl	8000d88 <__aeabi_fmul>
 8009e58:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e5c:	6330      	str	r0, [r6, #48]	@ 0x30
 8009e5e:	f8db 0034 	ldr.w	r0, [fp, #52]	@ 0x34
 8009e62:	f7f6 ff91 	bl	8000d88 <__aeabi_fmul>
 8009e66:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e6a:	f8cb 0034 	str.w	r0, [fp, #52]	@ 0x34
 8009e6e:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8009e70:	f7f6 ff8a 	bl	8000d88 <__aeabi_fmul>
 8009e74:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e78:	6370      	str	r0, [r6, #52]	@ 0x34
 8009e7a:	f8db 0038 	ldr.w	r0, [fp, #56]	@ 0x38
 8009e7e:	f7f6 ff83 	bl	8000d88 <__aeabi_fmul>
 8009e82:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e86:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8009e8a:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8009e8c:	f7f6 ff7c 	bl	8000d88 <__aeabi_fmul>
 8009e90:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009e94:	63b0      	str	r0, [r6, #56]	@ 0x38
 8009e96:	f8db 003c 	ldr.w	r0, [fp, #60]	@ 0x3c
 8009e9a:	f7f6 ff75 	bl	8000d88 <__aeabi_fmul>
 8009e9e:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8009ea2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8009ea6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8009ea8:	f7f6 ff6e 	bl	8000d88 <__aeabi_fmul>
 8009eac:	4649      	mov	r1, r9
 8009eae:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f7f6 ff69 	bl	8000d88 <__aeabi_fmul>
 8009eb6:	9901      	ldr	r1, [sp, #4]
 8009eb8:	4681      	mov	r9, r0
 8009eba:	4608      	mov	r0, r1
 8009ebc:	f7f6 ff64 	bl	8000d88 <__aeabi_fmul>
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	4648      	mov	r0, r9
 8009ec4:	f7f6 fe58 	bl	8000b78 <__addsf3>
 8009ec8:	4639      	mov	r1, r7
 8009eca:	6030      	str	r0, [r6, #0]
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7f6 ff5b 	bl	8000d88 <__aeabi_fmul>
 8009ed2:	9902      	ldr	r1, [sp, #8]
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	f7f6 ff56 	bl	8000d88 <__aeabi_fmul>
 8009edc:	4601      	mov	r1, r0
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7f6 fe4a 	bl	8000b78 <__addsf3>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	6070      	str	r0, [r6, #4]
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f7f6 ff4d 	bl	8000d88 <__aeabi_fmul>
 8009eee:	9903      	ldr	r1, [sp, #12]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f7f6 ff48 	bl	8000d88 <__aeabi_fmul>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4628      	mov	r0, r5
 8009efc:	f7f6 fe3c 	bl	8000b78 <__addsf3>
 8009f00:	4621      	mov	r1, r4
 8009f02:	60b0      	str	r0, [r6, #8]
 8009f04:	4620      	mov	r0, r4
 8009f06:	f7f6 ff3f 	bl	8000d88 <__aeabi_fmul>
 8009f0a:	9904      	ldr	r1, [sp, #16]
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	f7f6 ff3a 	bl	8000d88 <__aeabi_fmul>
 8009f14:	4601      	mov	r1, r0
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7f6 fe2e 	bl	8000b78 <__addsf3>
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	60f0      	str	r0, [r6, #12]
 8009f20:	4640      	mov	r0, r8
 8009f22:	f7f6 ff31 	bl	8000d88 <__aeabi_fmul>
 8009f26:	9905      	ldr	r1, [sp, #20]
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	f7f6 ff2c 	bl	8000d88 <__aeabi_fmul>
 8009f30:	4601      	mov	r1, r0
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7f6 fe20 	bl	8000b78 <__addsf3>
 8009f38:	4651      	mov	r1, sl
 8009f3a:	6130      	str	r0, [r6, #16]
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	f7f6 ff23 	bl	8000d88 <__aeabi_fmul>
 8009f42:	9906      	ldr	r1, [sp, #24]
 8009f44:	4604      	mov	r4, r0
 8009f46:	4608      	mov	r0, r1
 8009f48:	f7f6 ff1e 	bl	8000d88 <__aeabi_fmul>
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7f6 fe12 	bl	8000b78 <__addsf3>
 8009f54:	9907      	ldr	r1, [sp, #28]
 8009f56:	6170      	str	r0, [r6, #20]
 8009f58:	4608      	mov	r0, r1
 8009f5a:	f7f6 ff15 	bl	8000d88 <__aeabi_fmul>
 8009f5e:	9908      	ldr	r1, [sp, #32]
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	f7f6 ff10 	bl	8000d88 <__aeabi_fmul>
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7f6 fe04 	bl	8000b78 <__addsf3>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f72:	61b0      	str	r0, [r6, #24]
 8009f74:	4619      	mov	r1, r3
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7f6 ff06 	bl	8000d88 <__aeabi_fmul>
 8009f7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4611      	mov	r1, r2
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7f6 ff00 	bl	8000d88 <__aeabi_fmul>
 8009f88:	4601      	mov	r1, r0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f7f6 fdf4 	bl	8000b78 <__addsf3>
 8009f90:	4c94      	ldr	r4, [pc, #592]	@ (800a1e4 <neai_classification+0x2b78>)
 8009f92:	61f0      	str	r0, [r6, #28]
 8009f94:	f104 0520 	add.w	r5, r4, #32
 8009f98:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009f9c:	f003 fd9e 	bl	800dadc <sqrtf>
 8009fa0:	42a5      	cmp	r5, r4
 8009fa2:	6020      	str	r0, [r4, #0]
 8009fa4:	d1f8      	bne.n	8009f98 <neai_classification+0x292c>
 8009fa6:	6834      	ldr	r4, [r6, #0]
 8009fa8:	6877      	ldr	r7, [r6, #4]
 8009faa:	4621      	mov	r1, r4
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7f7 f8a7 	bl	8001100 <__aeabi_fcmpgt>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f040 85c5 	bne.w	800ab42 <neai_classification+0x34d6>
 8009fb8:	46b8      	mov	r8, r7
 8009fba:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8009fbe:	4641      	mov	r1, r8
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	f7f7 f89d 	bl	8001100 <__aeabi_fcmpgt>
 8009fc6:	b900      	cbnz	r0, 8009fca <neai_classification+0x295e>
 8009fc8:	46d0      	mov	r8, sl
 8009fca:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8009fce:	4641      	mov	r1, r8
 8009fd0:	4658      	mov	r0, fp
 8009fd2:	f7f7 f895 	bl	8001100 <__aeabi_fcmpgt>
 8009fd6:	b900      	cbnz	r0, 8009fda <neai_classification+0x296e>
 8009fd8:	46d8      	mov	r8, fp
 8009fda:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8009fde:	4641      	mov	r1, r8
 8009fe0:	4648      	mov	r0, r9
 8009fe2:	f7f7 f88d 	bl	8001100 <__aeabi_fcmpgt>
 8009fe6:	b900      	cbnz	r0, 8009fea <neai_classification+0x297e>
 8009fe8:	46c8      	mov	r8, r9
 8009fea:	6973      	ldr	r3, [r6, #20]
 8009fec:	4641      	mov	r1, r8
 8009fee:	4618      	mov	r0, r3
 8009ff0:	461d      	mov	r5, r3
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	f7f7 f884 	bl	8001100 <__aeabi_fcmpgt>
 8009ff8:	b900      	cbnz	r0, 8009ffc <neai_classification+0x2990>
 8009ffa:	46a8      	mov	r8, r5
 8009ffc:	69b5      	ldr	r5, [r6, #24]
 8009ffe:	4640      	mov	r0, r8
 800a000:	4629      	mov	r1, r5
 800a002:	f7f7 f85f 	bl	80010c4 <__aeabi_fcmplt>
 800a006:	b900      	cbnz	r0, 800a00a <neai_classification+0x299e>
 800a008:	46a8      	mov	r8, r5
 800a00a:	69f3      	ldr	r3, [r6, #28]
 800a00c:	4641      	mov	r1, r8
 800a00e:	4618      	mov	r0, r3
 800a010:	461e      	mov	r6, r3
 800a012:	9302      	str	r3, [sp, #8]
 800a014:	f7f7 f874 	bl	8001100 <__aeabi_fcmpgt>
 800a018:	b900      	cbnz	r0, 800a01c <neai_classification+0x29b0>
 800a01a:	46b0      	mov	r8, r6
 800a01c:	4621      	mov	r1, r4
 800a01e:	4638      	mov	r0, r7
 800a020:	f028 4600 	bic.w	r6, r8, #2147483648	@ 0x80000000
 800a024:	f7f7 f84e 	bl	80010c4 <__aeabi_fcmplt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	f000 8762 	beq.w	800aef2 <neai_classification+0x3886>
 800a02e:	46a0      	mov	r8, r4
 800a030:	4641      	mov	r1, r8
 800a032:	4650      	mov	r0, sl
 800a034:	f7f7 f846 	bl	80010c4 <__aeabi_fcmplt>
 800a038:	b900      	cbnz	r0, 800a03c <neai_classification+0x29d0>
 800a03a:	46d0      	mov	r8, sl
 800a03c:	4641      	mov	r1, r8
 800a03e:	4658      	mov	r0, fp
 800a040:	f7f7 f840 	bl	80010c4 <__aeabi_fcmplt>
 800a044:	b900      	cbnz	r0, 800a048 <neai_classification+0x29dc>
 800a046:	46d8      	mov	r8, fp
 800a048:	4641      	mov	r1, r8
 800a04a:	4648      	mov	r0, r9
 800a04c:	f7f7 f83a 	bl	80010c4 <__aeabi_fcmplt>
 800a050:	b900      	cbnz	r0, 800a054 <neai_classification+0x29e8>
 800a052:	46c8      	mov	r8, r9
 800a054:	4641      	mov	r1, r8
 800a056:	9801      	ldr	r0, [sp, #4]
 800a058:	f7f7 f834 	bl	80010c4 <__aeabi_fcmplt>
 800a05c:	b908      	cbnz	r0, 800a062 <neai_classification+0x29f6>
 800a05e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a062:	4629      	mov	r1, r5
 800a064:	4640      	mov	r0, r8
 800a066:	f7f7 f84b 	bl	8001100 <__aeabi_fcmpgt>
 800a06a:	b900      	cbnz	r0, 800a06e <neai_classification+0x2a02>
 800a06c:	46a8      	mov	r8, r5
 800a06e:	4640      	mov	r0, r8
 800a070:	9902      	ldr	r1, [sp, #8]
 800a072:	f7f7 f845 	bl	8001100 <__aeabi_fcmpgt>
 800a076:	b908      	cbnz	r0, 800a07c <neai_classification+0x2a10>
 800a078:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a07c:	f028 4100 	bic.w	r1, r8, #2147483648	@ 0x80000000
 800a080:	4630      	mov	r0, r6
 800a082:	9103      	str	r1, [sp, #12]
 800a084:	f7f7 f81e 	bl	80010c4 <__aeabi_fcmplt>
 800a088:	b108      	cbz	r0, 800a08e <neai_classification+0x2a22>
 800a08a:	9903      	ldr	r1, [sp, #12]
 800a08c:	460e      	mov	r6, r1
 800a08e:	4b56      	ldr	r3, [pc, #344]	@ (800a1e8 <neai_classification+0x2b7c>)
 800a090:	4621      	mov	r1, r4
 800a092:	4638      	mov	r0, r7
 800a094:	615e      	str	r6, [r3, #20]
 800a096:	f7f7 f815 	bl	80010c4 <__aeabi_fcmplt>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	f040 8724 	bne.w	800aee8 <neai_classification+0x387c>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f7f7 f82c 	bl	8001100 <__aeabi_fcmpgt>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f000 871d 	beq.w	800aee8 <neai_classification+0x387c>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	46b8      	mov	r8, r7
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	4641      	mov	r1, r8
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	f7f7 f804 	bl	80010c4 <__aeabi_fcmplt>
 800a0bc:	b938      	cbnz	r0, 800a0ce <neai_classification+0x2a62>
 800a0be:	4641      	mov	r1, r8
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	f7f7 f81d 	bl	8001100 <__aeabi_fcmpgt>
 800a0c6:	b110      	cbz	r0, 800a0ce <neai_classification+0x2a62>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	46d0      	mov	r8, sl
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	4658      	mov	r0, fp
 800a0d2:	f7f6 fff7 	bl	80010c4 <__aeabi_fcmplt>
 800a0d6:	b938      	cbnz	r0, 800a0e8 <neai_classification+0x2a7c>
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f7f7 f810 	bl	8001100 <__aeabi_fcmpgt>
 800a0e0:	b110      	cbz	r0, 800a0e8 <neai_classification+0x2a7c>
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	46d8      	mov	r8, fp
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f7f6 ffea 	bl	80010c4 <__aeabi_fcmplt>
 800a0f0:	b938      	cbnz	r0, 800a102 <neai_classification+0x2a96>
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4648      	mov	r0, r9
 800a0f6:	f7f7 f803 	bl	8001100 <__aeabi_fcmpgt>
 800a0fa:	b110      	cbz	r0, 800a102 <neai_classification+0x2a96>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	46c8      	mov	r8, r9
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	9e01      	ldr	r6, [sp, #4]
 800a104:	4641      	mov	r1, r8
 800a106:	4630      	mov	r0, r6
 800a108:	f7f6 ffdc 	bl	80010c4 <__aeabi_fcmplt>
 800a10c:	b938      	cbnz	r0, 800a11e <neai_classification+0x2ab2>
 800a10e:	4641      	mov	r1, r8
 800a110:	4630      	mov	r0, r6
 800a112:	f7f6 fff5 	bl	8001100 <__aeabi_fcmpgt>
 800a116:	b110      	cbz	r0, 800a11e <neai_classification+0x2ab2>
 800a118:	2305      	movs	r3, #5
 800a11a:	46b0      	mov	r8, r6
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4629      	mov	r1, r5
 800a120:	4640      	mov	r0, r8
 800a122:	f7f6 ffed 	bl	8001100 <__aeabi_fcmpgt>
 800a126:	b938      	cbnz	r0, 800a138 <neai_classification+0x2acc>
 800a128:	4629      	mov	r1, r5
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7f6 ffca 	bl	80010c4 <__aeabi_fcmplt>
 800a130:	b110      	cbz	r0, 800a138 <neai_classification+0x2acc>
 800a132:	2306      	movs	r3, #6
 800a134:	46a8      	mov	r8, r5
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	9e02      	ldr	r6, [sp, #8]
 800a13a:	4640      	mov	r0, r8
 800a13c:	4631      	mov	r1, r6
 800a13e:	f7f6 ffdf 	bl	8001100 <__aeabi_fcmpgt>
 800a142:	b940      	cbnz	r0, 800a156 <neai_classification+0x2aea>
 800a144:	4640      	mov	r0, r8
 800a146:	4631      	mov	r1, r6
 800a148:	f7f6 ffbc 	bl	80010c4 <__aeabi_fcmplt>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	bf18      	it	ne
 800a152:	2307      	movne	r3, #7
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	9800      	ldr	r0, [sp, #0]
 800a158:	f7f6 fdbe 	bl	8000cd8 <__aeabi_ui2f>
 800a15c:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800a1e8 <neai_classification+0x2b7c>
 800a160:	4621      	mov	r1, r4
 800a162:	f8c8 005c 	str.w	r0, [r8, #92]	@ 0x5c
 800a166:	4638      	mov	r0, r7
 800a168:	f7f6 fd06 	bl	8000b78 <__addsf3>
 800a16c:	4601      	mov	r1, r0
 800a16e:	4650      	mov	r0, sl
 800a170:	f7f6 fd02 	bl	8000b78 <__addsf3>
 800a174:	4601      	mov	r1, r0
 800a176:	4658      	mov	r0, fp
 800a178:	f7f6 fcfe 	bl	8000b78 <__addsf3>
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 fcfb 	bl	8000b78 <__addsf3>
 800a182:	4601      	mov	r1, r0
 800a184:	9801      	ldr	r0, [sp, #4]
 800a186:	f7f6 fcf7 	bl	8000b78 <__addsf3>
 800a18a:	4629      	mov	r1, r5
 800a18c:	f7f6 fcf4 	bl	8000b78 <__addsf3>
 800a190:	9e02      	ldr	r6, [sp, #8]
 800a192:	4631      	mov	r1, r6
 800a194:	f7f6 fcf0 	bl	8000b78 <__addsf3>
 800a198:	4621      	mov	r1, r4
 800a19a:	f8c8 0044 	str.w	r0, [r8, #68]	@ 0x44
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7f6 fdf2 	bl	8000d88 <__aeabi_fmul>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7f6 fded 	bl	8000d88 <__aeabi_fmul>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	f7f6 fce2 	bl	8000b78 <__addsf3>
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	4651      	mov	r1, sl
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f7f6 fde5 	bl	8000d88 <__aeabi_fmul>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	f7f6 fcda 	bl	8000b78 <__addsf3>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4659      	mov	r1, fp
 800a1c8:	4658      	mov	r0, fp
 800a1ca:	f7f6 fddd 	bl	8000d88 <__aeabi_fmul>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	f7f6 fcd2 	bl	8000b78 <__addsf3>
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4648      	mov	r0, r9
 800a1da:	f7f6 fdd5 	bl	8000d88 <__aeabi_fmul>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	e004      	b.n	800a1ec <neai_classification+0x2b80>
 800a1e2:	bf00      	nop
 800a1e4:	200004b8 	.word	0x200004b8
 800a1e8:	20000568 	.word	0x20000568
 800a1ec:	f7f6 fcc4 	bl	8000b78 <__addsf3>
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	9901      	ldr	r1, [sp, #4]
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	f7f6 fdc7 	bl	8000d88 <__aeabi_fmul>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	f7f6 fcbc 	bl	8000b78 <__addsf3>
 800a200:	4604      	mov	r4, r0
 800a202:	4629      	mov	r1, r5
 800a204:	4628      	mov	r0, r5
 800a206:	f7f6 fdbf 	bl	8000d88 <__aeabi_fmul>
 800a20a:	4621      	mov	r1, r4
 800a20c:	f7f6 fcb4 	bl	8000b78 <__addsf3>
 800a210:	4604      	mov	r4, r0
 800a212:	4631      	mov	r1, r6
 800a214:	4630      	mov	r0, r6
 800a216:	f7f6 fdb7 	bl	8000d88 <__aeabi_fmul>
 800a21a:	4621      	mov	r1, r4
 800a21c:	f7f6 fcac 	bl	8000b78 <__addsf3>
 800a220:	4b5f      	ldr	r3, [pc, #380]	@ (800a3a0 <neai_classification+0x2d34>)
 800a222:	f1a8 0404 	sub.w	r4, r8, #4
 800a226:	681e      	ldr	r6, [r3, #0]
 800a228:	4b5e      	ldr	r3, [pc, #376]	@ (800a3a4 <neai_classification+0x2d38>)
 800a22a:	3e04      	subs	r6, #4
 800a22c:	681d      	ldr	r5, [r3, #0]
 800a22e:	f8c8 0050 	str.w	r0, [r8, #80]	@ 0x50
 800a232:	3d04      	subs	r5, #4
 800a234:	f104 076c 	add.w	r7, r4, #108	@ 0x6c
 800a238:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800a23c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a240:	f7f6 fc98 	bl	8000b74 <__aeabi_fsub>
 800a244:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a248:	f7f6 fd9e 	bl	8000d88 <__aeabi_fmul>
 800a24c:	42a7      	cmp	r7, r4
 800a24e:	6020      	str	r0, [r4, #0]
 800a250:	d1f2      	bne.n	800a238 <neai_classification+0x2bcc>
 800a252:	226c      	movs	r2, #108	@ 0x6c
 800a254:	4954      	ldr	r1, [pc, #336]	@ (800a3a8 <neai_classification+0x2d3c>)
 800a256:	4855      	ldr	r0, [pc, #340]	@ (800a3ac <neai_classification+0x2d40>)
 800a258:	f001 fd51 	bl	800bcfe <memcpy>
 800a25c:	4a54      	ldr	r2, [pc, #336]	@ (800a3b0 <neai_classification+0x2d44>)
 800a25e:	4b55      	ldr	r3, [pc, #340]	@ (800a3b4 <neai_classification+0x2d48>)
 800a260:	6816      	ldr	r6, [r2, #0]
 800a262:	681f      	ldr	r7, [r3, #0]
 800a264:	2e00      	cmp	r6, #0
 800a266:	f340 827f 	ble.w	800a768 <neai_classification+0x30fc>
 800a26a:	4b53      	ldr	r3, [pc, #332]	@ (800a3b8 <neai_classification+0x2d4c>)
 800a26c:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 800a3bc <neai_classification+0x2d50>
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	4b53      	ldr	r3, [pc, #332]	@ (800a3c0 <neai_classification+0x2d54>)
 800a274:	4c53      	ldr	r4, [pc, #332]	@ (800a3c4 <neai_classification+0x2d58>)
 800a276:	f8d3 8000 	ldr.w	r8, [r3]
 800a27a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a27e:	eb04 0088 	add.w	r0, r4, r8, lsl #2
 800a282:	1b9b      	subs	r3, r3, r6
 800a284:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 800a288:	00b3      	lsls	r3, r6, #2
 800a28a:	461a      	mov	r2, r3
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	f001 fd36 	bl	800bcfe <memcpy>
 800a292:	2f01      	cmp	r7, #1
 800a294:	f340 8186 	ble.w	800a5a4 <neai_classification+0x2f38>
 800a298:	2f03      	cmp	r7, #3
 800a29a:	f8da a000 	ldr.w	sl, [sl]
 800a29e:	f340 862e 	ble.w	800aefe <neai_classification+0x3892>
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	f108 4280 	add.w	r2, r8, #1073741824	@ 0x40000000
 800a2a8:	3a01      	subs	r2, #1
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	ebc6 7086 	rsb	r0, r6, r6, lsl #30
 800a2b0:	9201      	str	r2, [sp, #4]
 800a2b2:	eb06 020a 	add.w	r2, r6, sl
 800a2b6:	eb05 0b82 	add.w	fp, r5, r2, lsl #2
 800a2ba:	0082      	lsls	r2, r0, #2
 800a2bc:	9202      	str	r2, [sp, #8]
 800a2be:	9a00      	ldr	r2, [sp, #0]
 800a2c0:	1f3b      	subs	r3, r7, #4
 800a2c2:	1ab0      	subs	r0, r6, r2
 800a2c4:	0082      	lsls	r2, r0, #2
 800a2c6:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800a2ca:	e9cd 5805 	strd	r5, r8, [sp, #20]
 800a2ce:	f023 0301 	bic.w	r3, r3, #1
 800a2d2:	f8df e0d8 	ldr.w	lr, [pc, #216]	@ 800a3ac <neai_classification+0x2d40>
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a2dc:	9a02      	ldr	r2, [sp, #8]
 800a2de:	e9cd 160a 	strd	r1, r6, [sp, #40]	@ 0x28
 800a2e2:	445a      	add	r2, fp
 800a2e4:	4616      	mov	r6, r2
 800a2e6:	4838      	ldr	r0, [pc, #224]	@ (800a3c8 <neai_classification+0x2d5c>)
 800a2e8:	f85e a021 	ldr.w	sl, [lr, r1, lsl #2]
 800a2ec:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
 800a2f0:	9801      	ldr	r0, [sp, #4]
 800a2f2:	f1ab 0504 	sub.w	r5, fp, #4
 800a2f6:	1827      	adds	r7, r4, r0
 800a2f8:	9308      	str	r3, [sp, #32]
 800a2fa:	920d      	str	r2, [sp, #52]	@ 0x34
 800a2fc:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 800a300:	f856 1b04 	ldr.w	r1, [r6], #4
 800a304:	4650      	mov	r0, sl
 800a306:	f7f6 fd3f 	bl	8000d88 <__aeabi_fmul>
 800a30a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a30e:	f7f6 fc33 	bl	8000b78 <__addsf3>
 800a312:	4681      	mov	r9, r0
 800a314:	f8c7 9000 	str.w	r9, [r7]
 800a318:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a31c:	4640      	mov	r0, r8
 800a31e:	f7f6 fd33 	bl	8000d88 <__aeabi_fmul>
 800a322:	4649      	mov	r1, r9
 800a324:	f7f6 fc28 	bl	8000b78 <__addsf3>
 800a328:	45b3      	cmp	fp, r6
 800a32a:	6038      	str	r0, [r7, #0]
 800a32c:	d1e8      	bne.n	800a300 <neai_classification+0x2c94>
 800a32e:	e9dd 160a 	ldrd	r1, r6, [sp, #40]	@ 0x28
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a336:	9803      	ldr	r0, [sp, #12]
 800a338:	3102      	adds	r1, #2
 800a33a:	4299      	cmp	r1, r3
 800a33c:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 800a340:	eba2 0b00 	sub.w	fp, r2, r0
 800a344:	d1ca      	bne.n	800a2dc <neai_classification+0x2c70>
 800a346:	e9dd 7504 	ldrd	r7, r5, [sp, #16]
 800a34a:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
 800a34e:	4699      	mov	r9, r3
 800a350:	fb03 a206 	mla	r2, r3, r6, sl
 800a354:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a358:	1e7a      	subs	r2, r7, #1
 800a35a:	9201      	str	r2, [sp, #4]
 800a35c:	f108 0201 	add.w	r2, r8, #1
 800a360:	9202      	str	r2, [sp, #8]
 800a362:	f108 0202 	add.w	r2, r8, #2
 800a366:	9203      	str	r2, [sp, #12]
 800a368:	f108 0203 	add.w	r2, r8, #3
 800a36c:	9204      	str	r2, [sp, #16]
 800a36e:	f108 0204 	add.w	r2, r8, #4
 800a372:	9205      	str	r2, [sp, #20]
 800a374:	f108 0205 	add.w	r2, r8, #5
 800a378:	9206      	str	r2, [sp, #24]
 800a37a:	f108 0206 	add.w	r2, r8, #6
 800a37e:	9207      	str	r2, [sp, #28]
 800a380:	f108 0207 	add.w	r2, r8, #7
 800a384:	f103 4a80 	add.w	sl, r3, #1073741824	@ 0x40000000
 800a388:	9208      	str	r2, [sp, #32]
 800a38a:	f108 0208 	add.w	r2, r8, #8
 800a38e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a392:	920a      	str	r2, [sp, #40]	@ 0x28
 800a394:	f108 0209 	add.w	r2, r8, #9
 800a398:	eb0e 0a8a 	add.w	sl, lr, sl, lsl #2
 800a39c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a39e:	e015      	b.n	800a3cc <neai_classification+0x2d60>
 800a3a0:	200005d4 	.word	0x200005d4
 800a3a4:	200005d8 	.word	0x200005d8
 800a3a8:	20000568 	.word	0x20000568
 800a3ac:	200005dc 	.word	0x200005dc
 800a3b0:	200004a4 	.word	0x200004a4
 800a3b4:	200004a8 	.word	0x200004a8
 800a3b8:	200004b8 	.word	0x200004b8
 800a3bc:	2000049c 	.word	0x2000049c
 800a3c0:	200004ac 	.word	0x200004ac
 800a3c4:	2000045c 	.word	0x2000045c
 800a3c8:	200005e0 	.word	0x200005e0
 800a3cc:	f85a 7f04 	ldr.w	r7, [sl, #4]!
 800a3d0:	6829      	ldr	r1, [r5, #0]
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	f7f6 fcd8 	bl	8000d88 <__aeabi_fmul>
 800a3d8:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 800a3dc:	f7f6 fbcc 	bl	8000b78 <__addsf3>
 800a3e0:	2e01      	cmp	r6, #1
 800a3e2:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 800a3e6:	f000 80d5 	beq.w	800a594 <neai_classification+0x2f28>
 800a3ea:	6869      	ldr	r1, [r5, #4]
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7f6 fccb 	bl	8000d88 <__aeabi_fmul>
 800a3f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a3f6:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a3fa:	f7f6 fbbd 	bl	8000b78 <__addsf3>
 800a3fe:	2e02      	cmp	r6, #2
 800a400:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a404:	f000 80c6 	beq.w	800a594 <neai_classification+0x2f28>
 800a408:	68a9      	ldr	r1, [r5, #8]
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7f6 fcbc 	bl	8000d88 <__aeabi_fmul>
 800a410:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a414:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a418:	f7f6 fbae 	bl	8000b78 <__addsf3>
 800a41c:	2e03      	cmp	r6, #3
 800a41e:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a422:	f000 80b7 	beq.w	800a594 <neai_classification+0x2f28>
 800a426:	68e9      	ldr	r1, [r5, #12]
 800a428:	4638      	mov	r0, r7
 800a42a:	f7f6 fcad 	bl	8000d88 <__aeabi_fmul>
 800a42e:	f8dd b010 	ldr.w	fp, [sp, #16]
 800a432:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a436:	f7f6 fb9f 	bl	8000b78 <__addsf3>
 800a43a:	2e04      	cmp	r6, #4
 800a43c:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a440:	f000 80a8 	beq.w	800a594 <neai_classification+0x2f28>
 800a444:	6929      	ldr	r1, [r5, #16]
 800a446:	4638      	mov	r0, r7
 800a448:	f7f6 fc9e 	bl	8000d88 <__aeabi_fmul>
 800a44c:	f8dd b014 	ldr.w	fp, [sp, #20]
 800a450:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a454:	f7f6 fb90 	bl	8000b78 <__addsf3>
 800a458:	2e05      	cmp	r6, #5
 800a45a:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a45e:	f000 8099 	beq.w	800a594 <neai_classification+0x2f28>
 800a462:	6969      	ldr	r1, [r5, #20]
 800a464:	4638      	mov	r0, r7
 800a466:	f7f6 fc8f 	bl	8000d88 <__aeabi_fmul>
 800a46a:	f8dd b018 	ldr.w	fp, [sp, #24]
 800a46e:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a472:	f7f6 fb81 	bl	8000b78 <__addsf3>
 800a476:	2e06      	cmp	r6, #6
 800a478:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a47c:	f000 808a 	beq.w	800a594 <neai_classification+0x2f28>
 800a480:	69a9      	ldr	r1, [r5, #24]
 800a482:	4638      	mov	r0, r7
 800a484:	f7f6 fc80 	bl	8000d88 <__aeabi_fmul>
 800a488:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800a48c:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a490:	f7f6 fb72 	bl	8000b78 <__addsf3>
 800a494:	2e07      	cmp	r6, #7
 800a496:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a49a:	d07b      	beq.n	800a594 <neai_classification+0x2f28>
 800a49c:	69e9      	ldr	r1, [r5, #28]
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f7f6 fc72 	bl	8000d88 <__aeabi_fmul>
 800a4a4:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a4a8:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a4ac:	f7f6 fb64 	bl	8000b78 <__addsf3>
 800a4b0:	2e08      	cmp	r6, #8
 800a4b2:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a4b6:	d06d      	beq.n	800a594 <neai_classification+0x2f28>
 800a4b8:	6a29      	ldr	r1, [r5, #32]
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7f6 fc64 	bl	8000d88 <__aeabi_fmul>
 800a4c0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800a4c4:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a4c8:	f7f6 fb56 	bl	8000b78 <__addsf3>
 800a4cc:	2e09      	cmp	r6, #9
 800a4ce:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a4d2:	d05f      	beq.n	800a594 <neai_classification+0x2f28>
 800a4d4:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	f7f6 fc56 	bl	8000d88 <__aeabi_fmul>
 800a4dc:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 800a4e0:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a4e4:	f7f6 fb48 	bl	8000b78 <__addsf3>
 800a4e8:	2e0a      	cmp	r6, #10
 800a4ea:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a4ee:	d051      	beq.n	800a594 <neai_classification+0x2f28>
 800a4f0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800a4f2:	f108 0b0a 	add.w	fp, r8, #10
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7f6 fc46 	bl	8000d88 <__aeabi_fmul>
 800a4fc:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a500:	f7f6 fb3a 	bl	8000b78 <__addsf3>
 800a504:	2e0b      	cmp	r6, #11
 800a506:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a50a:	d043      	beq.n	800a594 <neai_classification+0x2f28>
 800a50c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800a50e:	f108 0b0b 	add.w	fp, r8, #11
 800a512:	4638      	mov	r0, r7
 800a514:	f7f6 fc38 	bl	8000d88 <__aeabi_fmul>
 800a518:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a51c:	f7f6 fb2c 	bl	8000b78 <__addsf3>
 800a520:	2e0c      	cmp	r6, #12
 800a522:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a526:	d035      	beq.n	800a594 <neai_classification+0x2f28>
 800a528:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 800a52a:	f108 0b0c 	add.w	fp, r8, #12
 800a52e:	4638      	mov	r0, r7
 800a530:	f7f6 fc2a 	bl	8000d88 <__aeabi_fmul>
 800a534:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a538:	f7f6 fb1e 	bl	8000b78 <__addsf3>
 800a53c:	2e0d      	cmp	r6, #13
 800a53e:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a542:	d027      	beq.n	800a594 <neai_classification+0x2f28>
 800a544:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800a546:	f108 0b0d 	add.w	fp, r8, #13
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7f6 fc1c 	bl	8000d88 <__aeabi_fmul>
 800a550:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a554:	f7f6 fb10 	bl	8000b78 <__addsf3>
 800a558:	2e0e      	cmp	r6, #14
 800a55a:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a55e:	d019      	beq.n	800a594 <neai_classification+0x2f28>
 800a560:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800a562:	f108 0b0e 	add.w	fp, r8, #14
 800a566:	4638      	mov	r0, r7
 800a568:	f7f6 fc0e 	bl	8000d88 <__aeabi_fmul>
 800a56c:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 800a570:	f7f6 fb02 	bl	8000b78 <__addsf3>
 800a574:	2e0f      	cmp	r6, #15
 800a576:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 800a57a:	d00b      	beq.n	800a594 <neai_classification+0x2f28>
 800a57c:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 800a57e:	4638      	mov	r0, r7
 800a580:	f108 070f 	add.w	r7, r8, #15
 800a584:	f7f6 fc00 	bl	8000d88 <__aeabi_fmul>
 800a588:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 800a58c:	f7f6 faf4 	bl	8000b78 <__addsf3>
 800a590:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	f109 0901 	add.w	r9, r9, #1
 800a59a:	441d      	add	r5, r3
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	4599      	cmp	r9, r3
 800a5a0:	f6ff af14 	blt.w	800a3cc <neai_classification+0x2d60>
 800a5a4:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 800a5a8:	f7f5 ff60 	bl	800046c <__aeabi_f2d>
 800a5ac:	f003 f9b8 	bl	800d920 <tanh>
 800a5b0:	f7f6 fa8c 	bl	8000acc <__aeabi_d2f>
 800a5b4:	2e01      	cmp	r6, #1
 800a5b6:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 800a5ba:	f000 80d5 	beq.w	800a768 <neai_classification+0x30fc>
 800a5be:	f108 0501 	add.w	r5, r8, #1
 800a5c2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a5c6:	f7f5 ff51 	bl	800046c <__aeabi_f2d>
 800a5ca:	f003 f9a9 	bl	800d920 <tanh>
 800a5ce:	f7f6 fa7d 	bl	8000acc <__aeabi_d2f>
 800a5d2:	2e02      	cmp	r6, #2
 800a5d4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a5d8:	f000 80c6 	beq.w	800a768 <neai_classification+0x30fc>
 800a5dc:	f108 0502 	add.w	r5, r8, #2
 800a5e0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a5e4:	f7f5 ff42 	bl	800046c <__aeabi_f2d>
 800a5e8:	f003 f99a 	bl	800d920 <tanh>
 800a5ec:	f7f6 fa6e 	bl	8000acc <__aeabi_d2f>
 800a5f0:	2e03      	cmp	r6, #3
 800a5f2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a5f6:	f000 80b7 	beq.w	800a768 <neai_classification+0x30fc>
 800a5fa:	f108 0503 	add.w	r5, r8, #3
 800a5fe:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a602:	f7f5 ff33 	bl	800046c <__aeabi_f2d>
 800a606:	f003 f98b 	bl	800d920 <tanh>
 800a60a:	f7f6 fa5f 	bl	8000acc <__aeabi_d2f>
 800a60e:	2e04      	cmp	r6, #4
 800a610:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a614:	f000 80a8 	beq.w	800a768 <neai_classification+0x30fc>
 800a618:	f108 0504 	add.w	r5, r8, #4
 800a61c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a620:	f7f5 ff24 	bl	800046c <__aeabi_f2d>
 800a624:	f003 f97c 	bl	800d920 <tanh>
 800a628:	f7f6 fa50 	bl	8000acc <__aeabi_d2f>
 800a62c:	2e05      	cmp	r6, #5
 800a62e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a632:	f000 8099 	beq.w	800a768 <neai_classification+0x30fc>
 800a636:	f108 0505 	add.w	r5, r8, #5
 800a63a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a63e:	f7f5 ff15 	bl	800046c <__aeabi_f2d>
 800a642:	f003 f96d 	bl	800d920 <tanh>
 800a646:	f7f6 fa41 	bl	8000acc <__aeabi_d2f>
 800a64a:	2e06      	cmp	r6, #6
 800a64c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a650:	f000 808a 	beq.w	800a768 <neai_classification+0x30fc>
 800a654:	f108 0506 	add.w	r5, r8, #6
 800a658:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a65c:	f7f5 ff06 	bl	800046c <__aeabi_f2d>
 800a660:	f003 f95e 	bl	800d920 <tanh>
 800a664:	f7f6 fa32 	bl	8000acc <__aeabi_d2f>
 800a668:	2e07      	cmp	r6, #7
 800a66a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a66e:	d07b      	beq.n	800a768 <neai_classification+0x30fc>
 800a670:	f108 0507 	add.w	r5, r8, #7
 800a674:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a678:	f7f5 fef8 	bl	800046c <__aeabi_f2d>
 800a67c:	f003 f950 	bl	800d920 <tanh>
 800a680:	f7f6 fa24 	bl	8000acc <__aeabi_d2f>
 800a684:	2e08      	cmp	r6, #8
 800a686:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a68a:	d06d      	beq.n	800a768 <neai_classification+0x30fc>
 800a68c:	f108 0508 	add.w	r5, r8, #8
 800a690:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a694:	f7f5 feea 	bl	800046c <__aeabi_f2d>
 800a698:	f003 f942 	bl	800d920 <tanh>
 800a69c:	f7f6 fa16 	bl	8000acc <__aeabi_d2f>
 800a6a0:	2e09      	cmp	r6, #9
 800a6a2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a6a6:	d05f      	beq.n	800a768 <neai_classification+0x30fc>
 800a6a8:	f108 0509 	add.w	r5, r8, #9
 800a6ac:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a6b0:	f7f5 fedc 	bl	800046c <__aeabi_f2d>
 800a6b4:	f003 f934 	bl	800d920 <tanh>
 800a6b8:	f7f6 fa08 	bl	8000acc <__aeabi_d2f>
 800a6bc:	2e0a      	cmp	r6, #10
 800a6be:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a6c2:	d051      	beq.n	800a768 <neai_classification+0x30fc>
 800a6c4:	f108 050a 	add.w	r5, r8, #10
 800a6c8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a6cc:	f7f5 fece 	bl	800046c <__aeabi_f2d>
 800a6d0:	f003 f926 	bl	800d920 <tanh>
 800a6d4:	f7f6 f9fa 	bl	8000acc <__aeabi_d2f>
 800a6d8:	2e0b      	cmp	r6, #11
 800a6da:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a6de:	d043      	beq.n	800a768 <neai_classification+0x30fc>
 800a6e0:	f108 050b 	add.w	r5, r8, #11
 800a6e4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a6e8:	f7f5 fec0 	bl	800046c <__aeabi_f2d>
 800a6ec:	f003 f918 	bl	800d920 <tanh>
 800a6f0:	f7f6 f9ec 	bl	8000acc <__aeabi_d2f>
 800a6f4:	2e0c      	cmp	r6, #12
 800a6f6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a6fa:	d035      	beq.n	800a768 <neai_classification+0x30fc>
 800a6fc:	f108 050c 	add.w	r5, r8, #12
 800a700:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a704:	f7f5 feb2 	bl	800046c <__aeabi_f2d>
 800a708:	f003 f90a 	bl	800d920 <tanh>
 800a70c:	f7f6 f9de 	bl	8000acc <__aeabi_d2f>
 800a710:	2e0d      	cmp	r6, #13
 800a712:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a716:	d027      	beq.n	800a768 <neai_classification+0x30fc>
 800a718:	f108 050d 	add.w	r5, r8, #13
 800a71c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a720:	f7f5 fea4 	bl	800046c <__aeabi_f2d>
 800a724:	f003 f8fc 	bl	800d920 <tanh>
 800a728:	f7f6 f9d0 	bl	8000acc <__aeabi_d2f>
 800a72c:	2e0e      	cmp	r6, #14
 800a72e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a732:	d019      	beq.n	800a768 <neai_classification+0x30fc>
 800a734:	f108 050e 	add.w	r5, r8, #14
 800a738:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800a73c:	f7f5 fe96 	bl	800046c <__aeabi_f2d>
 800a740:	f003 f8ee 	bl	800d920 <tanh>
 800a744:	f7f6 f9c2 	bl	8000acc <__aeabi_d2f>
 800a748:	2e0f      	cmp	r6, #15
 800a74a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800a74e:	d00b      	beq.n	800a768 <neai_classification+0x30fc>
 800a750:	f108 080f 	add.w	r8, r8, #15
 800a754:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 800a758:	f7f5 fe88 	bl	800046c <__aeabi_f2d>
 800a75c:	f003 f8e0 	bl	800d920 <tanh>
 800a760:	f7f6 f9b4 	bl	8000acc <__aeabi_d2f>
 800a764:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 800a768:	4ab5      	ldr	r2, [pc, #724]	@ (800aa40 <neai_classification+0x33d4>)
 800a76a:	4bb6      	ldr	r3, [pc, #728]	@ (800aa44 <neai_classification+0x33d8>)
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	681d      	ldr	r5, [r3, #0]
 800a770:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a774:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 800a778:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a77a:	3301      	adds	r3, #1
 800a77c:	600e      	str	r6, [r1, #0]
 800a77e:	f855 a023 	ldr.w	sl, [r5, r3, lsl #2]
 800a782:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a786:	f8c1 a004 	str.w	sl, [r1, #4]
 800a78a:	685c      	ldr	r4, [r3, #4]
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	608c      	str	r4, [r1, #8]
 800a790:	dd2f      	ble.n	800a7f2 <neai_classification+0x3186>
 800a792:	4bad      	ldr	r3, [pc, #692]	@ (800aa48 <neai_classification+0x33dc>)
 800a794:	4689      	mov	r9, r1
 800a796:	6819      	ldr	r1, [r3, #0]
 800a798:	1853      	adds	r3, r2, r1
 800a79a:	4aac      	ldr	r2, [pc, #688]	@ (800aa4c <neai_classification+0x33e0>)
 800a79c:	eb02 0b81 	add.w	fp, r2, r1, lsl #2
 800a7a0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 800a7a4:	f85b 7b04 	ldr.w	r7, [fp], #4
 800a7a8:	6829      	ldr	r1, [r5, #0]
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7f6 faec 	bl	8000d88 <__aeabi_fmul>
 800a7b0:	4601      	mov	r1, r0
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7f6 f9e0 	bl	8000b78 <__addsf3>
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	f8c9 6000 	str.w	r6, [r9]
 800a7be:	6869      	ldr	r1, [r5, #4]
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7f6 fae1 	bl	8000d88 <__aeabi_fmul>
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f7f6 f9d5 	bl	8000b78 <__addsf3>
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	f8c9 a004 	str.w	sl, [r9, #4]
 800a7d4:	68a9      	ldr	r1, [r5, #8]
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7f6 fad6 	bl	8000d88 <__aeabi_fmul>
 800a7dc:	4601      	mov	r1, r0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7f6 f9ca 	bl	8000b78 <__addsf3>
 800a7e4:	45c3      	cmp	fp, r8
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	f105 050c 	add.w	r5, r5, #12
 800a7ec:	f8c9 0008 	str.w	r0, [r9, #8]
 800a7f0:	d1d8      	bne.n	800a7a4 <neai_classification+0x3138>
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7f6 fc65 	bl	80010c4 <__aeabi_fcmplt>
 800a7fa:	b900      	cbnz	r0, 800a7fe <neai_classification+0x3192>
 800a7fc:	46b2      	mov	sl, r6
 800a7fe:	4651      	mov	r1, sl
 800a800:	4620      	mov	r0, r4
 800a802:	f7f6 fc7d 	bl	8001100 <__aeabi_fcmpgt>
 800a806:	b900      	cbnz	r0, 800a80a <neai_classification+0x319e>
 800a808:	4654      	mov	r4, sl
 800a80a:	2700      	movs	r7, #0
 800a80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80e:	4e90      	ldr	r6, [pc, #576]	@ (800aa50 <neai_classification+0x33e4>)
 800a810:	f1a3 0804 	sub.w	r8, r3, #4
 800a814:	f103 0508 	add.w	r5, r3, #8
 800a818:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800a81c:	4621      	mov	r1, r4
 800a81e:	f7f6 f9a9 	bl	8000b74 <__aeabi_fsub>
 800a822:	4631      	mov	r1, r6
 800a824:	f7f6 fab0 	bl	8000d88 <__aeabi_fmul>
 800a828:	f003 f90a 	bl	800da40 <expf>
 800a82c:	4601      	mov	r1, r0
 800a82e:	4638      	mov	r0, r7
 800a830:	f8c8 1000 	str.w	r1, [r8]
 800a834:	f7f6 f9a0 	bl	8000b78 <__addsf3>
 800a838:	4545      	cmp	r5, r8
 800a83a:	4607      	mov	r7, r0
 800a83c:	d1ec      	bne.n	800a818 <neai_classification+0x31ac>
 800a83e:	4601      	mov	r1, r0
 800a840:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a844:	f7f6 fb54 	bl	8000ef0 <__aeabi_fdiv>
 800a848:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800a84a:	4606      	mov	r6, r0
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	f7f6 fa9b 	bl	8000d88 <__aeabi_fmul>
 800a852:	4605      	mov	r5, r0
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	4630      	mov	r0, r6
 800a858:	603d      	str	r5, [r7, #0]
 800a85a:	f7f6 fa95 	bl	8000d88 <__aeabi_fmul>
 800a85e:	4604      	mov	r4, r0
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	4630      	mov	r0, r6
 800a864:	607c      	str	r4, [r7, #4]
 800a866:	f7f6 fa8f 	bl	8000d88 <__aeabi_fmul>
 800a86a:	4629      	mov	r1, r5
 800a86c:	4606      	mov	r6, r0
 800a86e:	60b8      	str	r0, [r7, #8]
 800a870:	4620      	mov	r0, r4
 800a872:	f7f6 fc45 	bl	8001100 <__aeabi_fcmpgt>
 800a876:	2800      	cmp	r0, #0
 800a878:	f040 8339 	bne.w	800aeee <neai_classification+0x3882>
 800a87c:	462c      	mov	r4, r5
 800a87e:	2501      	movs	r5, #1
 800a880:	4621      	mov	r1, r4
 800a882:	4630      	mov	r0, r6
 800a884:	f7f6 fc3c 	bl	8001100 <__aeabi_fcmpgt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	bf18      	it	ne
 800a88c:	2503      	movne	r5, #3
 800a88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a890:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a892:	801d      	strh	r5, [r3, #0]
 800a894:	b027      	add	sp, #156	@ 0x9c
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	4638      	mov	r0, r7
 800a89c:	f7f6 fa20 	bl	8000ce0 <__aeabi_i2f>
 800a8a0:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a8a4:	f7f6 fa70 	bl	8000d88 <__aeabi_fmul>
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	f003 f8ef 	bl	800da8c <logf>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7f6 fa69 	bl	8000d88 <__aeabi_fmul>
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7f6 f95d 	bl	8000b78 <__addsf3>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	f7ff b8e1 	b.w	8009a88 <neai_classification+0x241c>
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7f6 fa0a 	bl	8000ce0 <__aeabi_i2f>
 800a8cc:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a8d0:	f7f6 fa5a 	bl	8000d88 <__aeabi_fmul>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	f003 f8d9 	bl	800da8c <logf>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7f6 fa53 	bl	8000d88 <__aeabi_fmul>
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f7f6 f947 	bl	8000b78 <__addsf3>
 800a8ea:	2701      	movs	r7, #1
 800a8ec:	464e      	mov	r6, r9
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	f7ff b8c1 	b.w	8009a76 <neai_classification+0x240a>
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	f7f6 f9f3 	bl	8000ce0 <__aeabi_i2f>
 800a8fa:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a8fe:	f7f6 fa43 	bl	8000d88 <__aeabi_fmul>
 800a902:	4606      	mov	r6, r0
 800a904:	f003 f8c2 	bl	800da8c <logf>
 800a908:	4601      	mov	r1, r0
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7f6 fa3c 	bl	8000d88 <__aeabi_fmul>
 800a910:	4601      	mov	r1, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f7f6 f930 	bl	8000b78 <__addsf3>
 800a918:	f04f 0801 	mov.w	r8, #1
 800a91c:	463e      	mov	r6, r7
 800a91e:	4605      	mov	r5, r0
 800a920:	f7ff b89f 	b.w	8009a62 <neai_classification+0x23f6>
 800a924:	4638      	mov	r0, r7
 800a926:	f7f6 f9db 	bl	8000ce0 <__aeabi_i2f>
 800a92a:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a92e:	f7f6 fa2b 	bl	8000d88 <__aeabi_fmul>
 800a932:	4606      	mov	r6, r0
 800a934:	f003 f8aa 	bl	800da8c <logf>
 800a938:	4601      	mov	r1, r0
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7f6 fa24 	bl	8000d88 <__aeabi_fmul>
 800a940:	4601      	mov	r1, r0
 800a942:	4628      	mov	r0, r5
 800a944:	f7f6 f918 	bl	8000b78 <__addsf3>
 800a948:	f04f 0801 	mov.w	r8, #1
 800a94c:	4605      	mov	r5, r0
 800a94e:	9e01      	ldr	r6, [sp, #4]
 800a950:	f7ff b87a 	b.w	8009a48 <neai_classification+0x23dc>
 800a954:	4640      	mov	r0, r8
 800a956:	f7f6 f9c3 	bl	8000ce0 <__aeabi_i2f>
 800a95a:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a95e:	f7f6 fa13 	bl	8000d88 <__aeabi_fmul>
 800a962:	4606      	mov	r6, r0
 800a964:	f003 f892 	bl	800da8c <logf>
 800a968:	4601      	mov	r1, r0
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7f6 fa0c 	bl	8000d88 <__aeabi_fmul>
 800a970:	4601      	mov	r1, r0
 800a972:	4628      	mov	r0, r5
 800a974:	f7f6 f900 	bl	8000b78 <__addsf3>
 800a978:	2701      	movs	r7, #1
 800a97a:	4656      	mov	r6, sl
 800a97c:	4605      	mov	r5, r0
 800a97e:	f7ff b859 	b.w	8009a34 <neai_classification+0x23c8>
 800a982:	4640      	mov	r0, r8
 800a984:	f7f6 f9ac 	bl	8000ce0 <__aeabi_i2f>
 800a988:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a98c:	f7f6 f9fc 	bl	8000d88 <__aeabi_fmul>
 800a990:	4606      	mov	r6, r0
 800a992:	f003 f87b 	bl	800da8c <logf>
 800a996:	4601      	mov	r1, r0
 800a998:	4630      	mov	r0, r6
 800a99a:	f7f6 f9f5 	bl	8000d88 <__aeabi_fmul>
 800a99e:	4601      	mov	r1, r0
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7f6 f8e9 	bl	8000b78 <__addsf3>
 800a9a6:	f04f 0801 	mov.w	r8, #1
 800a9aa:	463e      	mov	r6, r7
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	f7ff b837 	b.w	8009a20 <neai_classification+0x23b4>
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7f6 f994 	bl	8000ce0 <__aeabi_i2f>
 800a9b8:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a9bc:	f7f6 f9e4 	bl	8000d88 <__aeabi_fmul>
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	f003 f863 	bl	800da8c <logf>
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7f6 f9dd 	bl	8000d88 <__aeabi_fmul>
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f7f6 f8d1 	bl	8000b78 <__addsf3>
 800a9d6:	f04f 0801 	mov.w	r8, #1
 800a9da:	463e      	mov	r6, r7
 800a9dc:	4605      	mov	r5, r0
 800a9de:	f7ff b812 	b.w	8009a06 <neai_classification+0x239a>
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f7f6 f97c 	bl	8000ce0 <__aeabi_i2f>
 800a9e8:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800a9ec:	f7f6 f9cc 	bl	8000d88 <__aeabi_fmul>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	f003 f84b 	bl	800da8c <logf>
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7f6 f9c5 	bl	8000d88 <__aeabi_fmul>
 800a9fe:	4601      	mov	r1, r0
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7f6 f8b9 	bl	8000b78 <__addsf3>
 800aa06:	f04f 0801 	mov.w	r8, #1
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	9e02      	ldr	r6, [sp, #8]
 800aa0e:	f7fe bfed 	b.w	80099ec <neai_classification+0x2380>
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f6 f964 	bl	8000ce0 <__aeabi_i2f>
 800aa18:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800aa1c:	f7f6 f9b4 	bl	8000d88 <__aeabi_fmul>
 800aa20:	4606      	mov	r6, r0
 800aa22:	f003 f833 	bl	800da8c <logf>
 800aa26:	4601      	mov	r1, r0
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7f6 f9ad 	bl	8000d88 <__aeabi_fmul>
 800aa2e:	4601      	mov	r1, r0
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7f6 f8a1 	bl	8000b78 <__addsf3>
 800aa36:	2701      	movs	r7, #1
 800aa38:	4646      	mov	r6, r8
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	f7fe bfcc 	b.w	80099d8 <neai_classification+0x236c>
 800aa40:	200004b0 	.word	0x200004b0
 800aa44:	200004b4 	.word	0x200004b4
 800aa48:	200004ac 	.word	0x200004ac
 800aa4c:	2000045c 	.word	0x2000045c
 800aa50:	40a00000 	.word	0x40a00000
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 f943 	bl	8000ce0 <__aeabi_i2f>
 800aa5a:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800aa5e:	f7f6 f993 	bl	8000d88 <__aeabi_fmul>
 800aa62:	4606      	mov	r6, r0
 800aa64:	f003 f812 	bl	800da8c <logf>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f6 f98c 	bl	8000d88 <__aeabi_fmul>
 800aa70:	4601      	mov	r1, r0
 800aa72:	4628      	mov	r0, r5
 800aa74:	f7f6 f880 	bl	8000b78 <__addsf3>
 800aa78:	463e      	mov	r6, r7
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	f7fe bfa0 	b.w	80099c2 <neai_classification+0x2356>
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f6 f92c 	bl	8000ce0 <__aeabi_i2f>
 800aa88:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800aa8c:	f7f6 f97c 	bl	8000d88 <__aeabi_fmul>
 800aa90:	4606      	mov	r6, r0
 800aa92:	f002 fffb 	bl	800da8c <logf>
 800aa96:	4601      	mov	r1, r0
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7f6 f975 	bl	8000d88 <__aeabi_fmul>
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7f6 f869 	bl	8000b78 <__addsf3>
 800aaa6:	463e      	mov	r6, r7
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	4605      	mov	r5, r0
 800aaac:	f7fe bf7c 	b.w	80099a8 <neai_classification+0x233c>
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f6 f915 	bl	8000ce0 <__aeabi_i2f>
 800aab6:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800aaba:	f7f6 f965 	bl	8000d88 <__aeabi_fmul>
 800aabe:	4606      	mov	r6, r0
 800aac0:	f002 ffe4 	bl	800da8c <logf>
 800aac4:	4601      	mov	r1, r0
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7f6 f95e 	bl	8000d88 <__aeabi_fmul>
 800aacc:	4601      	mov	r1, r0
 800aace:	4628      	mov	r0, r5
 800aad0:	f7f6 f852 	bl	8000b78 <__addsf3>
 800aad4:	2301      	movs	r3, #1
 800aad6:	4605      	mov	r5, r0
 800aad8:	9e00      	ldr	r6, [sp, #0]
 800aada:	f7fe bf58 	b.w	800998e <neai_classification+0x2322>
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f6 f8fe 	bl	8000ce0 <__aeabi_i2f>
 800aae4:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800aae8:	f7f6 f94e 	bl	8000d88 <__aeabi_fmul>
 800aaec:	4606      	mov	r6, r0
 800aaee:	f002 ffcd 	bl	800da8c <logf>
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f7f6 f947 	bl	8000d88 <__aeabi_fmul>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7f6 f83b 	bl	8000b78 <__addsf3>
 800ab02:	463e      	mov	r6, r7
 800ab04:	2301      	movs	r3, #1
 800ab06:	4605      	mov	r5, r0
 800ab08:	f7fe bf36 	b.w	8009978 <neai_classification+0x230c>
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f6 f8e7 	bl	8000ce0 <__aeabi_i2f>
 800ab12:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800ab16:	f7f6 f937 	bl	8000d88 <__aeabi_fmul>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	f002 ffb6 	bl	800da8c <logf>
 800ab20:	4601      	mov	r1, r0
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7f6 f930 	bl	8000d88 <__aeabi_fmul>
 800ab28:	4601      	mov	r1, r0
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f7f6 f824 	bl	8000b78 <__addsf3>
 800ab30:	2301      	movs	r3, #1
 800ab32:	4605      	mov	r5, r0
 800ab34:	9e04      	ldr	r6, [sp, #16]
 800ab36:	f7fe bf14 	b.w	8009962 <neai_classification+0x22f6>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4db0      	ldr	r5, [pc, #704]	@ (800ae00 <neai_classification+0x3794>)
 800ab3e:	f7fe bf03 	b.w	8009948 <neai_classification+0x22dc>
 800ab42:	46a0      	mov	r8, r4
 800ab44:	f7ff ba39 	b.w	8009fba <neai_classification+0x294e>
 800ab48:	950a      	str	r5, [sp, #40]	@ 0x28
 800ab4a:	f7fe bb15 	b.w	8009178 <neai_classification+0x1b0c>
 800ab4e:	f8dd a000 	ldr.w	sl, [sp]
 800ab52:	f7fe ba9b 	b.w	800908c <neai_classification+0x1a20>
 800ab56:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ab5a:	9800      	ldr	r0, [sp, #0]
 800ab5c:	4651      	mov	r1, sl
 800ab5e:	f7f6 facf 	bl	8001100 <__aeabi_fcmpgt>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f47e aa92 	bne.w	800908c <neai_classification+0x1a20>
 800ab68:	e7f1      	b.n	800ab4e <neai_classification+0x34e2>
 800ab6a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab6e:	9905      	ldr	r1, [sp, #20]
 800ab70:	4650      	mov	r0, sl
 800ab72:	f7f6 faa7 	bl	80010c4 <__aeabi_fcmplt>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f47e aa81 	bne.w	800907e <neai_classification+0x1a12>
 800ab7c:	e7eb      	b.n	800ab56 <neai_classification+0x34ea>
 800ab7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ab82:	9904      	ldr	r1, [sp, #16]
 800ab84:	4650      	mov	r0, sl
 800ab86:	f7f6 fa9d 	bl	80010c4 <__aeabi_fcmplt>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f47e aa70 	bne.w	8009070 <neai_classification+0x1a04>
 800ab90:	e7eb      	b.n	800ab6a <neai_classification+0x34fe>
 800ab92:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ab96:	9903      	ldr	r1, [sp, #12]
 800ab98:	4650      	mov	r0, sl
 800ab9a:	f7f6 fa93 	bl	80010c4 <__aeabi_fcmplt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f47e aa5f 	bne.w	8009062 <neai_classification+0x19f6>
 800aba4:	e7eb      	b.n	800ab7e <neai_classification+0x3512>
 800aba6:	f8dd a004 	ldr.w	sl, [sp, #4]
 800abaa:	9902      	ldr	r1, [sp, #8]
 800abac:	4650      	mov	r0, sl
 800abae:	f7f6 fa89 	bl	80010c4 <__aeabi_fcmplt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f47e aa4e 	bne.w	8009054 <neai_classification+0x19e8>
 800abb8:	e7eb      	b.n	800ab92 <neai_classification+0x3526>
 800abba:	f8dd a020 	ldr.w	sl, [sp, #32]
 800abbe:	9901      	ldr	r1, [sp, #4]
 800abc0:	4650      	mov	r0, sl
 800abc2:	f7f6 fa7f 	bl	80010c4 <__aeabi_fcmplt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f47e aa3d 	bne.w	8009046 <neai_classification+0x19da>
 800abcc:	e7eb      	b.n	800aba6 <neai_classification+0x353a>
 800abce:	46da      	mov	sl, fp
 800abd0:	9908      	ldr	r1, [sp, #32]
 800abd2:	4650      	mov	r0, sl
 800abd4:	f7f6 fa76 	bl	80010c4 <__aeabi_fcmplt>
 800abd8:	2800      	cmp	r0, #0
 800abda:	f47e aa2d 	bne.w	8009038 <neai_classification+0x19cc>
 800abde:	e7ec      	b.n	800abba <neai_classification+0x354e>
 800abe0:	46aa      	mov	sl, r5
 800abe2:	4659      	mov	r1, fp
 800abe4:	4650      	mov	r0, sl
 800abe6:	f7f6 fa6d 	bl	80010c4 <__aeabi_fcmplt>
 800abea:	2800      	cmp	r0, #0
 800abec:	f47e aa1d 	bne.w	800902a <neai_classification+0x19be>
 800abf0:	e7ed      	b.n	800abce <neai_classification+0x3562>
 800abf2:	46b2      	mov	sl, r6
 800abf4:	4629      	mov	r1, r5
 800abf6:	4650      	mov	r0, sl
 800abf8:	f7f6 fa64 	bl	80010c4 <__aeabi_fcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f47e aa0d 	bne.w	800901c <neai_classification+0x19b0>
 800ac02:	e7ed      	b.n	800abe0 <neai_classification+0x3574>
 800ac04:	46ba      	mov	sl, r7
 800ac06:	4631      	mov	r1, r6
 800ac08:	4650      	mov	r0, sl
 800ac0a:	f7f6 fa5b 	bl	80010c4 <__aeabi_fcmplt>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f47e a9fd 	bne.w	800900e <neai_classification+0x19a2>
 800ac14:	e7ed      	b.n	800abf2 <neai_classification+0x3586>
 800ac16:	46c2      	mov	sl, r8
 800ac18:	4639      	mov	r1, r7
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	f7f6 fa52 	bl	80010c4 <__aeabi_fcmplt>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f47e a9ed 	bne.w	8009000 <neai_classification+0x1994>
 800ac26:	e7ed      	b.n	800ac04 <neai_classification+0x3598>
 800ac28:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac2c:	4641      	mov	r1, r8
 800ac2e:	4650      	mov	r0, sl
 800ac30:	f7f6 fa48 	bl	80010c4 <__aeabi_fcmplt>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f47e a9dc 	bne.w	8008ff2 <neai_classification+0x1986>
 800ac3a:	e7ec      	b.n	800ac16 <neai_classification+0x35aa>
 800ac3c:	f8dd a018 	ldr.w	sl, [sp, #24]
 800ac40:	9907      	ldr	r1, [sp, #28]
 800ac42:	4650      	mov	r0, sl
 800ac44:	f7f6 fa3e 	bl	80010c4 <__aeabi_fcmplt>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	f47e a9cb 	bne.w	8008fe4 <neai_classification+0x1978>
 800ac4e:	e7eb      	b.n	800ac28 <neai_classification+0x35bc>
 800ac50:	1c7b      	adds	r3, r7, #1
 800ac52:	b29f      	uxth	r7, r3
 800ac54:	f7fd bfdc 	b.w	8008c10 <neai_classification+0x15a4>
 800ac58:	1c7b      	adds	r3, r7, #1
 800ac5a:	b29f      	uxth	r7, r3
 800ac5c:	f7fd bfc8 	b.w	8008bf0 <neai_classification+0x1584>
 800ac60:	1c7b      	adds	r3, r7, #1
 800ac62:	b29f      	uxth	r7, r3
 800ac64:	f7fd bfb6 	b.w	8008bd4 <neai_classification+0x1568>
 800ac68:	1c7b      	adds	r3, r7, #1
 800ac6a:	b29f      	uxth	r7, r3
 800ac6c:	f7fd bfa2 	b.w	8008bb4 <neai_classification+0x1548>
 800ac70:	1c7b      	adds	r3, r7, #1
 800ac72:	b29f      	uxth	r7, r3
 800ac74:	f7fd bf8e 	b.w	8008b94 <neai_classification+0x1528>
 800ac78:	1c7b      	adds	r3, r7, #1
 800ac7a:	b29f      	uxth	r7, r3
 800ac7c:	f7fd bf7a 	b.w	8008b74 <neai_classification+0x1508>
 800ac80:	1c7b      	adds	r3, r7, #1
 800ac82:	b29f      	uxth	r7, r3
 800ac84:	f7fd bf66 	b.w	8008b54 <neai_classification+0x14e8>
 800ac88:	1c7b      	adds	r3, r7, #1
 800ac8a:	b29f      	uxth	r7, r3
 800ac8c:	f7fd bf52 	b.w	8008b34 <neai_classification+0x14c8>
 800ac90:	1c7b      	adds	r3, r7, #1
 800ac92:	b29f      	uxth	r7, r3
 800ac94:	f7fd bf3e 	b.w	8008b14 <neai_classification+0x14a8>
 800ac98:	1c7b      	adds	r3, r7, #1
 800ac9a:	b29f      	uxth	r7, r3
 800ac9c:	f7fd bf2a 	b.w	8008af4 <neai_classification+0x1488>
 800aca0:	1c7b      	adds	r3, r7, #1
 800aca2:	b29f      	uxth	r7, r3
 800aca4:	f7fd bf16 	b.w	8008ad4 <neai_classification+0x1468>
 800aca8:	1c7b      	adds	r3, r7, #1
 800acaa:	b29f      	uxth	r7, r3
 800acac:	f7fd befc 	b.w	8008aa8 <neai_classification+0x143c>
 800acb0:	4635      	mov	r5, r6
 800acb2:	f7fc bfd7 	b.w	8007c64 <neai_classification+0x5f8>
 800acb6:	463e      	mov	r6, r7
 800acb8:	f7fc bfc9 	b.w	8007c4e <neai_classification+0x5e2>
 800acbc:	4646      	mov	r6, r8
 800acbe:	4638      	mov	r0, r7
 800acc0:	4631      	mov	r1, r6
 800acc2:	f7f6 f9ff 	bl	80010c4 <__aeabi_fcmplt>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f47c afc1 	bne.w	8007c4e <neai_classification+0x5e2>
 800accc:	e7f3      	b.n	800acb6 <neai_classification+0x364a>
 800acce:	464e      	mov	r6, r9
 800acd0:	4641      	mov	r1, r8
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7f6 fa14 	bl	8001100 <__aeabi_fcmpgt>
 800acd8:	2800      	cmp	r0, #0
 800acda:	f47c afb1 	bne.w	8007c40 <neai_classification+0x5d4>
 800acde:	e7ed      	b.n	800acbc <neai_classification+0x3650>
 800ace0:	464e      	mov	r6, r9
 800ace2:	f7fc bf9d 	b.w	8007c20 <neai_classification+0x5b4>
 800ace6:	464e      	mov	r6, r9
 800ace8:	f7fc bf91 	b.w	8007c0e <neai_classification+0x5a2>
 800acec:	465e      	mov	r6, fp
 800acee:	f7fc bf85 	b.w	8007bfc <neai_classification+0x590>
 800acf2:	4656      	mov	r6, sl
 800acf4:	4659      	mov	r1, fp
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7f6 fa02 	bl	8001100 <__aeabi_fcmpgt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f47c af7d 	bne.w	8007bfc <neai_classification+0x590>
 800ad02:	e7f3      	b.n	800acec <neai_classification+0x3680>
 800ad04:	464e      	mov	r6, r9
 800ad06:	4651      	mov	r1, sl
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7f6 f9f9 	bl	8001100 <__aeabi_fcmpgt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f47c af6d 	bne.w	8007bee <neai_classification+0x582>
 800ad14:	e7ed      	b.n	800acf2 <neai_classification+0x3686>
 800ad16:	464e      	mov	r6, r9
 800ad18:	f7fc bf59 	b.w	8007bce <neai_classification+0x562>
 800ad1c:	464e      	mov	r6, r9
 800ad1e:	f7fc bf4d 	b.w	8007bbc <neai_classification+0x550>
 800ad22:	464e      	mov	r6, r9
 800ad24:	f7fc bf41 	b.w	8007baa <neai_classification+0x53e>
 800ad28:	463e      	mov	r6, r7
 800ad2a:	f7fc be96 	b.w	8007a5a <neai_classification+0x3ee>
 800ad2e:	4646      	mov	r6, r8
 800ad30:	4638      	mov	r0, r7
 800ad32:	4631      	mov	r1, r6
 800ad34:	f7f6 f9e4 	bl	8001100 <__aeabi_fcmpgt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f47c ae8e 	bne.w	8007a5a <neai_classification+0x3ee>
 800ad3e:	e7f3      	b.n	800ad28 <neai_classification+0x36bc>
 800ad40:	464e      	mov	r6, r9
 800ad42:	4641      	mov	r1, r8
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7f6 f9bd 	bl	80010c4 <__aeabi_fcmplt>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f47c ae7e 	bne.w	8007a4c <neai_classification+0x3e0>
 800ad50:	e7ed      	b.n	800ad2e <neai_classification+0x36c2>
 800ad52:	464e      	mov	r6, r9
 800ad54:	f7fc be6a 	b.w	8007a2c <neai_classification+0x3c0>
 800ad58:	464e      	mov	r6, r9
 800ad5a:	f7fc be5e 	b.w	8007a1a <neai_classification+0x3ae>
 800ad5e:	465e      	mov	r6, fp
 800ad60:	f7fc be52 	b.w	8007a08 <neai_classification+0x39c>
 800ad64:	4656      	mov	r6, sl
 800ad66:	4659      	mov	r1, fp
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7f6 f9ab 	bl	80010c4 <__aeabi_fcmplt>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f47c ae4a 	bne.w	8007a08 <neai_classification+0x39c>
 800ad74:	e7f3      	b.n	800ad5e <neai_classification+0x36f2>
 800ad76:	46ba      	mov	sl, r7
 800ad78:	f7fc bcfa 	b.w	8007770 <neai_classification+0x104>
 800ad7c:	46aa      	mov	sl, r5
 800ad7e:	f7fc bcef 	b.w	8007760 <neai_classification+0xf4>
 800ad82:	46b2      	mov	sl, r6
 800ad84:	f7fc bce4 	b.w	8007750 <neai_classification+0xe4>
 800ad88:	46c2      	mov	sl, r8
 800ad8a:	f7fc bcd9 	b.w	8007740 <neai_classification+0xd4>
 800ad8e:	9e08      	ldr	r6, [sp, #32]
 800ad90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7f6 f9b4 	bl	8001100 <__aeabi_fcmpgt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f47e abf9 	bne.w	8009590 <neai_classification+0x1f24>
 800ad9e:	e01d      	b.n	800addc <neai_classification+0x3770>
 800ada0:	9e07      	ldr	r6, [sp, #28]
 800ada2:	9908      	ldr	r1, [sp, #32]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f7f6 f9ab 	bl	8001100 <__aeabi_fcmpgt>
 800adaa:	2800      	cmp	r0, #0
 800adac:	f47e abe9 	bne.w	8009582 <neai_classification+0x1f16>
 800adb0:	e7ed      	b.n	800ad8e <neai_classification+0x3722>
 800adb2:	9e06      	ldr	r6, [sp, #24]
 800adb4:	9907      	ldr	r1, [sp, #28]
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7f6 f9a2 	bl	8001100 <__aeabi_fcmpgt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f47e abd9 	bne.w	8009574 <neai_classification+0x1f08>
 800adc2:	e7ed      	b.n	800ada0 <neai_classification+0x3734>
 800adc4:	9e05      	ldr	r6, [sp, #20]
 800adc6:	9906      	ldr	r1, [sp, #24]
 800adc8:	4630      	mov	r0, r6
 800adca:	f7f6 f999 	bl	8001100 <__aeabi_fcmpgt>
 800adce:	2800      	cmp	r0, #0
 800add0:	f47e abc9 	bne.w	8009566 <neai_classification+0x1efa>
 800add4:	e7ed      	b.n	800adb2 <neai_classification+0x3746>
 800add6:	9e00      	ldr	r6, [sp, #0]
 800add8:	f7fe bbe1 	b.w	800959e <neai_classification+0x1f32>
 800addc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800adde:	9800      	ldr	r0, [sp, #0]
 800ade0:	4631      	mov	r1, r6
 800ade2:	f7f6 f96f 	bl	80010c4 <__aeabi_fcmplt>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f47e abd9 	bne.w	800959e <neai_classification+0x1f32>
 800adec:	e7f3      	b.n	800add6 <neai_classification+0x376a>
 800adee:	950d      	str	r5, [sp, #52]	@ 0x34
 800adf0:	f7fe bbe1 	b.w	80095b6 <neai_classification+0x1f4a>
 800adf4:	4645      	mov	r5, r8
 800adf6:	f7fe b9ef 	b.w	80091d8 <neai_classification+0x1b6c>
 800adfa:	4635      	mov	r5, r6
 800adfc:	f7fe b9fc 	b.w	80091f8 <neai_classification+0x1b8c>
 800ae00:	be317218 	.word	0xbe317218
 800ae04:	463d      	mov	r5, r7
 800ae06:	f7fe b9ef 	b.w	80091e8 <neai_classification+0x1b7c>
 800ae0a:	9d01      	ldr	r5, [sp, #4]
 800ae0c:	f7fe ba18 	b.w	8009240 <neai_classification+0x1bd4>
 800ae10:	465d      	mov	r5, fp
 800ae12:	f7fe ba0c 	b.w	800922e <neai_classification+0x1bc2>
 800ae16:	4655      	mov	r5, sl
 800ae18:	f7fe ba00 	b.w	800921c <neai_classification+0x1bb0>
 800ae1c:	464d      	mov	r5, r9
 800ae1e:	f7fe b9f4 	b.w	800920a <neai_classification+0x1b9e>
 800ae22:	9e04      	ldr	r6, [sp, #16]
 800ae24:	9905      	ldr	r1, [sp, #20]
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7f6 f96a 	bl	8001100 <__aeabi_fcmpgt>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f47e ab93 	bne.w	8009558 <neai_classification+0x1eec>
 800ae32:	e7c7      	b.n	800adc4 <neai_classification+0x3758>
 800ae34:	9e03      	ldr	r6, [sp, #12]
 800ae36:	9904      	ldr	r1, [sp, #16]
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7f6 f961 	bl	8001100 <__aeabi_fcmpgt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f47e ab83 	bne.w	800954a <neai_classification+0x1ede>
 800ae44:	e7ed      	b.n	800ae22 <neai_classification+0x37b6>
 800ae46:	9e02      	ldr	r6, [sp, #8]
 800ae48:	9903      	ldr	r1, [sp, #12]
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7f6 f958 	bl	8001100 <__aeabi_fcmpgt>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	f47e ab73 	bne.w	800953c <neai_classification+0x1ed0>
 800ae56:	e7ed      	b.n	800ae34 <neai_classification+0x37c8>
 800ae58:	9e01      	ldr	r6, [sp, #4]
 800ae5a:	9902      	ldr	r1, [sp, #8]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7f6 f94f 	bl	8001100 <__aeabi_fcmpgt>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f47e ab63 	bne.w	800952e <neai_classification+0x1ec2>
 800ae68:	e7ed      	b.n	800ae46 <neai_classification+0x37da>
 800ae6a:	465e      	mov	r6, fp
 800ae6c:	9901      	ldr	r1, [sp, #4]
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7f6 f946 	bl	8001100 <__aeabi_fcmpgt>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f47e ab53 	bne.w	8009520 <neai_classification+0x1eb4>
 800ae7a:	e7ed      	b.n	800ae58 <neai_classification+0x37ec>
 800ae7c:	4656      	mov	r6, sl
 800ae7e:	4659      	mov	r1, fp
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7f6 f93d 	bl	8001100 <__aeabi_fcmpgt>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f47e ab43 	bne.w	8009512 <neai_classification+0x1ea6>
 800ae8c:	e7ed      	b.n	800ae6a <neai_classification+0x37fe>
 800ae8e:	464e      	mov	r6, r9
 800ae90:	4651      	mov	r1, sl
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7f6 f934 	bl	8001100 <__aeabi_fcmpgt>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f47e ab33 	bne.w	8009504 <neai_classification+0x1e98>
 800ae9e:	e7ed      	b.n	800ae7c <neai_classification+0x3810>
 800aea0:	463e      	mov	r6, r7
 800aea2:	4649      	mov	r1, r9
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7f6 f92b 	bl	8001100 <__aeabi_fcmpgt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f47e ab23 	bne.w	80094f6 <neai_classification+0x1e8a>
 800aeb0:	e7ed      	b.n	800ae8e <neai_classification+0x3822>
 800aeb2:	950a      	str	r5, [sp, #40]	@ 0x28
 800aeb4:	f7fe ba7d 	b.w	80093b2 <neai_classification+0x1d46>
 800aeb8:	9d00      	ldr	r5, [sp, #0]
 800aeba:	f7fe ba09 	b.w	80092d0 <neai_classification+0x1c64>
 800aebe:	9d08      	ldr	r5, [sp, #32]
 800aec0:	f7fe b9fd 	b.w	80092be <neai_classification+0x1c52>
 800aec4:	9d07      	ldr	r5, [sp, #28]
 800aec6:	f7fe b9f1 	b.w	80092ac <neai_classification+0x1c40>
 800aeca:	9d06      	ldr	r5, [sp, #24]
 800aecc:	f7fe b9e5 	b.w	800929a <neai_classification+0x1c2e>
 800aed0:	9d05      	ldr	r5, [sp, #20]
 800aed2:	f7fe b9d9 	b.w	8009288 <neai_classification+0x1c1c>
 800aed6:	9d04      	ldr	r5, [sp, #16]
 800aed8:	f7fe b9cd 	b.w	8009276 <neai_classification+0x1c0a>
 800aedc:	9d03      	ldr	r5, [sp, #12]
 800aede:	f7fe b9c1 	b.w	8009264 <neai_classification+0x1bf8>
 800aee2:	9d02      	ldr	r5, [sp, #8]
 800aee4:	f7fe b9b5 	b.w	8009252 <neai_classification+0x1be6>
 800aee8:	46a0      	mov	r8, r4
 800aeea:	f7ff b8e3 	b.w	800a0b4 <neai_classification+0x2a48>
 800aeee:	2502      	movs	r5, #2
 800aef0:	e4c6      	b.n	800a880 <neai_classification+0x3214>
 800aef2:	46b8      	mov	r8, r7
 800aef4:	f7ff b89c 	b.w	800a030 <neai_classification+0x29c4>
 800aef8:	3701      	adds	r7, #1
 800aefa:	f7fd bdc6 	b.w	8008a8a <neai_classification+0x141e>
 800aefe:	2300      	movs	r3, #0
 800af00:	f8df e014 	ldr.w	lr, [pc, #20]	@ 800af18 <neai_classification+0x38ac>
 800af04:	f7ff ba23 	b.w	800a34e <neai_classification+0x2ce2>
 800af08:	3501      	adds	r5, #1
 800af0a:	b2ad      	uxth	r5, r5
 800af0c:	f7fd bd42 	b.w	8008994 <neai_classification+0x1328>
 800af10:	1c7b      	adds	r3, r7, #1
 800af12:	b29f      	uxth	r7, r3
 800af14:	f7fd be89 	b.w	8008c2a <neai_classification+0x15be>
 800af18:	200005dc 	.word	0x200005dc

0800af1c <__cvt>:
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af22:	461d      	mov	r5, r3
 800af24:	bfbb      	ittet	lt
 800af26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800af2a:	461d      	movlt	r5, r3
 800af2c:	2300      	movge	r3, #0
 800af2e:	232d      	movlt	r3, #45	@ 0x2d
 800af30:	b088      	sub	sp, #32
 800af32:	4614      	mov	r4, r2
 800af34:	bfb8      	it	lt
 800af36:	4614      	movlt	r4, r2
 800af38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800af3c:	7013      	strb	r3, [r2, #0]
 800af3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800af44:	f023 0820 	bic.w	r8, r3, #32
 800af48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af4c:	d005      	beq.n	800af5a <__cvt+0x3e>
 800af4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af52:	d100      	bne.n	800af56 <__cvt+0x3a>
 800af54:	3601      	adds	r6, #1
 800af56:	2302      	movs	r3, #2
 800af58:	e000      	b.n	800af5c <__cvt+0x40>
 800af5a:	2303      	movs	r3, #3
 800af5c:	aa07      	add	r2, sp, #28
 800af5e:	9204      	str	r2, [sp, #16]
 800af60:	aa06      	add	r2, sp, #24
 800af62:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af66:	e9cd 3600 	strd	r3, r6, [sp]
 800af6a:	4622      	mov	r2, r4
 800af6c:	462b      	mov	r3, r5
 800af6e:	f000 ff5f 	bl	800be30 <_dtoa_r>
 800af72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af76:	4607      	mov	r7, r0
 800af78:	d119      	bne.n	800afae <__cvt+0x92>
 800af7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af7c:	07db      	lsls	r3, r3, #31
 800af7e:	d50e      	bpl.n	800af9e <__cvt+0x82>
 800af80:	eb00 0906 	add.w	r9, r0, r6
 800af84:	2200      	movs	r2, #0
 800af86:	2300      	movs	r3, #0
 800af88:	4620      	mov	r0, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7f5 fd2e 	bl	80009ec <__aeabi_dcmpeq>
 800af90:	b108      	cbz	r0, 800af96 <__cvt+0x7a>
 800af92:	f8cd 901c 	str.w	r9, [sp, #28]
 800af96:	2230      	movs	r2, #48	@ 0x30
 800af98:	9b07      	ldr	r3, [sp, #28]
 800af9a:	454b      	cmp	r3, r9
 800af9c:	d31e      	bcc.n	800afdc <__cvt+0xc0>
 800af9e:	4638      	mov	r0, r7
 800afa0:	9b07      	ldr	r3, [sp, #28]
 800afa2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800afa4:	1bdb      	subs	r3, r3, r7
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	b008      	add	sp, #32
 800afaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afb2:	eb00 0906 	add.w	r9, r0, r6
 800afb6:	d1e5      	bne.n	800af84 <__cvt+0x68>
 800afb8:	7803      	ldrb	r3, [r0, #0]
 800afba:	2b30      	cmp	r3, #48	@ 0x30
 800afbc:	d10a      	bne.n	800afd4 <__cvt+0xb8>
 800afbe:	2200      	movs	r2, #0
 800afc0:	2300      	movs	r3, #0
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7f5 fd11 	bl	80009ec <__aeabi_dcmpeq>
 800afca:	b918      	cbnz	r0, 800afd4 <__cvt+0xb8>
 800afcc:	f1c6 0601 	rsb	r6, r6, #1
 800afd0:	f8ca 6000 	str.w	r6, [sl]
 800afd4:	f8da 3000 	ldr.w	r3, [sl]
 800afd8:	4499      	add	r9, r3
 800afda:	e7d3      	b.n	800af84 <__cvt+0x68>
 800afdc:	1c59      	adds	r1, r3, #1
 800afde:	9107      	str	r1, [sp, #28]
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	e7d9      	b.n	800af98 <__cvt+0x7c>

0800afe4 <__exponent>:
 800afe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe6:	2900      	cmp	r1, #0
 800afe8:	bfb6      	itet	lt
 800afea:	232d      	movlt	r3, #45	@ 0x2d
 800afec:	232b      	movge	r3, #43	@ 0x2b
 800afee:	4249      	neglt	r1, r1
 800aff0:	2909      	cmp	r1, #9
 800aff2:	7002      	strb	r2, [r0, #0]
 800aff4:	7043      	strb	r3, [r0, #1]
 800aff6:	dd29      	ble.n	800b04c <__exponent+0x68>
 800aff8:	f10d 0307 	add.w	r3, sp, #7
 800affc:	461d      	mov	r5, r3
 800affe:	270a      	movs	r7, #10
 800b000:	fbb1 f6f7 	udiv	r6, r1, r7
 800b004:	461a      	mov	r2, r3
 800b006:	fb07 1416 	mls	r4, r7, r6, r1
 800b00a:	3430      	adds	r4, #48	@ 0x30
 800b00c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b010:	460c      	mov	r4, r1
 800b012:	2c63      	cmp	r4, #99	@ 0x63
 800b014:	4631      	mov	r1, r6
 800b016:	f103 33ff 	add.w	r3, r3, #4294967295
 800b01a:	dcf1      	bgt.n	800b000 <__exponent+0x1c>
 800b01c:	3130      	adds	r1, #48	@ 0x30
 800b01e:	1e94      	subs	r4, r2, #2
 800b020:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b024:	4623      	mov	r3, r4
 800b026:	1c41      	adds	r1, r0, #1
 800b028:	42ab      	cmp	r3, r5
 800b02a:	d30a      	bcc.n	800b042 <__exponent+0x5e>
 800b02c:	f10d 0309 	add.w	r3, sp, #9
 800b030:	1a9b      	subs	r3, r3, r2
 800b032:	42ac      	cmp	r4, r5
 800b034:	bf88      	it	hi
 800b036:	2300      	movhi	r3, #0
 800b038:	3302      	adds	r3, #2
 800b03a:	4403      	add	r3, r0
 800b03c:	1a18      	subs	r0, r3, r0
 800b03e:	b003      	add	sp, #12
 800b040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b042:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b046:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b04a:	e7ed      	b.n	800b028 <__exponent+0x44>
 800b04c:	2330      	movs	r3, #48	@ 0x30
 800b04e:	3130      	adds	r1, #48	@ 0x30
 800b050:	7083      	strb	r3, [r0, #2]
 800b052:	70c1      	strb	r1, [r0, #3]
 800b054:	1d03      	adds	r3, r0, #4
 800b056:	e7f1      	b.n	800b03c <__exponent+0x58>

0800b058 <_printf_float>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	b091      	sub	sp, #68	@ 0x44
 800b05e:	460c      	mov	r4, r1
 800b060:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b064:	4616      	mov	r6, r2
 800b066:	461f      	mov	r7, r3
 800b068:	4605      	mov	r5, r0
 800b06a:	f000 fdc3 	bl	800bbf4 <_localeconv_r>
 800b06e:	6803      	ldr	r3, [r0, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	9308      	str	r3, [sp, #32]
 800b074:	f7f5 f88e 	bl	8000194 <strlen>
 800b078:	2300      	movs	r3, #0
 800b07a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b07c:	f8d8 3000 	ldr.w	r3, [r8]
 800b080:	9009      	str	r0, [sp, #36]	@ 0x24
 800b082:	3307      	adds	r3, #7
 800b084:	f023 0307 	bic.w	r3, r3, #7
 800b088:	f103 0208 	add.w	r2, r3, #8
 800b08c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b090:	f8d4 b000 	ldr.w	fp, [r4]
 800b094:	f8c8 2000 	str.w	r2, [r8]
 800b098:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b09c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b0a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b0b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b324 <_printf_float+0x2cc>)
 800b0b4:	f7f5 fccc 	bl	8000a50 <__aeabi_dcmpun>
 800b0b8:	bb70      	cbnz	r0, 800b118 <_printf_float+0xc0>
 800b0ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c2:	4b98      	ldr	r3, [pc, #608]	@ (800b324 <_printf_float+0x2cc>)
 800b0c4:	f7f5 fca6 	bl	8000a14 <__aeabi_dcmple>
 800b0c8:	bb30      	cbnz	r0, 800b118 <_printf_float+0xc0>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	f7f5 fc95 	bl	8000a00 <__aeabi_dcmplt>
 800b0d6:	b110      	cbz	r0, 800b0de <_printf_float+0x86>
 800b0d8:	232d      	movs	r3, #45	@ 0x2d
 800b0da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0de:	4a92      	ldr	r2, [pc, #584]	@ (800b328 <_printf_float+0x2d0>)
 800b0e0:	4b92      	ldr	r3, [pc, #584]	@ (800b32c <_printf_float+0x2d4>)
 800b0e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b0e6:	bf8c      	ite	hi
 800b0e8:	4690      	movhi	r8, r2
 800b0ea:	4698      	movls	r8, r3
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	6123      	str	r3, [r4, #16]
 800b0f4:	f02b 0304 	bic.w	r3, fp, #4
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	4633      	mov	r3, r6
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	9700      	str	r7, [sp, #0]
 800b102:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b104:	f000 f9d4 	bl	800b4b0 <_printf_common>
 800b108:	3001      	adds	r0, #1
 800b10a:	f040 8090 	bne.w	800b22e <_printf_float+0x1d6>
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	b011      	add	sp, #68	@ 0x44
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	4642      	mov	r2, r8
 800b11a:	464b      	mov	r3, r9
 800b11c:	4640      	mov	r0, r8
 800b11e:	4649      	mov	r1, r9
 800b120:	f7f5 fc96 	bl	8000a50 <__aeabi_dcmpun>
 800b124:	b148      	cbz	r0, 800b13a <_printf_float+0xe2>
 800b126:	464b      	mov	r3, r9
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfb8      	it	lt
 800b12c:	232d      	movlt	r3, #45	@ 0x2d
 800b12e:	4a80      	ldr	r2, [pc, #512]	@ (800b330 <_printf_float+0x2d8>)
 800b130:	bfb8      	it	lt
 800b132:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b136:	4b7f      	ldr	r3, [pc, #508]	@ (800b334 <_printf_float+0x2dc>)
 800b138:	e7d3      	b.n	800b0e2 <_printf_float+0x8a>
 800b13a:	6863      	ldr	r3, [r4, #4]
 800b13c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	d13f      	bne.n	800b1c4 <_printf_float+0x16c>
 800b144:	2306      	movs	r3, #6
 800b146:	6063      	str	r3, [r4, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	9206      	str	r2, [sp, #24]
 800b152:	aa0e      	add	r2, sp, #56	@ 0x38
 800b154:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b158:	aa0d      	add	r2, sp, #52	@ 0x34
 800b15a:	9203      	str	r2, [sp, #12]
 800b15c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b160:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b164:	6863      	ldr	r3, [r4, #4]
 800b166:	4642      	mov	r2, r8
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	4628      	mov	r0, r5
 800b16c:	464b      	mov	r3, r9
 800b16e:	910a      	str	r1, [sp, #40]	@ 0x28
 800b170:	f7ff fed4 	bl	800af1c <__cvt>
 800b174:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b176:	4680      	mov	r8, r0
 800b178:	2947      	cmp	r1, #71	@ 0x47
 800b17a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b17c:	d128      	bne.n	800b1d0 <_printf_float+0x178>
 800b17e:	1cc8      	adds	r0, r1, #3
 800b180:	db02      	blt.n	800b188 <_printf_float+0x130>
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	4299      	cmp	r1, r3
 800b186:	dd40      	ble.n	800b20a <_printf_float+0x1b2>
 800b188:	f1aa 0a02 	sub.w	sl, sl, #2
 800b18c:	fa5f fa8a 	uxtb.w	sl, sl
 800b190:	4652      	mov	r2, sl
 800b192:	3901      	subs	r1, #1
 800b194:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b198:	910d      	str	r1, [sp, #52]	@ 0x34
 800b19a:	f7ff ff23 	bl	800afe4 <__exponent>
 800b19e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1a0:	4681      	mov	r9, r0
 800b1a2:	1813      	adds	r3, r2, r0
 800b1a4:	2a01      	cmp	r2, #1
 800b1a6:	6123      	str	r3, [r4, #16]
 800b1a8:	dc02      	bgt.n	800b1b0 <_printf_float+0x158>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	07d2      	lsls	r2, r2, #31
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_float+0x15c>
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	6123      	str	r3, [r4, #16]
 800b1b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d09e      	beq.n	800b0fa <_printf_float+0xa2>
 800b1bc:	232d      	movs	r3, #45	@ 0x2d
 800b1be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1c2:	e79a      	b.n	800b0fa <_printf_float+0xa2>
 800b1c4:	2947      	cmp	r1, #71	@ 0x47
 800b1c6:	d1bf      	bne.n	800b148 <_printf_float+0xf0>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1bd      	bne.n	800b148 <_printf_float+0xf0>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e7ba      	b.n	800b146 <_printf_float+0xee>
 800b1d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1d4:	d9dc      	bls.n	800b190 <_printf_float+0x138>
 800b1d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b1da:	d118      	bne.n	800b20e <_printf_float+0x1b6>
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	6863      	ldr	r3, [r4, #4]
 800b1e0:	dd0b      	ble.n	800b1fa <_printf_float+0x1a2>
 800b1e2:	6121      	str	r1, [r4, #16]
 800b1e4:	b913      	cbnz	r3, 800b1ec <_printf_float+0x194>
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	07d0      	lsls	r0, r2, #31
 800b1ea:	d502      	bpl.n	800b1f2 <_printf_float+0x19a>
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	440b      	add	r3, r1
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	f04f 0900 	mov.w	r9, #0
 800b1f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1f8:	e7dc      	b.n	800b1b4 <_printf_float+0x15c>
 800b1fa:	b913      	cbnz	r3, 800b202 <_printf_float+0x1aa>
 800b1fc:	6822      	ldr	r2, [r4, #0]
 800b1fe:	07d2      	lsls	r2, r2, #31
 800b200:	d501      	bpl.n	800b206 <_printf_float+0x1ae>
 800b202:	3302      	adds	r3, #2
 800b204:	e7f4      	b.n	800b1f0 <_printf_float+0x198>
 800b206:	2301      	movs	r3, #1
 800b208:	e7f2      	b.n	800b1f0 <_printf_float+0x198>
 800b20a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b210:	4299      	cmp	r1, r3
 800b212:	db05      	blt.n	800b220 <_printf_float+0x1c8>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	6121      	str	r1, [r4, #16]
 800b218:	07d8      	lsls	r0, r3, #31
 800b21a:	d5ea      	bpl.n	800b1f2 <_printf_float+0x19a>
 800b21c:	1c4b      	adds	r3, r1, #1
 800b21e:	e7e7      	b.n	800b1f0 <_printf_float+0x198>
 800b220:	2900      	cmp	r1, #0
 800b222:	bfcc      	ite	gt
 800b224:	2201      	movgt	r2, #1
 800b226:	f1c1 0202 	rsble	r2, r1, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	e7e0      	b.n	800b1f0 <_printf_float+0x198>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	055a      	lsls	r2, r3, #21
 800b232:	d407      	bmi.n	800b244 <_printf_float+0x1ec>
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	4642      	mov	r2, r8
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	d12b      	bne.n	800b29a <_printf_float+0x242>
 800b242:	e764      	b.n	800b10e <_printf_float+0xb6>
 800b244:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b248:	f240 80dc 	bls.w	800b404 <_printf_float+0x3ac>
 800b24c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b250:	2200      	movs	r2, #0
 800b252:	2300      	movs	r3, #0
 800b254:	f7f5 fbca 	bl	80009ec <__aeabi_dcmpeq>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d033      	beq.n	800b2c4 <_printf_float+0x26c>
 800b25c:	2301      	movs	r3, #1
 800b25e:	4631      	mov	r1, r6
 800b260:	4628      	mov	r0, r5
 800b262:	4a35      	ldr	r2, [pc, #212]	@ (800b338 <_printf_float+0x2e0>)
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af51 	beq.w	800b10e <_printf_float+0xb6>
 800b26c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b270:	4543      	cmp	r3, r8
 800b272:	db02      	blt.n	800b27a <_printf_float+0x222>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	07d8      	lsls	r0, r3, #31
 800b278:	d50f      	bpl.n	800b29a <_printf_float+0x242>
 800b27a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	f43f af42 	beq.w	800b10e <_printf_float+0xb6>
 800b28a:	f04f 0900 	mov.w	r9, #0
 800b28e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b292:	f104 0a1a 	add.w	sl, r4, #26
 800b296:	45c8      	cmp	r8, r9
 800b298:	dc09      	bgt.n	800b2ae <_printf_float+0x256>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	079b      	lsls	r3, r3, #30
 800b29e:	f100 8102 	bmi.w	800b4a6 <_printf_float+0x44e>
 800b2a2:	68e0      	ldr	r0, [r4, #12]
 800b2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a6:	4298      	cmp	r0, r3
 800b2a8:	bfb8      	it	lt
 800b2aa:	4618      	movlt	r0, r3
 800b2ac:	e731      	b.n	800b112 <_printf_float+0xba>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f af28 	beq.w	800b10e <_printf_float+0xb6>
 800b2be:	f109 0901 	add.w	r9, r9, #1
 800b2c2:	e7e8      	b.n	800b296 <_printf_float+0x23e>
 800b2c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dc38      	bgt.n	800b33c <_printf_float+0x2e4>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	4a19      	ldr	r2, [pc, #100]	@ (800b338 <_printf_float+0x2e0>)
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f43f af1a 	beq.w	800b10e <_printf_float+0xb6>
 800b2da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b2de:	ea59 0303 	orrs.w	r3, r9, r3
 800b2e2:	d102      	bne.n	800b2ea <_printf_float+0x292>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d5d7      	bpl.n	800b29a <_printf_float+0x242>
 800b2ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f af0a 	beq.w	800b10e <_printf_float+0xb6>
 800b2fa:	f04f 0a00 	mov.w	sl, #0
 800b2fe:	f104 0b1a 	add.w	fp, r4, #26
 800b302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b304:	425b      	negs	r3, r3
 800b306:	4553      	cmp	r3, sl
 800b308:	dc01      	bgt.n	800b30e <_printf_float+0x2b6>
 800b30a:	464b      	mov	r3, r9
 800b30c:	e793      	b.n	800b236 <_printf_float+0x1de>
 800b30e:	2301      	movs	r3, #1
 800b310:	465a      	mov	r2, fp
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f aef8 	beq.w	800b10e <_printf_float+0xb6>
 800b31e:	f10a 0a01 	add.w	sl, sl, #1
 800b322:	e7ee      	b.n	800b302 <_printf_float+0x2aa>
 800b324:	7fefffff 	.word	0x7fefffff
 800b328:	0800f002 	.word	0x0800f002
 800b32c:	0800effe 	.word	0x0800effe
 800b330:	0800f00a 	.word	0x0800f00a
 800b334:	0800f006 	.word	0x0800f006
 800b338:	0800f00e 	.word	0x0800f00e
 800b33c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b33e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b342:	4553      	cmp	r3, sl
 800b344:	bfa8      	it	ge
 800b346:	4653      	movge	r3, sl
 800b348:	2b00      	cmp	r3, #0
 800b34a:	4699      	mov	r9, r3
 800b34c:	dc36      	bgt.n	800b3bc <_printf_float+0x364>
 800b34e:	f04f 0b00 	mov.w	fp, #0
 800b352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b356:	f104 021a 	add.w	r2, r4, #26
 800b35a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b35c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b35e:	eba3 0309 	sub.w	r3, r3, r9
 800b362:	455b      	cmp	r3, fp
 800b364:	dc31      	bgt.n	800b3ca <_printf_float+0x372>
 800b366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b368:	459a      	cmp	sl, r3
 800b36a:	dc3a      	bgt.n	800b3e2 <_printf_float+0x38a>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d437      	bmi.n	800b3e2 <_printf_float+0x38a>
 800b372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b374:	ebaa 0903 	sub.w	r9, sl, r3
 800b378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b37a:	ebaa 0303 	sub.w	r3, sl, r3
 800b37e:	4599      	cmp	r9, r3
 800b380:	bfa8      	it	ge
 800b382:	4699      	movge	r9, r3
 800b384:	f1b9 0f00 	cmp.w	r9, #0
 800b388:	dc33      	bgt.n	800b3f2 <_printf_float+0x39a>
 800b38a:	f04f 0800 	mov.w	r8, #0
 800b38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b392:	f104 0b1a 	add.w	fp, r4, #26
 800b396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b398:	ebaa 0303 	sub.w	r3, sl, r3
 800b39c:	eba3 0309 	sub.w	r3, r3, r9
 800b3a0:	4543      	cmp	r3, r8
 800b3a2:	f77f af7a 	ble.w	800b29a <_printf_float+0x242>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	465a      	mov	r2, fp
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	47b8      	blx	r7
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	f43f aeac 	beq.w	800b10e <_printf_float+0xb6>
 800b3b6:	f108 0801 	add.w	r8, r8, #1
 800b3ba:	e7ec      	b.n	800b396 <_printf_float+0x33e>
 800b3bc:	4642      	mov	r2, r8
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d1c2      	bne.n	800b34e <_printf_float+0x2f6>
 800b3c8:	e6a1      	b.n	800b10e <_printf_float+0xb6>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f ae9a 	beq.w	800b10e <_printf_float+0xb6>
 800b3da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3dc:	f10b 0b01 	add.w	fp, fp, #1
 800b3e0:	e7bb      	b.n	800b35a <_printf_float+0x302>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d1c0      	bne.n	800b372 <_printf_float+0x31a>
 800b3f0:	e68d      	b.n	800b10e <_printf_float+0xb6>
 800b3f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	4442      	add	r2, r8
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	d1c3      	bne.n	800b38a <_printf_float+0x332>
 800b402:	e684      	b.n	800b10e <_printf_float+0xb6>
 800b404:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b408:	f1ba 0f01 	cmp.w	sl, #1
 800b40c:	dc01      	bgt.n	800b412 <_printf_float+0x3ba>
 800b40e:	07db      	lsls	r3, r3, #31
 800b410:	d536      	bpl.n	800b480 <_printf_float+0x428>
 800b412:	2301      	movs	r3, #1
 800b414:	4642      	mov	r2, r8
 800b416:	4631      	mov	r1, r6
 800b418:	4628      	mov	r0, r5
 800b41a:	47b8      	blx	r7
 800b41c:	3001      	adds	r0, #1
 800b41e:	f43f ae76 	beq.w	800b10e <_printf_float+0xb6>
 800b422:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	f43f ae6e 	beq.w	800b10e <_printf_float+0xb6>
 800b432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b436:	2200      	movs	r2, #0
 800b438:	2300      	movs	r3, #0
 800b43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b43e:	f7f5 fad5 	bl	80009ec <__aeabi_dcmpeq>
 800b442:	b9c0      	cbnz	r0, 800b476 <_printf_float+0x41e>
 800b444:	4653      	mov	r3, sl
 800b446:	f108 0201 	add.w	r2, r8, #1
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	d10c      	bne.n	800b46e <_printf_float+0x416>
 800b454:	e65b      	b.n	800b10e <_printf_float+0xb6>
 800b456:	2301      	movs	r3, #1
 800b458:	465a      	mov	r2, fp
 800b45a:	4631      	mov	r1, r6
 800b45c:	4628      	mov	r0, r5
 800b45e:	47b8      	blx	r7
 800b460:	3001      	adds	r0, #1
 800b462:	f43f ae54 	beq.w	800b10e <_printf_float+0xb6>
 800b466:	f108 0801 	add.w	r8, r8, #1
 800b46a:	45d0      	cmp	r8, sl
 800b46c:	dbf3      	blt.n	800b456 <_printf_float+0x3fe>
 800b46e:	464b      	mov	r3, r9
 800b470:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b474:	e6e0      	b.n	800b238 <_printf_float+0x1e0>
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	f104 0b1a 	add.w	fp, r4, #26
 800b47e:	e7f4      	b.n	800b46a <_printf_float+0x412>
 800b480:	2301      	movs	r3, #1
 800b482:	4642      	mov	r2, r8
 800b484:	e7e1      	b.n	800b44a <_printf_float+0x3f2>
 800b486:	2301      	movs	r3, #1
 800b488:	464a      	mov	r2, r9
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f ae3c 	beq.w	800b10e <_printf_float+0xb6>
 800b496:	f108 0801 	add.w	r8, r8, #1
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b49e:	1a5b      	subs	r3, r3, r1
 800b4a0:	4543      	cmp	r3, r8
 800b4a2:	dcf0      	bgt.n	800b486 <_printf_float+0x42e>
 800b4a4:	e6fd      	b.n	800b2a2 <_printf_float+0x24a>
 800b4a6:	f04f 0800 	mov.w	r8, #0
 800b4aa:	f104 0919 	add.w	r9, r4, #25
 800b4ae:	e7f4      	b.n	800b49a <_printf_float+0x442>

0800b4b0 <_printf_common>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	4616      	mov	r6, r2
 800b4b6:	4698      	mov	r8, r3
 800b4b8:	688a      	ldr	r2, [r1, #8]
 800b4ba:	690b      	ldr	r3, [r1, #16]
 800b4bc:	4607      	mov	r7, r0
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	bfb8      	it	lt
 800b4c2:	4613      	movlt	r3, r2
 800b4c4:	6033      	str	r3, [r6, #0]
 800b4c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_printf_common+0x26>
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	6033      	str	r3, [r6, #0]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	0699      	lsls	r1, r3, #26
 800b4da:	bf42      	ittt	mi
 800b4dc:	6833      	ldrmi	r3, [r6, #0]
 800b4de:	3302      	addmi	r3, #2
 800b4e0:	6033      	strmi	r3, [r6, #0]
 800b4e2:	6825      	ldr	r5, [r4, #0]
 800b4e4:	f015 0506 	ands.w	r5, r5, #6
 800b4e8:	d106      	bne.n	800b4f8 <_printf_common+0x48>
 800b4ea:	f104 0a19 	add.w	sl, r4, #25
 800b4ee:	68e3      	ldr	r3, [r4, #12]
 800b4f0:	6832      	ldr	r2, [r6, #0]
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	42ab      	cmp	r3, r5
 800b4f6:	dc2b      	bgt.n	800b550 <_printf_common+0xa0>
 800b4f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	3b00      	subs	r3, #0
 800b500:	bf18      	it	ne
 800b502:	2301      	movne	r3, #1
 800b504:	0692      	lsls	r2, r2, #26
 800b506:	d430      	bmi.n	800b56a <_printf_common+0xba>
 800b508:	4641      	mov	r1, r8
 800b50a:	4638      	mov	r0, r7
 800b50c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b510:	47c8      	blx	r9
 800b512:	3001      	adds	r0, #1
 800b514:	d023      	beq.n	800b55e <_printf_common+0xae>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	f003 0306 	and.w	r3, r3, #6
 800b51e:	2b04      	cmp	r3, #4
 800b520:	bf14      	ite	ne
 800b522:	2500      	movne	r5, #0
 800b524:	6833      	ldreq	r3, [r6, #0]
 800b526:	f04f 0600 	mov.w	r6, #0
 800b52a:	bf08      	it	eq
 800b52c:	68e5      	ldreq	r5, [r4, #12]
 800b52e:	f104 041a 	add.w	r4, r4, #26
 800b532:	bf08      	it	eq
 800b534:	1aed      	subeq	r5, r5, r3
 800b536:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b53a:	bf08      	it	eq
 800b53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b540:	4293      	cmp	r3, r2
 800b542:	bfc4      	itt	gt
 800b544:	1a9b      	subgt	r3, r3, r2
 800b546:	18ed      	addgt	r5, r5, r3
 800b548:	42b5      	cmp	r5, r6
 800b54a:	d11a      	bne.n	800b582 <_printf_common+0xd2>
 800b54c:	2000      	movs	r0, #0
 800b54e:	e008      	b.n	800b562 <_printf_common+0xb2>
 800b550:	2301      	movs	r3, #1
 800b552:	4652      	mov	r2, sl
 800b554:	4641      	mov	r1, r8
 800b556:	4638      	mov	r0, r7
 800b558:	47c8      	blx	r9
 800b55a:	3001      	adds	r0, #1
 800b55c:	d103      	bne.n	800b566 <_printf_common+0xb6>
 800b55e:	f04f 30ff 	mov.w	r0, #4294967295
 800b562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b566:	3501      	adds	r5, #1
 800b568:	e7c1      	b.n	800b4ee <_printf_common+0x3e>
 800b56a:	2030      	movs	r0, #48	@ 0x30
 800b56c:	18e1      	adds	r1, r4, r3
 800b56e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b578:	4422      	add	r2, r4
 800b57a:	3302      	adds	r3, #2
 800b57c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b580:	e7c2      	b.n	800b508 <_printf_common+0x58>
 800b582:	2301      	movs	r3, #1
 800b584:	4622      	mov	r2, r4
 800b586:	4641      	mov	r1, r8
 800b588:	4638      	mov	r0, r7
 800b58a:	47c8      	blx	r9
 800b58c:	3001      	adds	r0, #1
 800b58e:	d0e6      	beq.n	800b55e <_printf_common+0xae>
 800b590:	3601      	adds	r6, #1
 800b592:	e7d9      	b.n	800b548 <_printf_common+0x98>

0800b594 <_printf_i>:
 800b594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b598:	7e0f      	ldrb	r7, [r1, #24]
 800b59a:	4691      	mov	r9, r2
 800b59c:	2f78      	cmp	r7, #120	@ 0x78
 800b59e:	4680      	mov	r8, r0
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	469a      	mov	sl, r3
 800b5a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5aa:	d807      	bhi.n	800b5bc <_printf_i+0x28>
 800b5ac:	2f62      	cmp	r7, #98	@ 0x62
 800b5ae:	d80a      	bhi.n	800b5c6 <_printf_i+0x32>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	f000 80d1 	beq.w	800b758 <_printf_i+0x1c4>
 800b5b6:	2f58      	cmp	r7, #88	@ 0x58
 800b5b8:	f000 80b8 	beq.w	800b72c <_printf_i+0x198>
 800b5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5c4:	e03a      	b.n	800b63c <_printf_i+0xa8>
 800b5c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5ca:	2b15      	cmp	r3, #21
 800b5cc:	d8f6      	bhi.n	800b5bc <_printf_i+0x28>
 800b5ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b5d4 <_printf_i+0x40>)
 800b5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5d4:	0800b62d 	.word	0x0800b62d
 800b5d8:	0800b641 	.word	0x0800b641
 800b5dc:	0800b5bd 	.word	0x0800b5bd
 800b5e0:	0800b5bd 	.word	0x0800b5bd
 800b5e4:	0800b5bd 	.word	0x0800b5bd
 800b5e8:	0800b5bd 	.word	0x0800b5bd
 800b5ec:	0800b641 	.word	0x0800b641
 800b5f0:	0800b5bd 	.word	0x0800b5bd
 800b5f4:	0800b5bd 	.word	0x0800b5bd
 800b5f8:	0800b5bd 	.word	0x0800b5bd
 800b5fc:	0800b5bd 	.word	0x0800b5bd
 800b600:	0800b73f 	.word	0x0800b73f
 800b604:	0800b66b 	.word	0x0800b66b
 800b608:	0800b6f9 	.word	0x0800b6f9
 800b60c:	0800b5bd 	.word	0x0800b5bd
 800b610:	0800b5bd 	.word	0x0800b5bd
 800b614:	0800b761 	.word	0x0800b761
 800b618:	0800b5bd 	.word	0x0800b5bd
 800b61c:	0800b66b 	.word	0x0800b66b
 800b620:	0800b5bd 	.word	0x0800b5bd
 800b624:	0800b5bd 	.word	0x0800b5bd
 800b628:	0800b701 	.word	0x0800b701
 800b62c:	6833      	ldr	r3, [r6, #0]
 800b62e:	1d1a      	adds	r2, r3, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6032      	str	r2, [r6, #0]
 800b634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b63c:	2301      	movs	r3, #1
 800b63e:	e09c      	b.n	800b77a <_printf_i+0x1e6>
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	1d19      	adds	r1, r3, #4
 800b646:	6031      	str	r1, [r6, #0]
 800b648:	0606      	lsls	r6, r0, #24
 800b64a:	d501      	bpl.n	800b650 <_printf_i+0xbc>
 800b64c:	681d      	ldr	r5, [r3, #0]
 800b64e:	e003      	b.n	800b658 <_printf_i+0xc4>
 800b650:	0645      	lsls	r5, r0, #25
 800b652:	d5fb      	bpl.n	800b64c <_printf_i+0xb8>
 800b654:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b658:	2d00      	cmp	r5, #0
 800b65a:	da03      	bge.n	800b664 <_printf_i+0xd0>
 800b65c:	232d      	movs	r3, #45	@ 0x2d
 800b65e:	426d      	negs	r5, r5
 800b660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b664:	230a      	movs	r3, #10
 800b666:	4858      	ldr	r0, [pc, #352]	@ (800b7c8 <_printf_i+0x234>)
 800b668:	e011      	b.n	800b68e <_printf_i+0xfa>
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	6833      	ldr	r3, [r6, #0]
 800b66e:	0608      	lsls	r0, r1, #24
 800b670:	f853 5b04 	ldr.w	r5, [r3], #4
 800b674:	d402      	bmi.n	800b67c <_printf_i+0xe8>
 800b676:	0649      	lsls	r1, r1, #25
 800b678:	bf48      	it	mi
 800b67a:	b2ad      	uxthmi	r5, r5
 800b67c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b67e:	6033      	str	r3, [r6, #0]
 800b680:	bf14      	ite	ne
 800b682:	230a      	movne	r3, #10
 800b684:	2308      	moveq	r3, #8
 800b686:	4850      	ldr	r0, [pc, #320]	@ (800b7c8 <_printf_i+0x234>)
 800b688:	2100      	movs	r1, #0
 800b68a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b68e:	6866      	ldr	r6, [r4, #4]
 800b690:	2e00      	cmp	r6, #0
 800b692:	60a6      	str	r6, [r4, #8]
 800b694:	db05      	blt.n	800b6a2 <_printf_i+0x10e>
 800b696:	6821      	ldr	r1, [r4, #0]
 800b698:	432e      	orrs	r6, r5
 800b69a:	f021 0104 	bic.w	r1, r1, #4
 800b69e:	6021      	str	r1, [r4, #0]
 800b6a0:	d04b      	beq.n	800b73a <_printf_i+0x1a6>
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6a8:	fb03 5711 	mls	r7, r3, r1, r5
 800b6ac:	5dc7      	ldrb	r7, [r0, r7]
 800b6ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6b2:	462f      	mov	r7, r5
 800b6b4:	42bb      	cmp	r3, r7
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	d9f4      	bls.n	800b6a4 <_printf_i+0x110>
 800b6ba:	2b08      	cmp	r3, #8
 800b6bc:	d10b      	bne.n	800b6d6 <_printf_i+0x142>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	07df      	lsls	r7, r3, #31
 800b6c2:	d508      	bpl.n	800b6d6 <_printf_i+0x142>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	6861      	ldr	r1, [r4, #4]
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	bfde      	ittt	le
 800b6cc:	2330      	movle	r3, #48	@ 0x30
 800b6ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6d6:	1b92      	subs	r2, r2, r6
 800b6d8:	6122      	str	r2, [r4, #16]
 800b6da:	464b      	mov	r3, r9
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f8cd a000 	str.w	sl, [sp]
 800b6e4:	aa03      	add	r2, sp, #12
 800b6e6:	f7ff fee3 	bl	800b4b0 <_printf_common>
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d14a      	bne.n	800b784 <_printf_i+0x1f0>
 800b6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f2:	b004      	add	sp, #16
 800b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	f043 0320 	orr.w	r3, r3, #32
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	2778      	movs	r7, #120	@ 0x78
 800b702:	4832      	ldr	r0, [pc, #200]	@ (800b7cc <_printf_i+0x238>)
 800b704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	6831      	ldr	r1, [r6, #0]
 800b70c:	061f      	lsls	r7, r3, #24
 800b70e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b712:	d402      	bmi.n	800b71a <_printf_i+0x186>
 800b714:	065f      	lsls	r7, r3, #25
 800b716:	bf48      	it	mi
 800b718:	b2ad      	uxthmi	r5, r5
 800b71a:	6031      	str	r1, [r6, #0]
 800b71c:	07d9      	lsls	r1, r3, #31
 800b71e:	bf44      	itt	mi
 800b720:	f043 0320 	orrmi.w	r3, r3, #32
 800b724:	6023      	strmi	r3, [r4, #0]
 800b726:	b11d      	cbz	r5, 800b730 <_printf_i+0x19c>
 800b728:	2310      	movs	r3, #16
 800b72a:	e7ad      	b.n	800b688 <_printf_i+0xf4>
 800b72c:	4826      	ldr	r0, [pc, #152]	@ (800b7c8 <_printf_i+0x234>)
 800b72e:	e7e9      	b.n	800b704 <_printf_i+0x170>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	f023 0320 	bic.w	r3, r3, #32
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	e7f6      	b.n	800b728 <_printf_i+0x194>
 800b73a:	4616      	mov	r6, r2
 800b73c:	e7bd      	b.n	800b6ba <_printf_i+0x126>
 800b73e:	6833      	ldr	r3, [r6, #0]
 800b740:	6825      	ldr	r5, [r4, #0]
 800b742:	1d18      	adds	r0, r3, #4
 800b744:	6961      	ldr	r1, [r4, #20]
 800b746:	6030      	str	r0, [r6, #0]
 800b748:	062e      	lsls	r6, r5, #24
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	d501      	bpl.n	800b752 <_printf_i+0x1be>
 800b74e:	6019      	str	r1, [r3, #0]
 800b750:	e002      	b.n	800b758 <_printf_i+0x1c4>
 800b752:	0668      	lsls	r0, r5, #25
 800b754:	d5fb      	bpl.n	800b74e <_printf_i+0x1ba>
 800b756:	8019      	strh	r1, [r3, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	4616      	mov	r6, r2
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	e7bc      	b.n	800b6da <_printf_i+0x146>
 800b760:	6833      	ldr	r3, [r6, #0]
 800b762:	2100      	movs	r1, #0
 800b764:	1d1a      	adds	r2, r3, #4
 800b766:	6032      	str	r2, [r6, #0]
 800b768:	681e      	ldr	r6, [r3, #0]
 800b76a:	6862      	ldr	r2, [r4, #4]
 800b76c:	4630      	mov	r0, r6
 800b76e:	f000 fab8 	bl	800bce2 <memchr>
 800b772:	b108      	cbz	r0, 800b778 <_printf_i+0x1e4>
 800b774:	1b80      	subs	r0, r0, r6
 800b776:	6060      	str	r0, [r4, #4]
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	6123      	str	r3, [r4, #16]
 800b77c:	2300      	movs	r3, #0
 800b77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b782:	e7aa      	b.n	800b6da <_printf_i+0x146>
 800b784:	4632      	mov	r2, r6
 800b786:	4649      	mov	r1, r9
 800b788:	4640      	mov	r0, r8
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	47d0      	blx	sl
 800b78e:	3001      	adds	r0, #1
 800b790:	d0ad      	beq.n	800b6ee <_printf_i+0x15a>
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	079b      	lsls	r3, r3, #30
 800b796:	d413      	bmi.n	800b7c0 <_printf_i+0x22c>
 800b798:	68e0      	ldr	r0, [r4, #12]
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	4298      	cmp	r0, r3
 800b79e:	bfb8      	it	lt
 800b7a0:	4618      	movlt	r0, r3
 800b7a2:	e7a6      	b.n	800b6f2 <_printf_i+0x15e>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4632      	mov	r2, r6
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	47d0      	blx	sl
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d09d      	beq.n	800b6ee <_printf_i+0x15a>
 800b7b2:	3501      	adds	r5, #1
 800b7b4:	68e3      	ldr	r3, [r4, #12]
 800b7b6:	9903      	ldr	r1, [sp, #12]
 800b7b8:	1a5b      	subs	r3, r3, r1
 800b7ba:	42ab      	cmp	r3, r5
 800b7bc:	dcf2      	bgt.n	800b7a4 <_printf_i+0x210>
 800b7be:	e7eb      	b.n	800b798 <_printf_i+0x204>
 800b7c0:	2500      	movs	r5, #0
 800b7c2:	f104 0619 	add.w	r6, r4, #25
 800b7c6:	e7f5      	b.n	800b7b4 <_printf_i+0x220>
 800b7c8:	0800f010 	.word	0x0800f010
 800b7cc:	0800f021 	.word	0x0800f021

0800b7d0 <std>:
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7de:	6083      	str	r3, [r0, #8]
 800b7e0:	8181      	strh	r1, [r0, #12]
 800b7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7e4:	81c2      	strh	r2, [r0, #14]
 800b7e6:	6183      	str	r3, [r0, #24]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	305c      	adds	r0, #92	@ 0x5c
 800b7ee:	f000 f9f9 	bl	800bbe4 <memset>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <std+0x58>)
 800b7f4:	6224      	str	r4, [r4, #32]
 800b7f6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b82c <std+0x5c>)
 800b7fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b830 <std+0x60>)
 800b7fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b800:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <std+0x64>)
 800b802:	6323      	str	r3, [r4, #48]	@ 0x30
 800b804:	4b0c      	ldr	r3, [pc, #48]	@ (800b838 <std+0x68>)
 800b806:	429c      	cmp	r4, r3
 800b808:	d006      	beq.n	800b818 <std+0x48>
 800b80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b80e:	4294      	cmp	r4, r2
 800b810:	d002      	beq.n	800b818 <std+0x48>
 800b812:	33d0      	adds	r3, #208	@ 0xd0
 800b814:	429c      	cmp	r4, r3
 800b816:	d105      	bne.n	800b824 <std+0x54>
 800b818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b820:	f000 ba5c 	b.w	800bcdc <__retarget_lock_init_recursive>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop
 800b828:	0800ba35 	.word	0x0800ba35
 800b82c:	0800ba57 	.word	0x0800ba57
 800b830:	0800ba8f 	.word	0x0800ba8f
 800b834:	0800bab3 	.word	0x0800bab3
 800b838:	20000648 	.word	0x20000648

0800b83c <stdio_exit_handler>:
 800b83c:	4a02      	ldr	r2, [pc, #8]	@ (800b848 <stdio_exit_handler+0xc>)
 800b83e:	4903      	ldr	r1, [pc, #12]	@ (800b84c <stdio_exit_handler+0x10>)
 800b840:	4803      	ldr	r0, [pc, #12]	@ (800b850 <stdio_exit_handler+0x14>)
 800b842:	f000 b869 	b.w	800b918 <_fwalk_sglue>
 800b846:	bf00      	nop
 800b848:	20000020 	.word	0x20000020
 800b84c:	0800d649 	.word	0x0800d649
 800b850:	20000030 	.word	0x20000030

0800b854 <cleanup_stdio>:
 800b854:	6841      	ldr	r1, [r0, #4]
 800b856:	4b0c      	ldr	r3, [pc, #48]	@ (800b888 <cleanup_stdio+0x34>)
 800b858:	b510      	push	{r4, lr}
 800b85a:	4299      	cmp	r1, r3
 800b85c:	4604      	mov	r4, r0
 800b85e:	d001      	beq.n	800b864 <cleanup_stdio+0x10>
 800b860:	f001 fef2 	bl	800d648 <_fflush_r>
 800b864:	68a1      	ldr	r1, [r4, #8]
 800b866:	4b09      	ldr	r3, [pc, #36]	@ (800b88c <cleanup_stdio+0x38>)
 800b868:	4299      	cmp	r1, r3
 800b86a:	d002      	beq.n	800b872 <cleanup_stdio+0x1e>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f001 feeb 	bl	800d648 <_fflush_r>
 800b872:	68e1      	ldr	r1, [r4, #12]
 800b874:	4b06      	ldr	r3, [pc, #24]	@ (800b890 <cleanup_stdio+0x3c>)
 800b876:	4299      	cmp	r1, r3
 800b878:	d004      	beq.n	800b884 <cleanup_stdio+0x30>
 800b87a:	4620      	mov	r0, r4
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f001 bee2 	b.w	800d648 <_fflush_r>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	20000648 	.word	0x20000648
 800b88c:	200006b0 	.word	0x200006b0
 800b890:	20000718 	.word	0x20000718

0800b894 <global_stdio_init.part.0>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <global_stdio_init.part.0+0x30>)
 800b898:	4c0b      	ldr	r4, [pc, #44]	@ (800b8c8 <global_stdio_init.part.0+0x34>)
 800b89a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8cc <global_stdio_init.part.0+0x38>)
 800b89c:	4620      	mov	r0, r4
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f7ff ff94 	bl	800b7d0 <std>
 800b8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2109      	movs	r1, #9
 800b8b0:	f7ff ff8e 	bl	800b7d0 <std>
 800b8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8be:	2112      	movs	r1, #18
 800b8c0:	f7ff bf86 	b.w	800b7d0 <std>
 800b8c4:	20000780 	.word	0x20000780
 800b8c8:	20000648 	.word	0x20000648
 800b8cc:	0800b83d 	.word	0x0800b83d

0800b8d0 <__sfp_lock_acquire>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	@ (800b8d8 <__sfp_lock_acquire+0x8>)
 800b8d2:	f000 ba04 	b.w	800bcde <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20000789 	.word	0x20000789

0800b8dc <__sfp_lock_release>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	@ (800b8e4 <__sfp_lock_release+0x8>)
 800b8de:	f000 b9ff 	b.w	800bce0 <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20000789 	.word	0x20000789

0800b8e8 <__sinit>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	f7ff fff0 	bl	800b8d0 <__sfp_lock_acquire>
 800b8f0:	6a23      	ldr	r3, [r4, #32]
 800b8f2:	b11b      	cbz	r3, 800b8fc <__sinit+0x14>
 800b8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f8:	f7ff bff0 	b.w	800b8dc <__sfp_lock_release>
 800b8fc:	4b04      	ldr	r3, [pc, #16]	@ (800b910 <__sinit+0x28>)
 800b8fe:	6223      	str	r3, [r4, #32]
 800b900:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <__sinit+0x2c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f5      	bne.n	800b8f4 <__sinit+0xc>
 800b908:	f7ff ffc4 	bl	800b894 <global_stdio_init.part.0>
 800b90c:	e7f2      	b.n	800b8f4 <__sinit+0xc>
 800b90e:	bf00      	nop
 800b910:	0800b855 	.word	0x0800b855
 800b914:	20000780 	.word	0x20000780

0800b918 <_fwalk_sglue>:
 800b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b91c:	4607      	mov	r7, r0
 800b91e:	4688      	mov	r8, r1
 800b920:	4614      	mov	r4, r2
 800b922:	2600      	movs	r6, #0
 800b924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b928:	f1b9 0901 	subs.w	r9, r9, #1
 800b92c:	d505      	bpl.n	800b93a <_fwalk_sglue+0x22>
 800b92e:	6824      	ldr	r4, [r4, #0]
 800b930:	2c00      	cmp	r4, #0
 800b932:	d1f7      	bne.n	800b924 <_fwalk_sglue+0xc>
 800b934:	4630      	mov	r0, r6
 800b936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d907      	bls.n	800b950 <_fwalk_sglue+0x38>
 800b940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b944:	3301      	adds	r3, #1
 800b946:	d003      	beq.n	800b950 <_fwalk_sglue+0x38>
 800b948:	4629      	mov	r1, r5
 800b94a:	4638      	mov	r0, r7
 800b94c:	47c0      	blx	r8
 800b94e:	4306      	orrs	r6, r0
 800b950:	3568      	adds	r5, #104	@ 0x68
 800b952:	e7e9      	b.n	800b928 <_fwalk_sglue+0x10>

0800b954 <iprintf>:
 800b954:	b40f      	push	{r0, r1, r2, r3}
 800b956:	b507      	push	{r0, r1, r2, lr}
 800b958:	4906      	ldr	r1, [pc, #24]	@ (800b974 <iprintf+0x20>)
 800b95a:	ab04      	add	r3, sp, #16
 800b95c:	6808      	ldr	r0, [r1, #0]
 800b95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b962:	6881      	ldr	r1, [r0, #8]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	f001 fcd7 	bl	800d318 <_vfiprintf_r>
 800b96a:	b003      	add	sp, #12
 800b96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b970:	b004      	add	sp, #16
 800b972:	4770      	bx	lr
 800b974:	2000002c 	.word	0x2000002c

0800b978 <_puts_r>:
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b570      	push	{r4, r5, r6, lr}
 800b97c:	4605      	mov	r5, r0
 800b97e:	460e      	mov	r6, r1
 800b980:	6884      	ldr	r4, [r0, #8]
 800b982:	b90b      	cbnz	r3, 800b988 <_puts_r+0x10>
 800b984:	f7ff ffb0 	bl	800b8e8 <__sinit>
 800b988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b98a:	07db      	lsls	r3, r3, #31
 800b98c:	d405      	bmi.n	800b99a <_puts_r+0x22>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	0598      	lsls	r0, r3, #22
 800b992:	d402      	bmi.n	800b99a <_puts_r+0x22>
 800b994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b996:	f000 f9a2 	bl	800bcde <__retarget_lock_acquire_recursive>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	0719      	lsls	r1, r3, #28
 800b99e:	d502      	bpl.n	800b9a6 <_puts_r+0x2e>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d135      	bne.n	800ba12 <_puts_r+0x9a>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f000 f8c5 	bl	800bb38 <__swsetup_r>
 800b9ae:	b380      	cbz	r0, 800ba12 <_puts_r+0x9a>
 800b9b0:	f04f 35ff 	mov.w	r5, #4294967295
 800b9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9b6:	07da      	lsls	r2, r3, #31
 800b9b8:	d405      	bmi.n	800b9c6 <_puts_r+0x4e>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	059b      	lsls	r3, r3, #22
 800b9be:	d402      	bmi.n	800b9c6 <_puts_r+0x4e>
 800b9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9c2:	f000 f98d 	bl	800bce0 <__retarget_lock_release_recursive>
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	da04      	bge.n	800b9d8 <_puts_r+0x60>
 800b9ce:	69a2      	ldr	r2, [r4, #24]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	dc17      	bgt.n	800ba04 <_puts_r+0x8c>
 800b9d4:	290a      	cmp	r1, #10
 800b9d6:	d015      	beq.n	800ba04 <_puts_r+0x8c>
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	6022      	str	r2, [r4, #0]
 800b9de:	7019      	strb	r1, [r3, #0]
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	60a3      	str	r3, [r4, #8]
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	d1ed      	bne.n	800b9ca <_puts_r+0x52>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da11      	bge.n	800ba16 <_puts_r+0x9e>
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	210a      	movs	r1, #10
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f85f 	bl	800baba <__swbuf_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d0d7      	beq.n	800b9b0 <_puts_r+0x38>
 800ba00:	250a      	movs	r5, #10
 800ba02:	e7d7      	b.n	800b9b4 <_puts_r+0x3c>
 800ba04:	4622      	mov	r2, r4
 800ba06:	4628      	mov	r0, r5
 800ba08:	f000 f857 	bl	800baba <__swbuf_r>
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d1e7      	bne.n	800b9e0 <_puts_r+0x68>
 800ba10:	e7ce      	b.n	800b9b0 <_puts_r+0x38>
 800ba12:	3e01      	subs	r6, #1
 800ba14:	e7e4      	b.n	800b9e0 <_puts_r+0x68>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	6022      	str	r2, [r4, #0]
 800ba1c:	220a      	movs	r2, #10
 800ba1e:	701a      	strb	r2, [r3, #0]
 800ba20:	e7ee      	b.n	800ba00 <_puts_r+0x88>
	...

0800ba24 <puts>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	@ (800ba30 <puts+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f7ff bfa5 	b.w	800b978 <_puts_r>
 800ba2e:	bf00      	nop
 800ba30:	2000002c 	.word	0x2000002c

0800ba34 <__sread>:
 800ba34:	b510      	push	{r4, lr}
 800ba36:	460c      	mov	r4, r1
 800ba38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3c:	f000 f900 	bl	800bc40 <_read_r>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	bfab      	itete	ge
 800ba44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba46:	89a3      	ldrhlt	r3, [r4, #12]
 800ba48:	181b      	addge	r3, r3, r0
 800ba4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba4e:	bfac      	ite	ge
 800ba50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba52:	81a3      	strhlt	r3, [r4, #12]
 800ba54:	bd10      	pop	{r4, pc}

0800ba56 <__swrite>:
 800ba56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	898b      	ldrh	r3, [r1, #12]
 800ba5e:	4605      	mov	r5, r0
 800ba60:	05db      	lsls	r3, r3, #23
 800ba62:	460c      	mov	r4, r1
 800ba64:	4616      	mov	r6, r2
 800ba66:	d505      	bpl.n	800ba74 <__swrite+0x1e>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba70:	f000 f8d4 	bl	800bc1c <_lseek_r>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	4632      	mov	r2, r6
 800ba78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	4628      	mov	r0, r5
 800ba80:	463b      	mov	r3, r7
 800ba82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8a:	f000 b8eb 	b.w	800bc64 <_write_r>

0800ba8e <__sseek>:
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	460c      	mov	r4, r1
 800ba92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba96:	f000 f8c1 	bl	800bc1c <_lseek_r>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	89a3      	ldrh	r3, [r4, #12]
 800ba9e:	bf15      	itete	ne
 800baa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800baa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800baa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800baaa:	81a3      	strheq	r3, [r4, #12]
 800baac:	bf18      	it	ne
 800baae:	81a3      	strhne	r3, [r4, #12]
 800bab0:	bd10      	pop	{r4, pc}

0800bab2 <__sclose>:
 800bab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab6:	f000 b8a1 	b.w	800bbfc <_close_r>

0800baba <__swbuf_r>:
 800baba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babc:	460e      	mov	r6, r1
 800babe:	4614      	mov	r4, r2
 800bac0:	4605      	mov	r5, r0
 800bac2:	b118      	cbz	r0, 800bacc <__swbuf_r+0x12>
 800bac4:	6a03      	ldr	r3, [r0, #32]
 800bac6:	b90b      	cbnz	r3, 800bacc <__swbuf_r+0x12>
 800bac8:	f7ff ff0e 	bl	800b8e8 <__sinit>
 800bacc:	69a3      	ldr	r3, [r4, #24]
 800bace:	60a3      	str	r3, [r4, #8]
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	071a      	lsls	r2, r3, #28
 800bad4:	d501      	bpl.n	800bada <__swbuf_r+0x20>
 800bad6:	6923      	ldr	r3, [r4, #16]
 800bad8:	b943      	cbnz	r3, 800baec <__swbuf_r+0x32>
 800bada:	4621      	mov	r1, r4
 800badc:	4628      	mov	r0, r5
 800bade:	f000 f82b 	bl	800bb38 <__swsetup_r>
 800bae2:	b118      	cbz	r0, 800baec <__swbuf_r+0x32>
 800bae4:	f04f 37ff 	mov.w	r7, #4294967295
 800bae8:	4638      	mov	r0, r7
 800baea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	6922      	ldr	r2, [r4, #16]
 800baf0:	b2f6      	uxtb	r6, r6
 800baf2:	1a98      	subs	r0, r3, r2
 800baf4:	6963      	ldr	r3, [r4, #20]
 800baf6:	4637      	mov	r7, r6
 800baf8:	4283      	cmp	r3, r0
 800bafa:	dc05      	bgt.n	800bb08 <__swbuf_r+0x4e>
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f001 fda2 	bl	800d648 <_fflush_r>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d1ed      	bne.n	800bae4 <__swbuf_r+0x2a>
 800bb08:	68a3      	ldr	r3, [r4, #8]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	60a3      	str	r3, [r4, #8]
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	6022      	str	r2, [r4, #0]
 800bb14:	701e      	strb	r6, [r3, #0]
 800bb16:	6962      	ldr	r2, [r4, #20]
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d004      	beq.n	800bb28 <__swbuf_r+0x6e>
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	07db      	lsls	r3, r3, #31
 800bb22:	d5e1      	bpl.n	800bae8 <__swbuf_r+0x2e>
 800bb24:	2e0a      	cmp	r6, #10
 800bb26:	d1df      	bne.n	800bae8 <__swbuf_r+0x2e>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f001 fd8c 	bl	800d648 <_fflush_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d0d9      	beq.n	800bae8 <__swbuf_r+0x2e>
 800bb34:	e7d6      	b.n	800bae4 <__swbuf_r+0x2a>
	...

0800bb38 <__swsetup_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4b29      	ldr	r3, [pc, #164]	@ (800bbe0 <__swsetup_r+0xa8>)
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	460c      	mov	r4, r1
 800bb42:	b118      	cbz	r0, 800bb4c <__swsetup_r+0x14>
 800bb44:	6a03      	ldr	r3, [r0, #32]
 800bb46:	b90b      	cbnz	r3, 800bb4c <__swsetup_r+0x14>
 800bb48:	f7ff fece 	bl	800b8e8 <__sinit>
 800bb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb50:	0719      	lsls	r1, r3, #28
 800bb52:	d422      	bmi.n	800bb9a <__swsetup_r+0x62>
 800bb54:	06da      	lsls	r2, r3, #27
 800bb56:	d407      	bmi.n	800bb68 <__swsetup_r+0x30>
 800bb58:	2209      	movs	r2, #9
 800bb5a:	602a      	str	r2, [r5, #0]
 800bb5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	81a3      	strh	r3, [r4, #12]
 800bb66:	e033      	b.n	800bbd0 <__swsetup_r+0x98>
 800bb68:	0758      	lsls	r0, r3, #29
 800bb6a:	d512      	bpl.n	800bb92 <__swsetup_r+0x5a>
 800bb6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb6e:	b141      	cbz	r1, 800bb82 <__swsetup_r+0x4a>
 800bb70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb74:	4299      	cmp	r1, r3
 800bb76:	d002      	beq.n	800bb7e <__swsetup_r+0x46>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f000 ff2d 	bl	800c9d8 <_free_r>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f043 0308 	orr.w	r3, r3, #8
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	b94b      	cbnz	r3, 800bbb2 <__swsetup_r+0x7a>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba8:	d003      	beq.n	800bbb2 <__swsetup_r+0x7a>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f001 fd98 	bl	800d6e2 <__smakebuf_r>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	f013 0201 	ands.w	r2, r3, #1
 800bbba:	d00a      	beq.n	800bbd2 <__swsetup_r+0x9a>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	60a2      	str	r2, [r4, #8]
 800bbc0:	6962      	ldr	r2, [r4, #20]
 800bbc2:	4252      	negs	r2, r2
 800bbc4:	61a2      	str	r2, [r4, #24]
 800bbc6:	6922      	ldr	r2, [r4, #16]
 800bbc8:	b942      	cbnz	r2, 800bbdc <__swsetup_r+0xa4>
 800bbca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbce:	d1c5      	bne.n	800bb5c <__swsetup_r+0x24>
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	0799      	lsls	r1, r3, #30
 800bbd4:	bf58      	it	pl
 800bbd6:	6962      	ldrpl	r2, [r4, #20]
 800bbd8:	60a2      	str	r2, [r4, #8]
 800bbda:	e7f4      	b.n	800bbc6 <__swsetup_r+0x8e>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	e7f7      	b.n	800bbd0 <__swsetup_r+0x98>
 800bbe0:	2000002c 	.word	0x2000002c

0800bbe4 <memset>:
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	4402      	add	r2, r0
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d100      	bne.n	800bbee <memset+0xa>
 800bbec:	4770      	bx	lr
 800bbee:	f803 1b01 	strb.w	r1, [r3], #1
 800bbf2:	e7f9      	b.n	800bbe8 <memset+0x4>

0800bbf4 <_localeconv_r>:
 800bbf4:	4800      	ldr	r0, [pc, #0]	@ (800bbf8 <_localeconv_r+0x4>)
 800bbf6:	4770      	bx	lr
 800bbf8:	2000016c 	.word	0x2000016c

0800bbfc <_close_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4d05      	ldr	r5, [pc, #20]	@ (800bc18 <_close_r+0x1c>)
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	f7f6 fe65 	bl	80028d6 <_close>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_close_r+0x1a>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_close_r+0x1a>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20000784 	.word	0x20000784

0800bc1c <_lseek_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	4611      	mov	r1, r2
 800bc24:	2200      	movs	r2, #0
 800bc26:	4d05      	ldr	r5, [pc, #20]	@ (800bc3c <_lseek_r+0x20>)
 800bc28:	602a      	str	r2, [r5, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f7f6 fe77 	bl	800291e <_lseek>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_lseek_r+0x1e>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_lseek_r+0x1e>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20000784 	.word	0x20000784

0800bc40 <_read_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4d05      	ldr	r5, [pc, #20]	@ (800bc60 <_read_r+0x20>)
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f7f6 fe08 	bl	8002864 <_read>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_read_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_read_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20000784 	.word	0x20000784

0800bc64 <_write_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4d05      	ldr	r5, [pc, #20]	@ (800bc84 <_write_r+0x20>)
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f6 fe13 	bl	800289e <_write>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_write_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_write_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20000784 	.word	0x20000784

0800bc88 <__errno>:
 800bc88:	4b01      	ldr	r3, [pc, #4]	@ (800bc90 <__errno+0x8>)
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	2000002c 	.word	0x2000002c

0800bc94 <__libc_init_array>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	2600      	movs	r6, #0
 800bc98:	4d0c      	ldr	r5, [pc, #48]	@ (800bccc <__libc_init_array+0x38>)
 800bc9a:	4c0d      	ldr	r4, [pc, #52]	@ (800bcd0 <__libc_init_array+0x3c>)
 800bc9c:	1b64      	subs	r4, r4, r5
 800bc9e:	10a4      	asrs	r4, r4, #2
 800bca0:	42a6      	cmp	r6, r4
 800bca2:	d109      	bne.n	800bcb8 <__libc_init_array+0x24>
 800bca4:	f002 fc6e 	bl	800e584 <_init>
 800bca8:	2600      	movs	r6, #0
 800bcaa:	4d0a      	ldr	r5, [pc, #40]	@ (800bcd4 <__libc_init_array+0x40>)
 800bcac:	4c0a      	ldr	r4, [pc, #40]	@ (800bcd8 <__libc_init_array+0x44>)
 800bcae:	1b64      	subs	r4, r4, r5
 800bcb0:	10a4      	asrs	r4, r4, #2
 800bcb2:	42a6      	cmp	r6, r4
 800bcb4:	d105      	bne.n	800bcc2 <__libc_init_array+0x2e>
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcbc:	4798      	blx	r3
 800bcbe:	3601      	adds	r6, #1
 800bcc0:	e7ee      	b.n	800bca0 <__libc_init_array+0xc>
 800bcc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc6:	4798      	blx	r3
 800bcc8:	3601      	adds	r6, #1
 800bcca:	e7f2      	b.n	800bcb2 <__libc_init_array+0x1e>
 800bccc:	0800f3b8 	.word	0x0800f3b8
 800bcd0:	0800f3b8 	.word	0x0800f3b8
 800bcd4:	0800f3b8 	.word	0x0800f3b8
 800bcd8:	0800f3bc 	.word	0x0800f3bc

0800bcdc <__retarget_lock_init_recursive>:
 800bcdc:	4770      	bx	lr

0800bcde <__retarget_lock_acquire_recursive>:
 800bcde:	4770      	bx	lr

0800bce0 <__retarget_lock_release_recursive>:
 800bce0:	4770      	bx	lr

0800bce2 <memchr>:
 800bce2:	4603      	mov	r3, r0
 800bce4:	b510      	push	{r4, lr}
 800bce6:	b2c9      	uxtb	r1, r1
 800bce8:	4402      	add	r2, r0
 800bcea:	4293      	cmp	r3, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	d101      	bne.n	800bcf4 <memchr+0x12>
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e003      	b.n	800bcfc <memchr+0x1a>
 800bcf4:	7804      	ldrb	r4, [r0, #0]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	428c      	cmp	r4, r1
 800bcfa:	d1f6      	bne.n	800bcea <memchr+0x8>
 800bcfc:	bd10      	pop	{r4, pc}

0800bcfe <memcpy>:
 800bcfe:	440a      	add	r2, r1
 800bd00:	4291      	cmp	r1, r2
 800bd02:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd06:	d100      	bne.n	800bd0a <memcpy+0xc>
 800bd08:	4770      	bx	lr
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd10:	4291      	cmp	r1, r2
 800bd12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd16:	d1f9      	bne.n	800bd0c <memcpy+0xe>
 800bd18:	bd10      	pop	{r4, pc}

0800bd1a <quorem>:
 800bd1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1e:	6903      	ldr	r3, [r0, #16]
 800bd20:	690c      	ldr	r4, [r1, #16]
 800bd22:	4607      	mov	r7, r0
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	db7e      	blt.n	800be26 <quorem+0x10c>
 800bd28:	3c01      	subs	r4, #1
 800bd2a:	00a3      	lsls	r3, r4, #2
 800bd2c:	f100 0514 	add.w	r5, r0, #20
 800bd30:	f101 0814 	add.w	r8, r1, #20
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd44:	3301      	adds	r3, #1
 800bd46:	429a      	cmp	r2, r3
 800bd48:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd50:	d32e      	bcc.n	800bdb0 <quorem+0x96>
 800bd52:	f04f 0a00 	mov.w	sl, #0
 800bd56:	46c4      	mov	ip, r8
 800bd58:	46ae      	mov	lr, r5
 800bd5a:	46d3      	mov	fp, sl
 800bd5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd60:	b298      	uxth	r0, r3
 800bd62:	fb06 a000 	mla	r0, r6, r0, sl
 800bd66:	0c1b      	lsrs	r3, r3, #16
 800bd68:	0c02      	lsrs	r2, r0, #16
 800bd6a:	fb06 2303 	mla	r3, r6, r3, r2
 800bd6e:	f8de 2000 	ldr.w	r2, [lr]
 800bd72:	b280      	uxth	r0, r0
 800bd74:	b292      	uxth	r2, r2
 800bd76:	1a12      	subs	r2, r2, r0
 800bd78:	445a      	add	r2, fp
 800bd7a:	f8de 0000 	ldr.w	r0, [lr]
 800bd7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd8c:	b292      	uxth	r2, r2
 800bd8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd92:	45e1      	cmp	r9, ip
 800bd94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd98:	f84e 2b04 	str.w	r2, [lr], #4
 800bd9c:	d2de      	bcs.n	800bd5c <quorem+0x42>
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	58eb      	ldr	r3, [r5, r3]
 800bda2:	b92b      	cbnz	r3, 800bdb0 <quorem+0x96>
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	3b04      	subs	r3, #4
 800bda8:	429d      	cmp	r5, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	d32f      	bcc.n	800be0e <quorem+0xf4>
 800bdae:	613c      	str	r4, [r7, #16]
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f001 f981 	bl	800d0b8 <__mcmp>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	db25      	blt.n	800be06 <quorem+0xec>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdc2:	f8d1 c000 	ldr.w	ip, [r1]
 800bdc6:	fa1f fe82 	uxth.w	lr, r2
 800bdca:	fa1f f38c 	uxth.w	r3, ip
 800bdce:	eba3 030e 	sub.w	r3, r3, lr
 800bdd2:	4403      	add	r3, r0
 800bdd4:	0c12      	lsrs	r2, r2, #16
 800bdd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bde4:	45c1      	cmp	r9, r8
 800bde6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bdea:	f841 3b04 	str.w	r3, [r1], #4
 800bdee:	d2e6      	bcs.n	800bdbe <quorem+0xa4>
 800bdf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdf8:	b922      	cbnz	r2, 800be04 <quorem+0xea>
 800bdfa:	3b04      	subs	r3, #4
 800bdfc:	429d      	cmp	r5, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	d30b      	bcc.n	800be1a <quorem+0x100>
 800be02:	613c      	str	r4, [r7, #16]
 800be04:	3601      	adds	r6, #1
 800be06:	4630      	mov	r0, r6
 800be08:	b003      	add	sp, #12
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	3b04      	subs	r3, #4
 800be12:	2a00      	cmp	r2, #0
 800be14:	d1cb      	bne.n	800bdae <quorem+0x94>
 800be16:	3c01      	subs	r4, #1
 800be18:	e7c6      	b.n	800bda8 <quorem+0x8e>
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	3b04      	subs	r3, #4
 800be1e:	2a00      	cmp	r2, #0
 800be20:	d1ef      	bne.n	800be02 <quorem+0xe8>
 800be22:	3c01      	subs	r4, #1
 800be24:	e7ea      	b.n	800bdfc <quorem+0xe2>
 800be26:	2000      	movs	r0, #0
 800be28:	e7ee      	b.n	800be08 <quorem+0xee>
 800be2a:	0000      	movs	r0, r0
 800be2c:	0000      	movs	r0, r0
	...

0800be30 <_dtoa_r>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	4614      	mov	r4, r2
 800be36:	461d      	mov	r5, r3
 800be38:	69c7      	ldr	r7, [r0, #28]
 800be3a:	b097      	sub	sp, #92	@ 0x5c
 800be3c:	4681      	mov	r9, r0
 800be3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800be42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800be44:	b97f      	cbnz	r7, 800be66 <_dtoa_r+0x36>
 800be46:	2010      	movs	r0, #16
 800be48:	f000 fe0e 	bl	800ca68 <malloc>
 800be4c:	4602      	mov	r2, r0
 800be4e:	f8c9 001c 	str.w	r0, [r9, #28]
 800be52:	b920      	cbnz	r0, 800be5e <_dtoa_r+0x2e>
 800be54:	21ef      	movs	r1, #239	@ 0xef
 800be56:	4bac      	ldr	r3, [pc, #688]	@ (800c108 <_dtoa_r+0x2d8>)
 800be58:	48ac      	ldr	r0, [pc, #688]	@ (800c10c <_dtoa_r+0x2dc>)
 800be5a:	f001 fcb1 	bl	800d7c0 <__assert_func>
 800be5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be62:	6007      	str	r7, [r0, #0]
 800be64:	60c7      	str	r7, [r0, #12]
 800be66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be6a:	6819      	ldr	r1, [r3, #0]
 800be6c:	b159      	cbz	r1, 800be86 <_dtoa_r+0x56>
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	2301      	movs	r3, #1
 800be72:	4093      	lsls	r3, r2
 800be74:	604a      	str	r2, [r1, #4]
 800be76:	608b      	str	r3, [r1, #8]
 800be78:	4648      	mov	r0, r9
 800be7a:	f000 feeb 	bl	800cc54 <_Bfree>
 800be7e:	2200      	movs	r2, #0
 800be80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	1e2b      	subs	r3, r5, #0
 800be88:	bfaf      	iteee	ge
 800be8a:	2300      	movge	r3, #0
 800be8c:	2201      	movlt	r2, #1
 800be8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be92:	9307      	strlt	r3, [sp, #28]
 800be94:	bfa8      	it	ge
 800be96:	6033      	strge	r3, [r6, #0]
 800be98:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800be9c:	4b9c      	ldr	r3, [pc, #624]	@ (800c110 <_dtoa_r+0x2e0>)
 800be9e:	bfb8      	it	lt
 800bea0:	6032      	strlt	r2, [r6, #0]
 800bea2:	ea33 0308 	bics.w	r3, r3, r8
 800bea6:	d112      	bne.n	800bece <_dtoa_r+0x9e>
 800bea8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800beac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800beb4:	4323      	orrs	r3, r4
 800beb6:	f000 855e 	beq.w	800c976 <_dtoa_r+0xb46>
 800beba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c114 <_dtoa_r+0x2e4>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 8560 	beq.w	800c986 <_dtoa_r+0xb56>
 800bec6:	f10a 0303 	add.w	r3, sl, #3
 800beca:	f000 bd5a 	b.w	800c982 <_dtoa_r+0xb52>
 800bece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bed2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beda:	2200      	movs	r2, #0
 800bedc:	2300      	movs	r3, #0
 800bede:	f7f4 fd85 	bl	80009ec <__aeabi_dcmpeq>
 800bee2:	4607      	mov	r7, r0
 800bee4:	b158      	cbz	r0, 800befe <_dtoa_r+0xce>
 800bee6:	2301      	movs	r3, #1
 800bee8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800beee:	b113      	cbz	r3, 800bef6 <_dtoa_r+0xc6>
 800bef0:	4b89      	ldr	r3, [pc, #548]	@ (800c118 <_dtoa_r+0x2e8>)
 800bef2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c11c <_dtoa_r+0x2ec>
 800befa:	f000 bd44 	b.w	800c986 <_dtoa_r+0xb56>
 800befe:	ab14      	add	r3, sp, #80	@ 0x50
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	ab15      	add	r3, sp, #84	@ 0x54
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	4648      	mov	r0, r9
 800bf08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf0c:	f001 f984 	bl	800d218 <__d2b>
 800bf10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bf14:	9003      	str	r0, [sp, #12]
 800bf16:	2e00      	cmp	r6, #0
 800bf18:	d078      	beq.n	800c00c <_dtoa_r+0x1dc>
 800bf1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf30:	9712      	str	r7, [sp, #72]	@ 0x48
 800bf32:	4619      	mov	r1, r3
 800bf34:	2200      	movs	r2, #0
 800bf36:	4b7a      	ldr	r3, [pc, #488]	@ (800c120 <_dtoa_r+0x2f0>)
 800bf38:	f7f4 f938 	bl	80001ac <__aeabi_dsub>
 800bf3c:	a36c      	add	r3, pc, #432	@ (adr r3, 800c0f0 <_dtoa_r+0x2c0>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 faeb 	bl	800051c <__aeabi_dmul>
 800bf46:	a36c      	add	r3, pc, #432	@ (adr r3, 800c0f8 <_dtoa_r+0x2c8>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	f7f4 f930 	bl	80001b0 <__adddf3>
 800bf50:	4604      	mov	r4, r0
 800bf52:	4630      	mov	r0, r6
 800bf54:	460d      	mov	r5, r1
 800bf56:	f7f4 fa77 	bl	8000448 <__aeabi_i2d>
 800bf5a:	a369      	add	r3, pc, #420	@ (adr r3, 800c100 <_dtoa_r+0x2d0>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 fadc 	bl	800051c <__aeabi_dmul>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4620      	mov	r0, r4
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f7f4 f920 	bl	80001b0 <__adddf3>
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	f7f4 fd82 	bl	8000a7c <__aeabi_d2iz>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 fd3d 	bl	8000a00 <__aeabi_dcmplt>
 800bf86:	b140      	cbz	r0, 800bf9a <_dtoa_r+0x16a>
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7f4 fa5d 	bl	8000448 <__aeabi_i2d>
 800bf8e:	4622      	mov	r2, r4
 800bf90:	462b      	mov	r3, r5
 800bf92:	f7f4 fd2b 	bl	80009ec <__aeabi_dcmpeq>
 800bf96:	b900      	cbnz	r0, 800bf9a <_dtoa_r+0x16a>
 800bf98:	3f01      	subs	r7, #1
 800bf9a:	2f16      	cmp	r7, #22
 800bf9c:	d854      	bhi.n	800c048 <_dtoa_r+0x218>
 800bf9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfa2:	4b60      	ldr	r3, [pc, #384]	@ (800c124 <_dtoa_r+0x2f4>)
 800bfa4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 fd28 	bl	8000a00 <__aeabi_dcmplt>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d04b      	beq.n	800c04c <_dtoa_r+0x21c>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	3f01      	subs	r7, #1
 800bfb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfbc:	1b9b      	subs	r3, r3, r6
 800bfbe:	1e5a      	subs	r2, r3, #1
 800bfc0:	bf49      	itett	mi
 800bfc2:	f1c3 0301 	rsbmi	r3, r3, #1
 800bfc6:	2300      	movpl	r3, #0
 800bfc8:	9304      	strmi	r3, [sp, #16]
 800bfca:	2300      	movmi	r3, #0
 800bfcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfce:	bf54      	ite	pl
 800bfd0:	9304      	strpl	r3, [sp, #16]
 800bfd2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bfd4:	2f00      	cmp	r7, #0
 800bfd6:	db3b      	blt.n	800c050 <_dtoa_r+0x220>
 800bfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfda:	970e      	str	r7, [sp, #56]	@ 0x38
 800bfdc:	443b      	add	r3, r7
 800bfde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfe6:	2b09      	cmp	r3, #9
 800bfe8:	d865      	bhi.n	800c0b6 <_dtoa_r+0x286>
 800bfea:	2b05      	cmp	r3, #5
 800bfec:	bfc4      	itt	gt
 800bfee:	3b04      	subgt	r3, #4
 800bff0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bff2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bff4:	bfc8      	it	gt
 800bff6:	2400      	movgt	r4, #0
 800bff8:	f1a3 0302 	sub.w	r3, r3, #2
 800bffc:	bfd8      	it	le
 800bffe:	2401      	movle	r4, #1
 800c000:	2b03      	cmp	r3, #3
 800c002:	d864      	bhi.n	800c0ce <_dtoa_r+0x29e>
 800c004:	e8df f003 	tbb	[pc, r3]
 800c008:	2c385553 	.word	0x2c385553
 800c00c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c010:	441e      	add	r6, r3
 800c012:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c016:	2b20      	cmp	r3, #32
 800c018:	bfc1      	itttt	gt
 800c01a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c01e:	fa08 f803 	lslgt.w	r8, r8, r3
 800c022:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c026:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c02a:	bfd6      	itet	le
 800c02c:	f1c3 0320 	rsble	r3, r3, #32
 800c030:	ea48 0003 	orrgt.w	r0, r8, r3
 800c034:	fa04 f003 	lslle.w	r0, r4, r3
 800c038:	f7f4 f9f6 	bl	8000428 <__aeabi_ui2d>
 800c03c:	2201      	movs	r2, #1
 800c03e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c042:	3e01      	subs	r6, #1
 800c044:	9212      	str	r2, [sp, #72]	@ 0x48
 800c046:	e774      	b.n	800bf32 <_dtoa_r+0x102>
 800c048:	2301      	movs	r3, #1
 800c04a:	e7b5      	b.n	800bfb8 <_dtoa_r+0x188>
 800c04c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c04e:	e7b4      	b.n	800bfba <_dtoa_r+0x18a>
 800c050:	9b04      	ldr	r3, [sp, #16]
 800c052:	1bdb      	subs	r3, r3, r7
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	427b      	negs	r3, r7
 800c058:	930a      	str	r3, [sp, #40]	@ 0x28
 800c05a:	2300      	movs	r3, #0
 800c05c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c05e:	e7c1      	b.n	800bfe4 <_dtoa_r+0x1b4>
 800c060:	2301      	movs	r3, #1
 800c062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c066:	eb07 0b03 	add.w	fp, r7, r3
 800c06a:	f10b 0301 	add.w	r3, fp, #1
 800c06e:	2b01      	cmp	r3, #1
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	bfb8      	it	lt
 800c074:	2301      	movlt	r3, #1
 800c076:	e006      	b.n	800c086 <_dtoa_r+0x256>
 800c078:	2301      	movs	r3, #1
 800c07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c07c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dd28      	ble.n	800c0d4 <_dtoa_r+0x2a4>
 800c082:	469b      	mov	fp, r3
 800c084:	9308      	str	r3, [sp, #32]
 800c086:	2100      	movs	r1, #0
 800c088:	2204      	movs	r2, #4
 800c08a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c08e:	f102 0514 	add.w	r5, r2, #20
 800c092:	429d      	cmp	r5, r3
 800c094:	d926      	bls.n	800c0e4 <_dtoa_r+0x2b4>
 800c096:	6041      	str	r1, [r0, #4]
 800c098:	4648      	mov	r0, r9
 800c09a:	f000 fd9b 	bl	800cbd4 <_Balloc>
 800c09e:	4682      	mov	sl, r0
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d143      	bne.n	800c12c <_dtoa_r+0x2fc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c128 <_dtoa_r+0x2f8>)
 800c0ac:	e6d4      	b.n	800be58 <_dtoa_r+0x28>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e7e3      	b.n	800c07a <_dtoa_r+0x24a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e7d5      	b.n	800c062 <_dtoa_r+0x232>
 800c0b6:	2401      	movs	r4, #1
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0bc:	9320      	str	r3, [sp, #128]	@ 0x80
 800c0be:	f04f 3bff 	mov.w	fp, #4294967295
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2312      	movs	r3, #18
 800c0c6:	f8cd b020 	str.w	fp, [sp, #32]
 800c0ca:	9221      	str	r2, [sp, #132]	@ 0x84
 800c0cc:	e7db      	b.n	800c086 <_dtoa_r+0x256>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0d2:	e7f4      	b.n	800c0be <_dtoa_r+0x28e>
 800c0d4:	f04f 0b01 	mov.w	fp, #1
 800c0d8:	465b      	mov	r3, fp
 800c0da:	f8cd b020 	str.w	fp, [sp, #32]
 800c0de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c0e2:	e7d0      	b.n	800c086 <_dtoa_r+0x256>
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	0052      	lsls	r2, r2, #1
 800c0e8:	e7d1      	b.n	800c08e <_dtoa_r+0x25e>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	636f4361 	.word	0x636f4361
 800c0f4:	3fd287a7 	.word	0x3fd287a7
 800c0f8:	8b60c8b3 	.word	0x8b60c8b3
 800c0fc:	3fc68a28 	.word	0x3fc68a28
 800c100:	509f79fb 	.word	0x509f79fb
 800c104:	3fd34413 	.word	0x3fd34413
 800c108:	0800f03f 	.word	0x0800f03f
 800c10c:	0800f056 	.word	0x0800f056
 800c110:	7ff00000 	.word	0x7ff00000
 800c114:	0800f03b 	.word	0x0800f03b
 800c118:	0800f00f 	.word	0x0800f00f
 800c11c:	0800f00e 	.word	0x0800f00e
 800c120:	3ff80000 	.word	0x3ff80000
 800c124:	0800f1a8 	.word	0x0800f1a8
 800c128:	0800f0ae 	.word	0x0800f0ae
 800c12c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c130:	6018      	str	r0, [r3, #0]
 800c132:	9b08      	ldr	r3, [sp, #32]
 800c134:	2b0e      	cmp	r3, #14
 800c136:	f200 80a1 	bhi.w	800c27c <_dtoa_r+0x44c>
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	f000 809e 	beq.w	800c27c <_dtoa_r+0x44c>
 800c140:	2f00      	cmp	r7, #0
 800c142:	dd33      	ble.n	800c1ac <_dtoa_r+0x37c>
 800c144:	4b9c      	ldr	r3, [pc, #624]	@ (800c3b8 <_dtoa_r+0x588>)
 800c146:	f007 020f 	and.w	r2, r7, #15
 800c14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c14e:	05f8      	lsls	r0, r7, #23
 800c150:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c154:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c15c:	d516      	bpl.n	800c18c <_dtoa_r+0x35c>
 800c15e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c162:	4b96      	ldr	r3, [pc, #600]	@ (800c3bc <_dtoa_r+0x58c>)
 800c164:	2603      	movs	r6, #3
 800c166:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c16a:	f7f4 fb01 	bl	8000770 <__aeabi_ddiv>
 800c16e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c172:	f004 040f 	and.w	r4, r4, #15
 800c176:	4d91      	ldr	r5, [pc, #580]	@ (800c3bc <_dtoa_r+0x58c>)
 800c178:	b954      	cbnz	r4, 800c190 <_dtoa_r+0x360>
 800c17a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c182:	f7f4 faf5 	bl	8000770 <__aeabi_ddiv>
 800c186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c18a:	e028      	b.n	800c1de <_dtoa_r+0x3ae>
 800c18c:	2602      	movs	r6, #2
 800c18e:	e7f2      	b.n	800c176 <_dtoa_r+0x346>
 800c190:	07e1      	lsls	r1, r4, #31
 800c192:	d508      	bpl.n	800c1a6 <_dtoa_r+0x376>
 800c194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c19c:	f7f4 f9be 	bl	800051c <__aeabi_dmul>
 800c1a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1a4:	3601      	adds	r6, #1
 800c1a6:	1064      	asrs	r4, r4, #1
 800c1a8:	3508      	adds	r5, #8
 800c1aa:	e7e5      	b.n	800c178 <_dtoa_r+0x348>
 800c1ac:	f000 80af 	beq.w	800c30e <_dtoa_r+0x4de>
 800c1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b4:	427c      	negs	r4, r7
 800c1b6:	4b80      	ldr	r3, [pc, #512]	@ (800c3b8 <_dtoa_r+0x588>)
 800c1b8:	f004 020f 	and.w	r2, r4, #15
 800c1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	f7f4 f9aa 	bl	800051c <__aeabi_dmul>
 800c1c8:	2602      	movs	r6, #2
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1d0:	4d7a      	ldr	r5, [pc, #488]	@ (800c3bc <_dtoa_r+0x58c>)
 800c1d2:	1124      	asrs	r4, r4, #4
 800c1d4:	2c00      	cmp	r4, #0
 800c1d6:	f040 808f 	bne.w	800c2f8 <_dtoa_r+0x4c8>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1d3      	bne.n	800c186 <_dtoa_r+0x356>
 800c1de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c1e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 8094 	beq.w	800c312 <_dtoa_r+0x4e2>
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	4b73      	ldr	r3, [pc, #460]	@ (800c3c0 <_dtoa_r+0x590>)
 800c1f2:	f7f4 fc05 	bl	8000a00 <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f000 808b 	beq.w	800c312 <_dtoa_r+0x4e2>
 800c1fc:	9b08      	ldr	r3, [sp, #32]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 8087 	beq.w	800c312 <_dtoa_r+0x4e2>
 800c204:	f1bb 0f00 	cmp.w	fp, #0
 800c208:	dd34      	ble.n	800c274 <_dtoa_r+0x444>
 800c20a:	4620      	mov	r0, r4
 800c20c:	2200      	movs	r2, #0
 800c20e:	4629      	mov	r1, r5
 800c210:	4b6c      	ldr	r3, [pc, #432]	@ (800c3c4 <_dtoa_r+0x594>)
 800c212:	f7f4 f983 	bl	800051c <__aeabi_dmul>
 800c216:	465c      	mov	r4, fp
 800c218:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c21c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c220:	3601      	adds	r6, #1
 800c222:	4630      	mov	r0, r6
 800c224:	f7f4 f910 	bl	8000448 <__aeabi_i2d>
 800c228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c22c:	f7f4 f976 	bl	800051c <__aeabi_dmul>
 800c230:	2200      	movs	r2, #0
 800c232:	4b65      	ldr	r3, [pc, #404]	@ (800c3c8 <_dtoa_r+0x598>)
 800c234:	f7f3 ffbc 	bl	80001b0 <__adddf3>
 800c238:	4605      	mov	r5, r0
 800c23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c23e:	2c00      	cmp	r4, #0
 800c240:	d16a      	bne.n	800c318 <_dtoa_r+0x4e8>
 800c242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c246:	2200      	movs	r2, #0
 800c248:	4b60      	ldr	r3, [pc, #384]	@ (800c3cc <_dtoa_r+0x59c>)
 800c24a:	f7f3 ffaf 	bl	80001ac <__aeabi_dsub>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c256:	462a      	mov	r2, r5
 800c258:	4633      	mov	r3, r6
 800c25a:	f7f4 fbef 	bl	8000a3c <__aeabi_dcmpgt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f040 8298 	bne.w	800c794 <_dtoa_r+0x964>
 800c264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c268:	462a      	mov	r2, r5
 800c26a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c26e:	f7f4 fbc7 	bl	8000a00 <__aeabi_dcmplt>
 800c272:	bb38      	cbnz	r0, 800c2c4 <_dtoa_r+0x494>
 800c274:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c278:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c27c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f2c0 8157 	blt.w	800c532 <_dtoa_r+0x702>
 800c284:	2f0e      	cmp	r7, #14
 800c286:	f300 8154 	bgt.w	800c532 <_dtoa_r+0x702>
 800c28a:	4b4b      	ldr	r3, [pc, #300]	@ (800c3b8 <_dtoa_r+0x588>)
 800c28c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c290:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c294:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f280 80e5 	bge.w	800c46a <_dtoa_r+0x63a>
 800c2a0:	9b08      	ldr	r3, [sp, #32]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f300 80e1 	bgt.w	800c46a <_dtoa_r+0x63a>
 800c2a8:	d10c      	bne.n	800c2c4 <_dtoa_r+0x494>
 800c2aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	4b46      	ldr	r3, [pc, #280]	@ (800c3cc <_dtoa_r+0x59c>)
 800c2b2:	f7f4 f933 	bl	800051c <__aeabi_dmul>
 800c2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ba:	f7f4 fbb5 	bl	8000a28 <__aeabi_dcmpge>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f000 8266 	beq.w	800c790 <_dtoa_r+0x960>
 800c2c4:	2400      	movs	r4, #0
 800c2c6:	4625      	mov	r5, r4
 800c2c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2ca:	4656      	mov	r6, sl
 800c2cc:	ea6f 0803 	mvn.w	r8, r3
 800c2d0:	2700      	movs	r7, #0
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f000 fcbd 	bl	800cc54 <_Bfree>
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	f000 80bd 	beq.w	800c45a <_dtoa_r+0x62a>
 800c2e0:	b12f      	cbz	r7, 800c2ee <_dtoa_r+0x4be>
 800c2e2:	42af      	cmp	r7, r5
 800c2e4:	d003      	beq.n	800c2ee <_dtoa_r+0x4be>
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	4648      	mov	r0, r9
 800c2ea:	f000 fcb3 	bl	800cc54 <_Bfree>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4648      	mov	r0, r9
 800c2f2:	f000 fcaf 	bl	800cc54 <_Bfree>
 800c2f6:	e0b0      	b.n	800c45a <_dtoa_r+0x62a>
 800c2f8:	07e2      	lsls	r2, r4, #31
 800c2fa:	d505      	bpl.n	800c308 <_dtoa_r+0x4d8>
 800c2fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c300:	f7f4 f90c 	bl	800051c <__aeabi_dmul>
 800c304:	2301      	movs	r3, #1
 800c306:	3601      	adds	r6, #1
 800c308:	1064      	asrs	r4, r4, #1
 800c30a:	3508      	adds	r5, #8
 800c30c:	e762      	b.n	800c1d4 <_dtoa_r+0x3a4>
 800c30e:	2602      	movs	r6, #2
 800c310:	e765      	b.n	800c1de <_dtoa_r+0x3ae>
 800c312:	46b8      	mov	r8, r7
 800c314:	9c08      	ldr	r4, [sp, #32]
 800c316:	e784      	b.n	800c222 <_dtoa_r+0x3f2>
 800c318:	4b27      	ldr	r3, [pc, #156]	@ (800c3b8 <_dtoa_r+0x588>)
 800c31a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c31c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c324:	4454      	add	r4, sl
 800c326:	2900      	cmp	r1, #0
 800c328:	d054      	beq.n	800c3d4 <_dtoa_r+0x5a4>
 800c32a:	2000      	movs	r0, #0
 800c32c:	4928      	ldr	r1, [pc, #160]	@ (800c3d0 <_dtoa_r+0x5a0>)
 800c32e:	f7f4 fa1f 	bl	8000770 <__aeabi_ddiv>
 800c332:	4633      	mov	r3, r6
 800c334:	462a      	mov	r2, r5
 800c336:	f7f3 ff39 	bl	80001ac <__aeabi_dsub>
 800c33a:	4656      	mov	r6, sl
 800c33c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c344:	f7f4 fb9a 	bl	8000a7c <__aeabi_d2iz>
 800c348:	4605      	mov	r5, r0
 800c34a:	f7f4 f87d 	bl	8000448 <__aeabi_i2d>
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c356:	f7f3 ff29 	bl	80001ac <__aeabi_dsub>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	3530      	adds	r5, #48	@ 0x30
 800c360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c364:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c368:	f806 5b01 	strb.w	r5, [r6], #1
 800c36c:	f7f4 fb48 	bl	8000a00 <__aeabi_dcmplt>
 800c370:	2800      	cmp	r0, #0
 800c372:	d172      	bne.n	800c45a <_dtoa_r+0x62a>
 800c374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c378:	2000      	movs	r0, #0
 800c37a:	4911      	ldr	r1, [pc, #68]	@ (800c3c0 <_dtoa_r+0x590>)
 800c37c:	f7f3 ff16 	bl	80001ac <__aeabi_dsub>
 800c380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c384:	f7f4 fb3c 	bl	8000a00 <__aeabi_dcmplt>
 800c388:	2800      	cmp	r0, #0
 800c38a:	f040 80b4 	bne.w	800c4f6 <_dtoa_r+0x6c6>
 800c38e:	42a6      	cmp	r6, r4
 800c390:	f43f af70 	beq.w	800c274 <_dtoa_r+0x444>
 800c394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c398:	2200      	movs	r2, #0
 800c39a:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c4 <_dtoa_r+0x594>)
 800c39c:	f7f4 f8be 	bl	800051c <__aeabi_dmul>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3aa:	4b06      	ldr	r3, [pc, #24]	@ (800c3c4 <_dtoa_r+0x594>)
 800c3ac:	f7f4 f8b6 	bl	800051c <__aeabi_dmul>
 800c3b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3b4:	e7c4      	b.n	800c340 <_dtoa_r+0x510>
 800c3b6:	bf00      	nop
 800c3b8:	0800f1a8 	.word	0x0800f1a8
 800c3bc:	0800f180 	.word	0x0800f180
 800c3c0:	3ff00000 	.word	0x3ff00000
 800c3c4:	40240000 	.word	0x40240000
 800c3c8:	401c0000 	.word	0x401c0000
 800c3cc:	40140000 	.word	0x40140000
 800c3d0:	3fe00000 	.word	0x3fe00000
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7f4 f8a0 	bl	800051c <__aeabi_dmul>
 800c3dc:	4656      	mov	r6, sl
 800c3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c3e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3e8:	f7f4 fb48 	bl	8000a7c <__aeabi_d2iz>
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	f7f4 f82b 	bl	8000448 <__aeabi_i2d>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3fa:	f7f3 fed7 	bl	80001ac <__aeabi_dsub>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	3530      	adds	r5, #48	@ 0x30
 800c404:	f806 5b01 	strb.w	r5, [r6], #1
 800c408:	42a6      	cmp	r6, r4
 800c40a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c40e:	f04f 0200 	mov.w	r2, #0
 800c412:	d124      	bne.n	800c45e <_dtoa_r+0x62e>
 800c414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c418:	4bae      	ldr	r3, [pc, #696]	@ (800c6d4 <_dtoa_r+0x8a4>)
 800c41a:	f7f3 fec9 	bl	80001b0 <__adddf3>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c426:	f7f4 fb09 	bl	8000a3c <__aeabi_dcmpgt>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d163      	bne.n	800c4f6 <_dtoa_r+0x6c6>
 800c42e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c432:	2000      	movs	r0, #0
 800c434:	49a7      	ldr	r1, [pc, #668]	@ (800c6d4 <_dtoa_r+0x8a4>)
 800c436:	f7f3 feb9 	bl	80001ac <__aeabi_dsub>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c442:	f7f4 fadd 	bl	8000a00 <__aeabi_dcmplt>
 800c446:	2800      	cmp	r0, #0
 800c448:	f43f af14 	beq.w	800c274 <_dtoa_r+0x444>
 800c44c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c44e:	1e73      	subs	r3, r6, #1
 800c450:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c456:	2b30      	cmp	r3, #48	@ 0x30
 800c458:	d0f8      	beq.n	800c44c <_dtoa_r+0x61c>
 800c45a:	4647      	mov	r7, r8
 800c45c:	e03b      	b.n	800c4d6 <_dtoa_r+0x6a6>
 800c45e:	4b9e      	ldr	r3, [pc, #632]	@ (800c6d8 <_dtoa_r+0x8a8>)
 800c460:	f7f4 f85c 	bl	800051c <__aeabi_dmul>
 800c464:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c468:	e7bc      	b.n	800c3e4 <_dtoa_r+0x5b4>
 800c46a:	4656      	mov	r6, sl
 800c46c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f4 f97a 	bl	8000770 <__aeabi_ddiv>
 800c47c:	f7f4 fafe 	bl	8000a7c <__aeabi_d2iz>
 800c480:	4680      	mov	r8, r0
 800c482:	f7f3 ffe1 	bl	8000448 <__aeabi_i2d>
 800c486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c48a:	f7f4 f847 	bl	800051c <__aeabi_dmul>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	4620      	mov	r0, r4
 800c494:	4629      	mov	r1, r5
 800c496:	f7f3 fe89 	bl	80001ac <__aeabi_dsub>
 800c49a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c49e:	9d08      	ldr	r5, [sp, #32]
 800c4a0:	f806 4b01 	strb.w	r4, [r6], #1
 800c4a4:	eba6 040a 	sub.w	r4, r6, sl
 800c4a8:	42a5      	cmp	r5, r4
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	d133      	bne.n	800c518 <_dtoa_r+0x6e8>
 800c4b0:	f7f3 fe7e 	bl	80001b0 <__adddf3>
 800c4b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	f7f4 fabe 	bl	8000a3c <__aeabi_dcmpgt>
 800c4c0:	b9c0      	cbnz	r0, 800c4f4 <_dtoa_r+0x6c4>
 800c4c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f4 fa8f 	bl	80009ec <__aeabi_dcmpeq>
 800c4ce:	b110      	cbz	r0, 800c4d6 <_dtoa_r+0x6a6>
 800c4d0:	f018 0f01 	tst.w	r8, #1
 800c4d4:	d10e      	bne.n	800c4f4 <_dtoa_r+0x6c4>
 800c4d6:	4648      	mov	r0, r9
 800c4d8:	9903      	ldr	r1, [sp, #12]
 800c4da:	f000 fbbb 	bl	800cc54 <_Bfree>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	7033      	strb	r3, [r6, #0]
 800c4e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c4e4:	3701      	adds	r7, #1
 800c4e6:	601f      	str	r7, [r3, #0]
 800c4e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 824b 	beq.w	800c986 <_dtoa_r+0xb56>
 800c4f0:	601e      	str	r6, [r3, #0]
 800c4f2:	e248      	b.n	800c986 <_dtoa_r+0xb56>
 800c4f4:	46b8      	mov	r8, r7
 800c4f6:	4633      	mov	r3, r6
 800c4f8:	461e      	mov	r6, r3
 800c4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4fe:	2a39      	cmp	r2, #57	@ 0x39
 800c500:	d106      	bne.n	800c510 <_dtoa_r+0x6e0>
 800c502:	459a      	cmp	sl, r3
 800c504:	d1f8      	bne.n	800c4f8 <_dtoa_r+0x6c8>
 800c506:	2230      	movs	r2, #48	@ 0x30
 800c508:	f108 0801 	add.w	r8, r8, #1
 800c50c:	f88a 2000 	strb.w	r2, [sl]
 800c510:	781a      	ldrb	r2, [r3, #0]
 800c512:	3201      	adds	r2, #1
 800c514:	701a      	strb	r2, [r3, #0]
 800c516:	e7a0      	b.n	800c45a <_dtoa_r+0x62a>
 800c518:	2200      	movs	r2, #0
 800c51a:	4b6f      	ldr	r3, [pc, #444]	@ (800c6d8 <_dtoa_r+0x8a8>)
 800c51c:	f7f3 fffe 	bl	800051c <__aeabi_dmul>
 800c520:	2200      	movs	r2, #0
 800c522:	2300      	movs	r3, #0
 800c524:	4604      	mov	r4, r0
 800c526:	460d      	mov	r5, r1
 800c528:	f7f4 fa60 	bl	80009ec <__aeabi_dcmpeq>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d09f      	beq.n	800c470 <_dtoa_r+0x640>
 800c530:	e7d1      	b.n	800c4d6 <_dtoa_r+0x6a6>
 800c532:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c534:	2a00      	cmp	r2, #0
 800c536:	f000 80ea 	beq.w	800c70e <_dtoa_r+0x8de>
 800c53a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c53c:	2a01      	cmp	r2, #1
 800c53e:	f300 80cd 	bgt.w	800c6dc <_dtoa_r+0x8ac>
 800c542:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c544:	2a00      	cmp	r2, #0
 800c546:	f000 80c1 	beq.w	800c6cc <_dtoa_r+0x89c>
 800c54a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c54e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c550:	9e04      	ldr	r6, [sp, #16]
 800c552:	9a04      	ldr	r2, [sp, #16]
 800c554:	2101      	movs	r1, #1
 800c556:	441a      	add	r2, r3
 800c558:	9204      	str	r2, [sp, #16]
 800c55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c55c:	4648      	mov	r0, r9
 800c55e:	441a      	add	r2, r3
 800c560:	9209      	str	r2, [sp, #36]	@ 0x24
 800c562:	f000 fc2b 	bl	800cdbc <__i2b>
 800c566:	4605      	mov	r5, r0
 800c568:	b166      	cbz	r6, 800c584 <_dtoa_r+0x754>
 800c56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd09      	ble.n	800c584 <_dtoa_r+0x754>
 800c570:	42b3      	cmp	r3, r6
 800c572:	bfa8      	it	ge
 800c574:	4633      	movge	r3, r6
 800c576:	9a04      	ldr	r2, [sp, #16]
 800c578:	1af6      	subs	r6, r6, r3
 800c57a:	1ad2      	subs	r2, r2, r3
 800c57c:	9204      	str	r2, [sp, #16]
 800c57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	9309      	str	r3, [sp, #36]	@ 0x24
 800c584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c586:	b30b      	cbz	r3, 800c5cc <_dtoa_r+0x79c>
 800c588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 80c6 	beq.w	800c71c <_dtoa_r+0x8ec>
 800c590:	2c00      	cmp	r4, #0
 800c592:	f000 80c0 	beq.w	800c716 <_dtoa_r+0x8e6>
 800c596:	4629      	mov	r1, r5
 800c598:	4622      	mov	r2, r4
 800c59a:	4648      	mov	r0, r9
 800c59c:	f000 fcc6 	bl	800cf2c <__pow5mult>
 800c5a0:	9a03      	ldr	r2, [sp, #12]
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	f000 fc1e 	bl	800cde8 <__multiply>
 800c5ac:	9903      	ldr	r1, [sp, #12]
 800c5ae:	4680      	mov	r8, r0
 800c5b0:	4648      	mov	r0, r9
 800c5b2:	f000 fb4f 	bl	800cc54 <_Bfree>
 800c5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5b8:	1b1b      	subs	r3, r3, r4
 800c5ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5bc:	f000 80b1 	beq.w	800c722 <_dtoa_r+0x8f2>
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f000 fcb1 	bl	800cf2c <__pow5mult>
 800c5ca:	9003      	str	r0, [sp, #12]
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	4648      	mov	r0, r9
 800c5d0:	f000 fbf4 	bl	800cdbc <__i2b>
 800c5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 81d8 	beq.w	800c98e <_dtoa_r+0xb5e>
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4648      	mov	r0, r9
 800c5e4:	f000 fca2 	bl	800cf2c <__pow5mult>
 800c5e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	f300 809f 	bgt.w	800c730 <_dtoa_r+0x900>
 800c5f2:	9b06      	ldr	r3, [sp, #24]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f040 8097 	bne.w	800c728 <_dtoa_r+0x8f8>
 800c5fa:	9b07      	ldr	r3, [sp, #28]
 800c5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c600:	2b00      	cmp	r3, #0
 800c602:	f040 8093 	bne.w	800c72c <_dtoa_r+0x8fc>
 800c606:	9b07      	ldr	r3, [sp, #28]
 800c608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c60c:	0d1b      	lsrs	r3, r3, #20
 800c60e:	051b      	lsls	r3, r3, #20
 800c610:	b133      	cbz	r3, 800c620 <_dtoa_r+0x7f0>
 800c612:	9b04      	ldr	r3, [sp, #16]
 800c614:	3301      	adds	r3, #1
 800c616:	9304      	str	r3, [sp, #16]
 800c618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61a:	3301      	adds	r3, #1
 800c61c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c61e:	2301      	movs	r3, #1
 800c620:	930a      	str	r3, [sp, #40]	@ 0x28
 800c622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c624:	2b00      	cmp	r3, #0
 800c626:	f000 81b8 	beq.w	800c99a <_dtoa_r+0xb6a>
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c630:	6918      	ldr	r0, [r3, #16]
 800c632:	f000 fb77 	bl	800cd24 <__hi0bits>
 800c636:	f1c0 0020 	rsb	r0, r0, #32
 800c63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63c:	4418      	add	r0, r3
 800c63e:	f010 001f 	ands.w	r0, r0, #31
 800c642:	f000 8082 	beq.w	800c74a <_dtoa_r+0x91a>
 800c646:	f1c0 0320 	rsb	r3, r0, #32
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	dd73      	ble.n	800c736 <_dtoa_r+0x906>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	f1c0 001c 	rsb	r0, r0, #28
 800c654:	4403      	add	r3, r0
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65a:	4406      	add	r6, r0
 800c65c:	4403      	add	r3, r0
 800c65e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dd05      	ble.n	800c672 <_dtoa_r+0x842>
 800c666:	461a      	mov	r2, r3
 800c668:	4648      	mov	r0, r9
 800c66a:	9903      	ldr	r1, [sp, #12]
 800c66c:	f000 fcb8 	bl	800cfe0 <__lshift>
 800c670:	9003      	str	r0, [sp, #12]
 800c672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c674:	2b00      	cmp	r3, #0
 800c676:	dd05      	ble.n	800c684 <_dtoa_r+0x854>
 800c678:	4621      	mov	r1, r4
 800c67a:	461a      	mov	r2, r3
 800c67c:	4648      	mov	r0, r9
 800c67e:	f000 fcaf 	bl	800cfe0 <__lshift>
 800c682:	4604      	mov	r4, r0
 800c684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c686:	2b00      	cmp	r3, #0
 800c688:	d061      	beq.n	800c74e <_dtoa_r+0x91e>
 800c68a:	4621      	mov	r1, r4
 800c68c:	9803      	ldr	r0, [sp, #12]
 800c68e:	f000 fd13 	bl	800d0b8 <__mcmp>
 800c692:	2800      	cmp	r0, #0
 800c694:	da5b      	bge.n	800c74e <_dtoa_r+0x91e>
 800c696:	2300      	movs	r3, #0
 800c698:	220a      	movs	r2, #10
 800c69a:	4648      	mov	r0, r9
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	f000 fafb 	bl	800cc98 <__multadd>
 800c6a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6a4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6a8:	9003      	str	r0, [sp, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 8177 	beq.w	800c99e <_dtoa_r+0xb6e>
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	220a      	movs	r2, #10
 800c6b6:	4648      	mov	r0, r9
 800c6b8:	f000 faee 	bl	800cc98 <__multadd>
 800c6bc:	f1bb 0f00 	cmp.w	fp, #0
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	dc6f      	bgt.n	800c7a4 <_dtoa_r+0x974>
 800c6c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	dc49      	bgt.n	800c75e <_dtoa_r+0x92e>
 800c6ca:	e06b      	b.n	800c7a4 <_dtoa_r+0x974>
 800c6cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c6ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6d2:	e73c      	b.n	800c54e <_dtoa_r+0x71e>
 800c6d4:	3fe00000 	.word	0x3fe00000
 800c6d8:	40240000 	.word	0x40240000
 800c6dc:	9b08      	ldr	r3, [sp, #32]
 800c6de:	1e5c      	subs	r4, r3, #1
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6e2:	42a3      	cmp	r3, r4
 800c6e4:	db09      	blt.n	800c6fa <_dtoa_r+0x8ca>
 800c6e6:	1b1c      	subs	r4, r3, r4
 800c6e8:	9b08      	ldr	r3, [sp, #32]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f6bf af30 	bge.w	800c550 <_dtoa_r+0x720>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	9a08      	ldr	r2, [sp, #32]
 800c6f4:	1a9e      	subs	r6, r3, r2
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e72b      	b.n	800c552 <_dtoa_r+0x722>
 800c6fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6fe:	1ae3      	subs	r3, r4, r3
 800c700:	441a      	add	r2, r3
 800c702:	940a      	str	r4, [sp, #40]	@ 0x28
 800c704:	9e04      	ldr	r6, [sp, #16]
 800c706:	2400      	movs	r4, #0
 800c708:	9b08      	ldr	r3, [sp, #32]
 800c70a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c70c:	e721      	b.n	800c552 <_dtoa_r+0x722>
 800c70e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c710:	9e04      	ldr	r6, [sp, #16]
 800c712:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c714:	e728      	b.n	800c568 <_dtoa_r+0x738>
 800c716:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c71a:	e751      	b.n	800c5c0 <_dtoa_r+0x790>
 800c71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c71e:	9903      	ldr	r1, [sp, #12]
 800c720:	e750      	b.n	800c5c4 <_dtoa_r+0x794>
 800c722:	f8cd 800c 	str.w	r8, [sp, #12]
 800c726:	e751      	b.n	800c5cc <_dtoa_r+0x79c>
 800c728:	2300      	movs	r3, #0
 800c72a:	e779      	b.n	800c620 <_dtoa_r+0x7f0>
 800c72c:	9b06      	ldr	r3, [sp, #24]
 800c72e:	e777      	b.n	800c620 <_dtoa_r+0x7f0>
 800c730:	2300      	movs	r3, #0
 800c732:	930a      	str	r3, [sp, #40]	@ 0x28
 800c734:	e779      	b.n	800c62a <_dtoa_r+0x7fa>
 800c736:	d093      	beq.n	800c660 <_dtoa_r+0x830>
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	331c      	adds	r3, #28
 800c73c:	441a      	add	r2, r3
 800c73e:	9204      	str	r2, [sp, #16]
 800c740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c742:	441e      	add	r6, r3
 800c744:	441a      	add	r2, r3
 800c746:	9209      	str	r2, [sp, #36]	@ 0x24
 800c748:	e78a      	b.n	800c660 <_dtoa_r+0x830>
 800c74a:	4603      	mov	r3, r0
 800c74c:	e7f4      	b.n	800c738 <_dtoa_r+0x908>
 800c74e:	9b08      	ldr	r3, [sp, #32]
 800c750:	46b8      	mov	r8, r7
 800c752:	2b00      	cmp	r3, #0
 800c754:	dc20      	bgt.n	800c798 <_dtoa_r+0x968>
 800c756:	469b      	mov	fp, r3
 800c758:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	dd1e      	ble.n	800c79c <_dtoa_r+0x96c>
 800c75e:	f1bb 0f00 	cmp.w	fp, #0
 800c762:	f47f adb1 	bne.w	800c2c8 <_dtoa_r+0x498>
 800c766:	4621      	mov	r1, r4
 800c768:	465b      	mov	r3, fp
 800c76a:	2205      	movs	r2, #5
 800c76c:	4648      	mov	r0, r9
 800c76e:	f000 fa93 	bl	800cc98 <__multadd>
 800c772:	4601      	mov	r1, r0
 800c774:	4604      	mov	r4, r0
 800c776:	9803      	ldr	r0, [sp, #12]
 800c778:	f000 fc9e 	bl	800d0b8 <__mcmp>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f77f ada3 	ble.w	800c2c8 <_dtoa_r+0x498>
 800c782:	4656      	mov	r6, sl
 800c784:	2331      	movs	r3, #49	@ 0x31
 800c786:	f108 0801 	add.w	r8, r8, #1
 800c78a:	f806 3b01 	strb.w	r3, [r6], #1
 800c78e:	e59f      	b.n	800c2d0 <_dtoa_r+0x4a0>
 800c790:	46b8      	mov	r8, r7
 800c792:	9c08      	ldr	r4, [sp, #32]
 800c794:	4625      	mov	r5, r4
 800c796:	e7f4      	b.n	800c782 <_dtoa_r+0x952>
 800c798:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c79c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f000 8101 	beq.w	800c9a6 <_dtoa_r+0xb76>
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	dd05      	ble.n	800c7b4 <_dtoa_r+0x984>
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f000 fc17 	bl	800cfe0 <__lshift>
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d05c      	beq.n	800c874 <_dtoa_r+0xa44>
 800c7ba:	4648      	mov	r0, r9
 800c7bc:	6869      	ldr	r1, [r5, #4]
 800c7be:	f000 fa09 	bl	800cbd4 <_Balloc>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	b928      	cbnz	r0, 800c7d2 <_dtoa_r+0x9a2>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c7cc:	4b80      	ldr	r3, [pc, #512]	@ (800c9d0 <_dtoa_r+0xba0>)
 800c7ce:	f7ff bb43 	b.w	800be58 <_dtoa_r+0x28>
 800c7d2:	692a      	ldr	r2, [r5, #16]
 800c7d4:	f105 010c 	add.w	r1, r5, #12
 800c7d8:	3202      	adds	r2, #2
 800c7da:	0092      	lsls	r2, r2, #2
 800c7dc:	300c      	adds	r0, #12
 800c7de:	f7ff fa8e 	bl	800bcfe <memcpy>
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	4648      	mov	r0, r9
 800c7e8:	f000 fbfa 	bl	800cfe0 <__lshift>
 800c7ec:	462f      	mov	r7, r5
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	f10a 0301 	add.w	r3, sl, #1
 800c7f4:	9304      	str	r3, [sp, #16]
 800c7f6:	eb0a 030b 	add.w	r3, sl, fp
 800c7fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	9309      	str	r3, [sp, #36]	@ 0x24
 800c804:	9b04      	ldr	r3, [sp, #16]
 800c806:	4621      	mov	r1, r4
 800c808:	9803      	ldr	r0, [sp, #12]
 800c80a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c80e:	f7ff fa84 	bl	800bd1a <quorem>
 800c812:	4603      	mov	r3, r0
 800c814:	4639      	mov	r1, r7
 800c816:	3330      	adds	r3, #48	@ 0x30
 800c818:	9006      	str	r0, [sp, #24]
 800c81a:	9803      	ldr	r0, [sp, #12]
 800c81c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c81e:	f000 fc4b 	bl	800d0b8 <__mcmp>
 800c822:	462a      	mov	r2, r5
 800c824:	9008      	str	r0, [sp, #32]
 800c826:	4621      	mov	r1, r4
 800c828:	4648      	mov	r0, r9
 800c82a:	f000 fc61 	bl	800d0f0 <__mdiff>
 800c82e:	68c2      	ldr	r2, [r0, #12]
 800c830:	4606      	mov	r6, r0
 800c832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c834:	bb02      	cbnz	r2, 800c878 <_dtoa_r+0xa48>
 800c836:	4601      	mov	r1, r0
 800c838:	9803      	ldr	r0, [sp, #12]
 800c83a:	f000 fc3d 	bl	800d0b8 <__mcmp>
 800c83e:	4602      	mov	r2, r0
 800c840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c842:	4631      	mov	r1, r6
 800c844:	4648      	mov	r0, r9
 800c846:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c84a:	f000 fa03 	bl	800cc54 <_Bfree>
 800c84e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c852:	9e04      	ldr	r6, [sp, #16]
 800c854:	ea42 0103 	orr.w	r1, r2, r3
 800c858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c85a:	4319      	orrs	r1, r3
 800c85c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c85e:	d10d      	bne.n	800c87c <_dtoa_r+0xa4c>
 800c860:	2b39      	cmp	r3, #57	@ 0x39
 800c862:	d027      	beq.n	800c8b4 <_dtoa_r+0xa84>
 800c864:	9a08      	ldr	r2, [sp, #32]
 800c866:	2a00      	cmp	r2, #0
 800c868:	dd01      	ble.n	800c86e <_dtoa_r+0xa3e>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	3331      	adds	r3, #49	@ 0x31
 800c86e:	f88b 3000 	strb.w	r3, [fp]
 800c872:	e52e      	b.n	800c2d2 <_dtoa_r+0x4a2>
 800c874:	4628      	mov	r0, r5
 800c876:	e7b9      	b.n	800c7ec <_dtoa_r+0x9bc>
 800c878:	2201      	movs	r2, #1
 800c87a:	e7e2      	b.n	800c842 <_dtoa_r+0xa12>
 800c87c:	9908      	ldr	r1, [sp, #32]
 800c87e:	2900      	cmp	r1, #0
 800c880:	db04      	blt.n	800c88c <_dtoa_r+0xa5c>
 800c882:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c884:	4301      	orrs	r1, r0
 800c886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c888:	4301      	orrs	r1, r0
 800c88a:	d120      	bne.n	800c8ce <_dtoa_r+0xa9e>
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	ddee      	ble.n	800c86e <_dtoa_r+0xa3e>
 800c890:	2201      	movs	r2, #1
 800c892:	9903      	ldr	r1, [sp, #12]
 800c894:	4648      	mov	r0, r9
 800c896:	9304      	str	r3, [sp, #16]
 800c898:	f000 fba2 	bl	800cfe0 <__lshift>
 800c89c:	4621      	mov	r1, r4
 800c89e:	9003      	str	r0, [sp, #12]
 800c8a0:	f000 fc0a 	bl	800d0b8 <__mcmp>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	dc02      	bgt.n	800c8b0 <_dtoa_r+0xa80>
 800c8aa:	d1e0      	bne.n	800c86e <_dtoa_r+0xa3e>
 800c8ac:	07da      	lsls	r2, r3, #31
 800c8ae:	d5de      	bpl.n	800c86e <_dtoa_r+0xa3e>
 800c8b0:	2b39      	cmp	r3, #57	@ 0x39
 800c8b2:	d1da      	bne.n	800c86a <_dtoa_r+0xa3a>
 800c8b4:	2339      	movs	r3, #57	@ 0x39
 800c8b6:	f88b 3000 	strb.w	r3, [fp]
 800c8ba:	4633      	mov	r3, r6
 800c8bc:	461e      	mov	r6, r3
 800c8be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	2a39      	cmp	r2, #57	@ 0x39
 800c8c6:	d04e      	beq.n	800c966 <_dtoa_r+0xb36>
 800c8c8:	3201      	adds	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	e501      	b.n	800c2d2 <_dtoa_r+0x4a2>
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	dd03      	ble.n	800c8da <_dtoa_r+0xaaa>
 800c8d2:	2b39      	cmp	r3, #57	@ 0x39
 800c8d4:	d0ee      	beq.n	800c8b4 <_dtoa_r+0xa84>
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	e7c9      	b.n	800c86e <_dtoa_r+0xa3e>
 800c8da:	9a04      	ldr	r2, [sp, #16]
 800c8dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c8e2:	428a      	cmp	r2, r1
 800c8e4:	d028      	beq.n	800c938 <_dtoa_r+0xb08>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	220a      	movs	r2, #10
 800c8ea:	9903      	ldr	r1, [sp, #12]
 800c8ec:	4648      	mov	r0, r9
 800c8ee:	f000 f9d3 	bl	800cc98 <__multadd>
 800c8f2:	42af      	cmp	r7, r5
 800c8f4:	9003      	str	r0, [sp, #12]
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	f04f 020a 	mov.w	r2, #10
 800c8fe:	4639      	mov	r1, r7
 800c900:	4648      	mov	r0, r9
 800c902:	d107      	bne.n	800c914 <_dtoa_r+0xae4>
 800c904:	f000 f9c8 	bl	800cc98 <__multadd>
 800c908:	4607      	mov	r7, r0
 800c90a:	4605      	mov	r5, r0
 800c90c:	9b04      	ldr	r3, [sp, #16]
 800c90e:	3301      	adds	r3, #1
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	e777      	b.n	800c804 <_dtoa_r+0x9d4>
 800c914:	f000 f9c0 	bl	800cc98 <__multadd>
 800c918:	4629      	mov	r1, r5
 800c91a:	4607      	mov	r7, r0
 800c91c:	2300      	movs	r3, #0
 800c91e:	220a      	movs	r2, #10
 800c920:	4648      	mov	r0, r9
 800c922:	f000 f9b9 	bl	800cc98 <__multadd>
 800c926:	4605      	mov	r5, r0
 800c928:	e7f0      	b.n	800c90c <_dtoa_r+0xadc>
 800c92a:	f1bb 0f00 	cmp.w	fp, #0
 800c92e:	bfcc      	ite	gt
 800c930:	465e      	movgt	r6, fp
 800c932:	2601      	movle	r6, #1
 800c934:	2700      	movs	r7, #0
 800c936:	4456      	add	r6, sl
 800c938:	2201      	movs	r2, #1
 800c93a:	9903      	ldr	r1, [sp, #12]
 800c93c:	4648      	mov	r0, r9
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	f000 fb4e 	bl	800cfe0 <__lshift>
 800c944:	4621      	mov	r1, r4
 800c946:	9003      	str	r0, [sp, #12]
 800c948:	f000 fbb6 	bl	800d0b8 <__mcmp>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	dcb4      	bgt.n	800c8ba <_dtoa_r+0xa8a>
 800c950:	d102      	bne.n	800c958 <_dtoa_r+0xb28>
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	07db      	lsls	r3, r3, #31
 800c956:	d4b0      	bmi.n	800c8ba <_dtoa_r+0xa8a>
 800c958:	4633      	mov	r3, r6
 800c95a:	461e      	mov	r6, r3
 800c95c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c960:	2a30      	cmp	r2, #48	@ 0x30
 800c962:	d0fa      	beq.n	800c95a <_dtoa_r+0xb2a>
 800c964:	e4b5      	b.n	800c2d2 <_dtoa_r+0x4a2>
 800c966:	459a      	cmp	sl, r3
 800c968:	d1a8      	bne.n	800c8bc <_dtoa_r+0xa8c>
 800c96a:	2331      	movs	r3, #49	@ 0x31
 800c96c:	f108 0801 	add.w	r8, r8, #1
 800c970:	f88a 3000 	strb.w	r3, [sl]
 800c974:	e4ad      	b.n	800c2d2 <_dtoa_r+0x4a2>
 800c976:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c978:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c9d4 <_dtoa_r+0xba4>
 800c97c:	b11b      	cbz	r3, 800c986 <_dtoa_r+0xb56>
 800c97e:	f10a 0308 	add.w	r3, sl, #8
 800c982:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	4650      	mov	r0, sl
 800c988:	b017      	add	sp, #92	@ 0x5c
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c990:	2b01      	cmp	r3, #1
 800c992:	f77f ae2e 	ble.w	800c5f2 <_dtoa_r+0x7c2>
 800c996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c998:	930a      	str	r3, [sp, #40]	@ 0x28
 800c99a:	2001      	movs	r0, #1
 800c99c:	e64d      	b.n	800c63a <_dtoa_r+0x80a>
 800c99e:	f1bb 0f00 	cmp.w	fp, #0
 800c9a2:	f77f aed9 	ble.w	800c758 <_dtoa_r+0x928>
 800c9a6:	4656      	mov	r6, sl
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	9803      	ldr	r0, [sp, #12]
 800c9ac:	f7ff f9b5 	bl	800bd1a <quorem>
 800c9b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c9b4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9b8:	eba6 020a 	sub.w	r2, r6, sl
 800c9bc:	4593      	cmp	fp, r2
 800c9be:	ddb4      	ble.n	800c92a <_dtoa_r+0xafa>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	220a      	movs	r2, #10
 800c9c4:	4648      	mov	r0, r9
 800c9c6:	9903      	ldr	r1, [sp, #12]
 800c9c8:	f000 f966 	bl	800cc98 <__multadd>
 800c9cc:	9003      	str	r0, [sp, #12]
 800c9ce:	e7eb      	b.n	800c9a8 <_dtoa_r+0xb78>
 800c9d0:	0800f0ae 	.word	0x0800f0ae
 800c9d4:	0800f032 	.word	0x0800f032

0800c9d8 <_free_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4605      	mov	r5, r0
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d040      	beq.n	800ca62 <_free_r+0x8a>
 800c9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9e4:	1f0c      	subs	r4, r1, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	bfb8      	it	lt
 800c9ea:	18e4      	addlt	r4, r4, r3
 800c9ec:	f000 f8e6 	bl	800cbbc <__malloc_lock>
 800c9f0:	4a1c      	ldr	r2, [pc, #112]	@ (800ca64 <_free_r+0x8c>)
 800c9f2:	6813      	ldr	r3, [r2, #0]
 800c9f4:	b933      	cbnz	r3, 800ca04 <_free_r+0x2c>
 800c9f6:	6063      	str	r3, [r4, #4]
 800c9f8:	6014      	str	r4, [r2, #0]
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca00:	f000 b8e2 	b.w	800cbc8 <__malloc_unlock>
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d908      	bls.n	800ca1a <_free_r+0x42>
 800ca08:	6820      	ldr	r0, [r4, #0]
 800ca0a:	1821      	adds	r1, r4, r0
 800ca0c:	428b      	cmp	r3, r1
 800ca0e:	bf01      	itttt	eq
 800ca10:	6819      	ldreq	r1, [r3, #0]
 800ca12:	685b      	ldreq	r3, [r3, #4]
 800ca14:	1809      	addeq	r1, r1, r0
 800ca16:	6021      	streq	r1, [r4, #0]
 800ca18:	e7ed      	b.n	800c9f6 <_free_r+0x1e>
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	b10b      	cbz	r3, 800ca24 <_free_r+0x4c>
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	d9fa      	bls.n	800ca1a <_free_r+0x42>
 800ca24:	6811      	ldr	r1, [r2, #0]
 800ca26:	1850      	adds	r0, r2, r1
 800ca28:	42a0      	cmp	r0, r4
 800ca2a:	d10b      	bne.n	800ca44 <_free_r+0x6c>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	4401      	add	r1, r0
 800ca30:	1850      	adds	r0, r2, r1
 800ca32:	4283      	cmp	r3, r0
 800ca34:	6011      	str	r1, [r2, #0]
 800ca36:	d1e0      	bne.n	800c9fa <_free_r+0x22>
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	4408      	add	r0, r1
 800ca3e:	6010      	str	r0, [r2, #0]
 800ca40:	6053      	str	r3, [r2, #4]
 800ca42:	e7da      	b.n	800c9fa <_free_r+0x22>
 800ca44:	d902      	bls.n	800ca4c <_free_r+0x74>
 800ca46:	230c      	movs	r3, #12
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	e7d6      	b.n	800c9fa <_free_r+0x22>
 800ca4c:	6820      	ldr	r0, [r4, #0]
 800ca4e:	1821      	adds	r1, r4, r0
 800ca50:	428b      	cmp	r3, r1
 800ca52:	bf01      	itttt	eq
 800ca54:	6819      	ldreq	r1, [r3, #0]
 800ca56:	685b      	ldreq	r3, [r3, #4]
 800ca58:	1809      	addeq	r1, r1, r0
 800ca5a:	6021      	streq	r1, [r4, #0]
 800ca5c:	6063      	str	r3, [r4, #4]
 800ca5e:	6054      	str	r4, [r2, #4]
 800ca60:	e7cb      	b.n	800c9fa <_free_r+0x22>
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20000790 	.word	0x20000790

0800ca68 <malloc>:
 800ca68:	4b02      	ldr	r3, [pc, #8]	@ (800ca74 <malloc+0xc>)
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	f000 b825 	b.w	800cabc <_malloc_r>
 800ca72:	bf00      	nop
 800ca74:	2000002c 	.word	0x2000002c

0800ca78 <sbrk_aligned>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	4e0f      	ldr	r6, [pc, #60]	@ (800cab8 <sbrk_aligned+0x40>)
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	6831      	ldr	r1, [r6, #0]
 800ca80:	4605      	mov	r5, r0
 800ca82:	b911      	cbnz	r1, 800ca8a <sbrk_aligned+0x12>
 800ca84:	f000 fe8c 	bl	800d7a0 <_sbrk_r>
 800ca88:	6030      	str	r0, [r6, #0]
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f000 fe87 	bl	800d7a0 <_sbrk_r>
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	d103      	bne.n	800ca9e <sbrk_aligned+0x26>
 800ca96:	f04f 34ff 	mov.w	r4, #4294967295
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	bd70      	pop	{r4, r5, r6, pc}
 800ca9e:	1cc4      	adds	r4, r0, #3
 800caa0:	f024 0403 	bic.w	r4, r4, #3
 800caa4:	42a0      	cmp	r0, r4
 800caa6:	d0f8      	beq.n	800ca9a <sbrk_aligned+0x22>
 800caa8:	1a21      	subs	r1, r4, r0
 800caaa:	4628      	mov	r0, r5
 800caac:	f000 fe78 	bl	800d7a0 <_sbrk_r>
 800cab0:	3001      	adds	r0, #1
 800cab2:	d1f2      	bne.n	800ca9a <sbrk_aligned+0x22>
 800cab4:	e7ef      	b.n	800ca96 <sbrk_aligned+0x1e>
 800cab6:	bf00      	nop
 800cab8:	2000078c 	.word	0x2000078c

0800cabc <_malloc_r>:
 800cabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac0:	1ccd      	adds	r5, r1, #3
 800cac2:	f025 0503 	bic.w	r5, r5, #3
 800cac6:	3508      	adds	r5, #8
 800cac8:	2d0c      	cmp	r5, #12
 800caca:	bf38      	it	cc
 800cacc:	250c      	movcc	r5, #12
 800cace:	2d00      	cmp	r5, #0
 800cad0:	4606      	mov	r6, r0
 800cad2:	db01      	blt.n	800cad8 <_malloc_r+0x1c>
 800cad4:	42a9      	cmp	r1, r5
 800cad6:	d904      	bls.n	800cae2 <_malloc_r+0x26>
 800cad8:	230c      	movs	r3, #12
 800cada:	6033      	str	r3, [r6, #0]
 800cadc:	2000      	movs	r0, #0
 800cade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbb8 <_malloc_r+0xfc>
 800cae6:	f000 f869 	bl	800cbbc <__malloc_lock>
 800caea:	f8d8 3000 	ldr.w	r3, [r8]
 800caee:	461c      	mov	r4, r3
 800caf0:	bb44      	cbnz	r4, 800cb44 <_malloc_r+0x88>
 800caf2:	4629      	mov	r1, r5
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7ff ffbf 	bl	800ca78 <sbrk_aligned>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	4604      	mov	r4, r0
 800cafe:	d158      	bne.n	800cbb2 <_malloc_r+0xf6>
 800cb00:	f8d8 4000 	ldr.w	r4, [r8]
 800cb04:	4627      	mov	r7, r4
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	d143      	bne.n	800cb92 <_malloc_r+0xd6>
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	d04b      	beq.n	800cba6 <_malloc_r+0xea>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	4639      	mov	r1, r7
 800cb12:	4630      	mov	r0, r6
 800cb14:	eb04 0903 	add.w	r9, r4, r3
 800cb18:	f000 fe42 	bl	800d7a0 <_sbrk_r>
 800cb1c:	4581      	cmp	r9, r0
 800cb1e:	d142      	bne.n	800cba6 <_malloc_r+0xea>
 800cb20:	6821      	ldr	r1, [r4, #0]
 800cb22:	4630      	mov	r0, r6
 800cb24:	1a6d      	subs	r5, r5, r1
 800cb26:	4629      	mov	r1, r5
 800cb28:	f7ff ffa6 	bl	800ca78 <sbrk_aligned>
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d03a      	beq.n	800cba6 <_malloc_r+0xea>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	442b      	add	r3, r5
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	f8d8 3000 	ldr.w	r3, [r8]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	bb62      	cbnz	r2, 800cb98 <_malloc_r+0xdc>
 800cb3e:	f8c8 7000 	str.w	r7, [r8]
 800cb42:	e00f      	b.n	800cb64 <_malloc_r+0xa8>
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	1b52      	subs	r2, r2, r5
 800cb48:	d420      	bmi.n	800cb8c <_malloc_r+0xd0>
 800cb4a:	2a0b      	cmp	r2, #11
 800cb4c:	d917      	bls.n	800cb7e <_malloc_r+0xc2>
 800cb4e:	1961      	adds	r1, r4, r5
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	6025      	str	r5, [r4, #0]
 800cb54:	bf18      	it	ne
 800cb56:	6059      	strne	r1, [r3, #4]
 800cb58:	6863      	ldr	r3, [r4, #4]
 800cb5a:	bf08      	it	eq
 800cb5c:	f8c8 1000 	streq.w	r1, [r8]
 800cb60:	5162      	str	r2, [r4, r5]
 800cb62:	604b      	str	r3, [r1, #4]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 f82f 	bl	800cbc8 <__malloc_unlock>
 800cb6a:	f104 000b 	add.w	r0, r4, #11
 800cb6e:	1d23      	adds	r3, r4, #4
 800cb70:	f020 0007 	bic.w	r0, r0, #7
 800cb74:	1ac2      	subs	r2, r0, r3
 800cb76:	bf1c      	itt	ne
 800cb78:	1a1b      	subne	r3, r3, r0
 800cb7a:	50a3      	strne	r3, [r4, r2]
 800cb7c:	e7af      	b.n	800cade <_malloc_r+0x22>
 800cb7e:	6862      	ldr	r2, [r4, #4]
 800cb80:	42a3      	cmp	r3, r4
 800cb82:	bf0c      	ite	eq
 800cb84:	f8c8 2000 	streq.w	r2, [r8]
 800cb88:	605a      	strne	r2, [r3, #4]
 800cb8a:	e7eb      	b.n	800cb64 <_malloc_r+0xa8>
 800cb8c:	4623      	mov	r3, r4
 800cb8e:	6864      	ldr	r4, [r4, #4]
 800cb90:	e7ae      	b.n	800caf0 <_malloc_r+0x34>
 800cb92:	463c      	mov	r4, r7
 800cb94:	687f      	ldr	r7, [r7, #4]
 800cb96:	e7b6      	b.n	800cb06 <_malloc_r+0x4a>
 800cb98:	461a      	mov	r2, r3
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	42a3      	cmp	r3, r4
 800cb9e:	d1fb      	bne.n	800cb98 <_malloc_r+0xdc>
 800cba0:	2300      	movs	r3, #0
 800cba2:	6053      	str	r3, [r2, #4]
 800cba4:	e7de      	b.n	800cb64 <_malloc_r+0xa8>
 800cba6:	230c      	movs	r3, #12
 800cba8:	4630      	mov	r0, r6
 800cbaa:	6033      	str	r3, [r6, #0]
 800cbac:	f000 f80c 	bl	800cbc8 <__malloc_unlock>
 800cbb0:	e794      	b.n	800cadc <_malloc_r+0x20>
 800cbb2:	6005      	str	r5, [r0, #0]
 800cbb4:	e7d6      	b.n	800cb64 <_malloc_r+0xa8>
 800cbb6:	bf00      	nop
 800cbb8:	20000790 	.word	0x20000790

0800cbbc <__malloc_lock>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	@ (800cbc4 <__malloc_lock+0x8>)
 800cbbe:	f7ff b88e 	b.w	800bcde <__retarget_lock_acquire_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	20000788 	.word	0x20000788

0800cbc8 <__malloc_unlock>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	@ (800cbd0 <__malloc_unlock+0x8>)
 800cbca:	f7ff b889 	b.w	800bce0 <__retarget_lock_release_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20000788 	.word	0x20000788

0800cbd4 <_Balloc>:
 800cbd4:	b570      	push	{r4, r5, r6, lr}
 800cbd6:	69c6      	ldr	r6, [r0, #28]
 800cbd8:	4604      	mov	r4, r0
 800cbda:	460d      	mov	r5, r1
 800cbdc:	b976      	cbnz	r6, 800cbfc <_Balloc+0x28>
 800cbde:	2010      	movs	r0, #16
 800cbe0:	f7ff ff42 	bl	800ca68 <malloc>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	61e0      	str	r0, [r4, #28]
 800cbe8:	b920      	cbnz	r0, 800cbf4 <_Balloc+0x20>
 800cbea:	216b      	movs	r1, #107	@ 0x6b
 800cbec:	4b17      	ldr	r3, [pc, #92]	@ (800cc4c <_Balloc+0x78>)
 800cbee:	4818      	ldr	r0, [pc, #96]	@ (800cc50 <_Balloc+0x7c>)
 800cbf0:	f000 fde6 	bl	800d7c0 <__assert_func>
 800cbf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf8:	6006      	str	r6, [r0, #0]
 800cbfa:	60c6      	str	r6, [r0, #12]
 800cbfc:	69e6      	ldr	r6, [r4, #28]
 800cbfe:	68f3      	ldr	r3, [r6, #12]
 800cc00:	b183      	cbz	r3, 800cc24 <_Balloc+0x50>
 800cc02:	69e3      	ldr	r3, [r4, #28]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc0a:	b9b8      	cbnz	r0, 800cc3c <_Balloc+0x68>
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc12:	1d72      	adds	r2, r6, #5
 800cc14:	4620      	mov	r0, r4
 800cc16:	0092      	lsls	r2, r2, #2
 800cc18:	f000 fdf0 	bl	800d7fc <_calloc_r>
 800cc1c:	b160      	cbz	r0, 800cc38 <_Balloc+0x64>
 800cc1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc22:	e00e      	b.n	800cc42 <_Balloc+0x6e>
 800cc24:	2221      	movs	r2, #33	@ 0x21
 800cc26:	2104      	movs	r1, #4
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f000 fde7 	bl	800d7fc <_calloc_r>
 800cc2e:	69e3      	ldr	r3, [r4, #28]
 800cc30:	60f0      	str	r0, [r6, #12]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1e4      	bne.n	800cc02 <_Balloc+0x2e>
 800cc38:	2000      	movs	r0, #0
 800cc3a:	bd70      	pop	{r4, r5, r6, pc}
 800cc3c:	6802      	ldr	r2, [r0, #0]
 800cc3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc42:	2300      	movs	r3, #0
 800cc44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc48:	e7f7      	b.n	800cc3a <_Balloc+0x66>
 800cc4a:	bf00      	nop
 800cc4c:	0800f03f 	.word	0x0800f03f
 800cc50:	0800f0bf 	.word	0x0800f0bf

0800cc54 <_Bfree>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	69c6      	ldr	r6, [r0, #28]
 800cc58:	4605      	mov	r5, r0
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	b976      	cbnz	r6, 800cc7c <_Bfree+0x28>
 800cc5e:	2010      	movs	r0, #16
 800cc60:	f7ff ff02 	bl	800ca68 <malloc>
 800cc64:	4602      	mov	r2, r0
 800cc66:	61e8      	str	r0, [r5, #28]
 800cc68:	b920      	cbnz	r0, 800cc74 <_Bfree+0x20>
 800cc6a:	218f      	movs	r1, #143	@ 0x8f
 800cc6c:	4b08      	ldr	r3, [pc, #32]	@ (800cc90 <_Bfree+0x3c>)
 800cc6e:	4809      	ldr	r0, [pc, #36]	@ (800cc94 <_Bfree+0x40>)
 800cc70:	f000 fda6 	bl	800d7c0 <__assert_func>
 800cc74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc78:	6006      	str	r6, [r0, #0]
 800cc7a:	60c6      	str	r6, [r0, #12]
 800cc7c:	b13c      	cbz	r4, 800cc8e <_Bfree+0x3a>
 800cc7e:	69eb      	ldr	r3, [r5, #28]
 800cc80:	6862      	ldr	r2, [r4, #4]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc88:	6021      	str	r1, [r4, #0]
 800cc8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	0800f03f 	.word	0x0800f03f
 800cc94:	0800f0bf 	.word	0x0800f0bf

0800cc98 <__multadd>:
 800cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9c:	4607      	mov	r7, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	461e      	mov	r6, r3
 800cca2:	2000      	movs	r0, #0
 800cca4:	690d      	ldr	r5, [r1, #16]
 800cca6:	f101 0c14 	add.w	ip, r1, #20
 800ccaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ccae:	3001      	adds	r0, #1
 800ccb0:	b299      	uxth	r1, r3
 800ccb2:	fb02 6101 	mla	r1, r2, r1, r6
 800ccb6:	0c1e      	lsrs	r6, r3, #16
 800ccb8:	0c0b      	lsrs	r3, r1, #16
 800ccba:	fb02 3306 	mla	r3, r2, r6, r3
 800ccbe:	b289      	uxth	r1, r1
 800ccc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccc4:	4285      	cmp	r5, r0
 800ccc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccca:	f84c 1b04 	str.w	r1, [ip], #4
 800ccce:	dcec      	bgt.n	800ccaa <__multadd+0x12>
 800ccd0:	b30e      	cbz	r6, 800cd16 <__multadd+0x7e>
 800ccd2:	68a3      	ldr	r3, [r4, #8]
 800ccd4:	42ab      	cmp	r3, r5
 800ccd6:	dc19      	bgt.n	800cd0c <__multadd+0x74>
 800ccd8:	6861      	ldr	r1, [r4, #4]
 800ccda:	4638      	mov	r0, r7
 800ccdc:	3101      	adds	r1, #1
 800ccde:	f7ff ff79 	bl	800cbd4 <_Balloc>
 800cce2:	4680      	mov	r8, r0
 800cce4:	b928      	cbnz	r0, 800ccf2 <__multadd+0x5a>
 800cce6:	4602      	mov	r2, r0
 800cce8:	21ba      	movs	r1, #186	@ 0xba
 800ccea:	4b0c      	ldr	r3, [pc, #48]	@ (800cd1c <__multadd+0x84>)
 800ccec:	480c      	ldr	r0, [pc, #48]	@ (800cd20 <__multadd+0x88>)
 800ccee:	f000 fd67 	bl	800d7c0 <__assert_func>
 800ccf2:	6922      	ldr	r2, [r4, #16]
 800ccf4:	f104 010c 	add.w	r1, r4, #12
 800ccf8:	3202      	adds	r2, #2
 800ccfa:	0092      	lsls	r2, r2, #2
 800ccfc:	300c      	adds	r0, #12
 800ccfe:	f7fe fffe 	bl	800bcfe <memcpy>
 800cd02:	4621      	mov	r1, r4
 800cd04:	4638      	mov	r0, r7
 800cd06:	f7ff ffa5 	bl	800cc54 <_Bfree>
 800cd0a:	4644      	mov	r4, r8
 800cd0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd10:	3501      	adds	r5, #1
 800cd12:	615e      	str	r6, [r3, #20]
 800cd14:	6125      	str	r5, [r4, #16]
 800cd16:	4620      	mov	r0, r4
 800cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd1c:	0800f0ae 	.word	0x0800f0ae
 800cd20:	0800f0bf 	.word	0x0800f0bf

0800cd24 <__hi0bits>:
 800cd24:	4603      	mov	r3, r0
 800cd26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd2a:	bf3a      	itte	cc
 800cd2c:	0403      	lslcc	r3, r0, #16
 800cd2e:	2010      	movcc	r0, #16
 800cd30:	2000      	movcs	r0, #0
 800cd32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd36:	bf3c      	itt	cc
 800cd38:	021b      	lslcc	r3, r3, #8
 800cd3a:	3008      	addcc	r0, #8
 800cd3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd40:	bf3c      	itt	cc
 800cd42:	011b      	lslcc	r3, r3, #4
 800cd44:	3004      	addcc	r0, #4
 800cd46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd4a:	bf3c      	itt	cc
 800cd4c:	009b      	lslcc	r3, r3, #2
 800cd4e:	3002      	addcc	r0, #2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	db05      	blt.n	800cd60 <__hi0bits+0x3c>
 800cd54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd58:	f100 0001 	add.w	r0, r0, #1
 800cd5c:	bf08      	it	eq
 800cd5e:	2020      	moveq	r0, #32
 800cd60:	4770      	bx	lr

0800cd62 <__lo0bits>:
 800cd62:	6803      	ldr	r3, [r0, #0]
 800cd64:	4602      	mov	r2, r0
 800cd66:	f013 0007 	ands.w	r0, r3, #7
 800cd6a:	d00b      	beq.n	800cd84 <__lo0bits+0x22>
 800cd6c:	07d9      	lsls	r1, r3, #31
 800cd6e:	d421      	bmi.n	800cdb4 <__lo0bits+0x52>
 800cd70:	0798      	lsls	r0, r3, #30
 800cd72:	bf49      	itett	mi
 800cd74:	085b      	lsrmi	r3, r3, #1
 800cd76:	089b      	lsrpl	r3, r3, #2
 800cd78:	2001      	movmi	r0, #1
 800cd7a:	6013      	strmi	r3, [r2, #0]
 800cd7c:	bf5c      	itt	pl
 800cd7e:	2002      	movpl	r0, #2
 800cd80:	6013      	strpl	r3, [r2, #0]
 800cd82:	4770      	bx	lr
 800cd84:	b299      	uxth	r1, r3
 800cd86:	b909      	cbnz	r1, 800cd8c <__lo0bits+0x2a>
 800cd88:	2010      	movs	r0, #16
 800cd8a:	0c1b      	lsrs	r3, r3, #16
 800cd8c:	b2d9      	uxtb	r1, r3
 800cd8e:	b909      	cbnz	r1, 800cd94 <__lo0bits+0x32>
 800cd90:	3008      	adds	r0, #8
 800cd92:	0a1b      	lsrs	r3, r3, #8
 800cd94:	0719      	lsls	r1, r3, #28
 800cd96:	bf04      	itt	eq
 800cd98:	091b      	lsreq	r3, r3, #4
 800cd9a:	3004      	addeq	r0, #4
 800cd9c:	0799      	lsls	r1, r3, #30
 800cd9e:	bf04      	itt	eq
 800cda0:	089b      	lsreq	r3, r3, #2
 800cda2:	3002      	addeq	r0, #2
 800cda4:	07d9      	lsls	r1, r3, #31
 800cda6:	d403      	bmi.n	800cdb0 <__lo0bits+0x4e>
 800cda8:	085b      	lsrs	r3, r3, #1
 800cdaa:	f100 0001 	add.w	r0, r0, #1
 800cdae:	d003      	beq.n	800cdb8 <__lo0bits+0x56>
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	4770      	bx	lr
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	4770      	bx	lr
 800cdb8:	2020      	movs	r0, #32
 800cdba:	4770      	bx	lr

0800cdbc <__i2b>:
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f7ff ff07 	bl	800cbd4 <_Balloc>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <__i2b+0x1a>
 800cdca:	f240 1145 	movw	r1, #325	@ 0x145
 800cdce:	4b04      	ldr	r3, [pc, #16]	@ (800cde0 <__i2b+0x24>)
 800cdd0:	4804      	ldr	r0, [pc, #16]	@ (800cde4 <__i2b+0x28>)
 800cdd2:	f000 fcf5 	bl	800d7c0 <__assert_func>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	6144      	str	r4, [r0, #20]
 800cdda:	6103      	str	r3, [r0, #16]
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	bf00      	nop
 800cde0:	0800f0ae 	.word	0x0800f0ae
 800cde4:	0800f0bf 	.word	0x0800f0bf

0800cde8 <__multiply>:
 800cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdec:	4617      	mov	r7, r2
 800cdee:	690a      	ldr	r2, [r1, #16]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	4689      	mov	r9, r1
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	bfa2      	ittt	ge
 800cdf8:	463b      	movge	r3, r7
 800cdfa:	460f      	movge	r7, r1
 800cdfc:	4699      	movge	r9, r3
 800cdfe:	693d      	ldr	r5, [r7, #16]
 800ce00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	eb05 060a 	add.w	r6, r5, sl
 800ce0c:	42b3      	cmp	r3, r6
 800ce0e:	b085      	sub	sp, #20
 800ce10:	bfb8      	it	lt
 800ce12:	3101      	addlt	r1, #1
 800ce14:	f7ff fede 	bl	800cbd4 <_Balloc>
 800ce18:	b930      	cbnz	r0, 800ce28 <__multiply+0x40>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce20:	4b40      	ldr	r3, [pc, #256]	@ (800cf24 <__multiply+0x13c>)
 800ce22:	4841      	ldr	r0, [pc, #260]	@ (800cf28 <__multiply+0x140>)
 800ce24:	f000 fccc 	bl	800d7c0 <__assert_func>
 800ce28:	f100 0414 	add.w	r4, r0, #20
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	2200      	movs	r2, #0
 800ce30:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce34:	4573      	cmp	r3, lr
 800ce36:	d320      	bcc.n	800ce7a <__multiply+0x92>
 800ce38:	f107 0814 	add.w	r8, r7, #20
 800ce3c:	f109 0114 	add.w	r1, r9, #20
 800ce40:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce44:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce48:	9302      	str	r3, [sp, #8]
 800ce4a:	1beb      	subs	r3, r5, r7
 800ce4c:	3b15      	subs	r3, #21
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	3304      	adds	r3, #4
 800ce54:	3715      	adds	r7, #21
 800ce56:	42bd      	cmp	r5, r7
 800ce58:	bf38      	it	cc
 800ce5a:	2304      	movcc	r3, #4
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	9b02      	ldr	r3, [sp, #8]
 800ce60:	9103      	str	r1, [sp, #12]
 800ce62:	428b      	cmp	r3, r1
 800ce64:	d80c      	bhi.n	800ce80 <__multiply+0x98>
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	dd03      	ble.n	800ce72 <__multiply+0x8a>
 800ce6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d055      	beq.n	800cf1e <__multiply+0x136>
 800ce72:	6106      	str	r6, [r0, #16]
 800ce74:	b005      	add	sp, #20
 800ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7a:	f843 2b04 	str.w	r2, [r3], #4
 800ce7e:	e7d9      	b.n	800ce34 <__multiply+0x4c>
 800ce80:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce84:	f1ba 0f00 	cmp.w	sl, #0
 800ce88:	d01f      	beq.n	800ceca <__multiply+0xe2>
 800ce8a:	46c4      	mov	ip, r8
 800ce8c:	46a1      	mov	r9, r4
 800ce8e:	2700      	movs	r7, #0
 800ce90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce94:	f8d9 3000 	ldr.w	r3, [r9]
 800ce98:	fa1f fb82 	uxth.w	fp, r2
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	fb0a 330b 	mla	r3, sl, fp, r3
 800cea2:	443b      	add	r3, r7
 800cea4:	f8d9 7000 	ldr.w	r7, [r9]
 800cea8:	0c12      	lsrs	r2, r2, #16
 800ceaa:	0c3f      	lsrs	r7, r7, #16
 800ceac:	fb0a 7202 	mla	r2, sl, r2, r7
 800ceb0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceba:	4565      	cmp	r5, ip
 800cebc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cec0:	f849 3b04 	str.w	r3, [r9], #4
 800cec4:	d8e4      	bhi.n	800ce90 <__multiply+0xa8>
 800cec6:	9b01      	ldr	r3, [sp, #4]
 800cec8:	50e7      	str	r7, [r4, r3]
 800ceca:	9b03      	ldr	r3, [sp, #12]
 800cecc:	3104      	adds	r1, #4
 800cece:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ced2:	f1b9 0f00 	cmp.w	r9, #0
 800ced6:	d020      	beq.n	800cf1a <__multiply+0x132>
 800ced8:	4647      	mov	r7, r8
 800ceda:	46a4      	mov	ip, r4
 800cedc:	f04f 0a00 	mov.w	sl, #0
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	f8b7 b000 	ldrh.w	fp, [r7]
 800cee6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	fb09 220b 	mla	r2, r9, fp, r2
 800cef0:	4452      	add	r2, sl
 800cef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cef6:	f84c 3b04 	str.w	r3, [ip], #4
 800cefa:	f857 3b04 	ldr.w	r3, [r7], #4
 800cefe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf02:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf06:	42bd      	cmp	r5, r7
 800cf08:	fb09 330a 	mla	r3, r9, sl, r3
 800cf0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf14:	d8e5      	bhi.n	800cee2 <__multiply+0xfa>
 800cf16:	9a01      	ldr	r2, [sp, #4]
 800cf18:	50a3      	str	r3, [r4, r2]
 800cf1a:	3404      	adds	r4, #4
 800cf1c:	e79f      	b.n	800ce5e <__multiply+0x76>
 800cf1e:	3e01      	subs	r6, #1
 800cf20:	e7a1      	b.n	800ce66 <__multiply+0x7e>
 800cf22:	bf00      	nop
 800cf24:	0800f0ae 	.word	0x0800f0ae
 800cf28:	0800f0bf 	.word	0x0800f0bf

0800cf2c <__pow5mult>:
 800cf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf30:	4615      	mov	r5, r2
 800cf32:	f012 0203 	ands.w	r2, r2, #3
 800cf36:	4607      	mov	r7, r0
 800cf38:	460e      	mov	r6, r1
 800cf3a:	d007      	beq.n	800cf4c <__pow5mult+0x20>
 800cf3c:	4c25      	ldr	r4, [pc, #148]	@ (800cfd4 <__pow5mult+0xa8>)
 800cf3e:	3a01      	subs	r2, #1
 800cf40:	2300      	movs	r3, #0
 800cf42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf46:	f7ff fea7 	bl	800cc98 <__multadd>
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	10ad      	asrs	r5, r5, #2
 800cf4e:	d03d      	beq.n	800cfcc <__pow5mult+0xa0>
 800cf50:	69fc      	ldr	r4, [r7, #28]
 800cf52:	b97c      	cbnz	r4, 800cf74 <__pow5mult+0x48>
 800cf54:	2010      	movs	r0, #16
 800cf56:	f7ff fd87 	bl	800ca68 <malloc>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	61f8      	str	r0, [r7, #28]
 800cf5e:	b928      	cbnz	r0, 800cf6c <__pow5mult+0x40>
 800cf60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf64:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd8 <__pow5mult+0xac>)
 800cf66:	481d      	ldr	r0, [pc, #116]	@ (800cfdc <__pow5mult+0xb0>)
 800cf68:	f000 fc2a 	bl	800d7c0 <__assert_func>
 800cf6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf70:	6004      	str	r4, [r0, #0]
 800cf72:	60c4      	str	r4, [r0, #12]
 800cf74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf7c:	b94c      	cbnz	r4, 800cf92 <__pow5mult+0x66>
 800cf7e:	f240 2171 	movw	r1, #625	@ 0x271
 800cf82:	4638      	mov	r0, r7
 800cf84:	f7ff ff1a 	bl	800cdbc <__i2b>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	f04f 0900 	mov.w	r9, #0
 800cf96:	07eb      	lsls	r3, r5, #31
 800cf98:	d50a      	bpl.n	800cfb0 <__pow5mult+0x84>
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	f7ff ff22 	bl	800cde8 <__multiply>
 800cfa4:	4680      	mov	r8, r0
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f7ff fe53 	bl	800cc54 <_Bfree>
 800cfae:	4646      	mov	r6, r8
 800cfb0:	106d      	asrs	r5, r5, #1
 800cfb2:	d00b      	beq.n	800cfcc <__pow5mult+0xa0>
 800cfb4:	6820      	ldr	r0, [r4, #0]
 800cfb6:	b938      	cbnz	r0, 800cfc8 <__pow5mult+0x9c>
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7ff ff13 	bl	800cde8 <__multiply>
 800cfc2:	6020      	str	r0, [r4, #0]
 800cfc4:	f8c0 9000 	str.w	r9, [r0]
 800cfc8:	4604      	mov	r4, r0
 800cfca:	e7e4      	b.n	800cf96 <__pow5mult+0x6a>
 800cfcc:	4630      	mov	r0, r6
 800cfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd2:	bf00      	nop
 800cfd4:	0800f170 	.word	0x0800f170
 800cfd8:	0800f03f 	.word	0x0800f03f
 800cfdc:	0800f0bf 	.word	0x0800f0bf

0800cfe0 <__lshift>:
 800cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	4691      	mov	r9, r2
 800cfea:	6923      	ldr	r3, [r4, #16]
 800cfec:	6849      	ldr	r1, [r1, #4]
 800cfee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cff8:	f108 0601 	add.w	r6, r8, #1
 800cffc:	42b3      	cmp	r3, r6
 800cffe:	db0b      	blt.n	800d018 <__lshift+0x38>
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff fde7 	bl	800cbd4 <_Balloc>
 800d006:	4605      	mov	r5, r0
 800d008:	b948      	cbnz	r0, 800d01e <__lshift+0x3e>
 800d00a:	4602      	mov	r2, r0
 800d00c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d010:	4b27      	ldr	r3, [pc, #156]	@ (800d0b0 <__lshift+0xd0>)
 800d012:	4828      	ldr	r0, [pc, #160]	@ (800d0b4 <__lshift+0xd4>)
 800d014:	f000 fbd4 	bl	800d7c0 <__assert_func>
 800d018:	3101      	adds	r1, #1
 800d01a:	005b      	lsls	r3, r3, #1
 800d01c:	e7ee      	b.n	800cffc <__lshift+0x1c>
 800d01e:	2300      	movs	r3, #0
 800d020:	f100 0114 	add.w	r1, r0, #20
 800d024:	f100 0210 	add.w	r2, r0, #16
 800d028:	4618      	mov	r0, r3
 800d02a:	4553      	cmp	r3, sl
 800d02c:	db33      	blt.n	800d096 <__lshift+0xb6>
 800d02e:	6920      	ldr	r0, [r4, #16]
 800d030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d034:	f104 0314 	add.w	r3, r4, #20
 800d038:	f019 091f 	ands.w	r9, r9, #31
 800d03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d044:	d02b      	beq.n	800d09e <__lshift+0xbe>
 800d046:	468a      	mov	sl, r1
 800d048:	2200      	movs	r2, #0
 800d04a:	f1c9 0e20 	rsb	lr, r9, #32
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	fa00 f009 	lsl.w	r0, r0, r9
 800d054:	4310      	orrs	r0, r2
 800d056:	f84a 0b04 	str.w	r0, [sl], #4
 800d05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05e:	459c      	cmp	ip, r3
 800d060:	fa22 f20e 	lsr.w	r2, r2, lr
 800d064:	d8f3      	bhi.n	800d04e <__lshift+0x6e>
 800d066:	ebac 0304 	sub.w	r3, ip, r4
 800d06a:	3b15      	subs	r3, #21
 800d06c:	f023 0303 	bic.w	r3, r3, #3
 800d070:	3304      	adds	r3, #4
 800d072:	f104 0015 	add.w	r0, r4, #21
 800d076:	4560      	cmp	r0, ip
 800d078:	bf88      	it	hi
 800d07a:	2304      	movhi	r3, #4
 800d07c:	50ca      	str	r2, [r1, r3]
 800d07e:	b10a      	cbz	r2, 800d084 <__lshift+0xa4>
 800d080:	f108 0602 	add.w	r6, r8, #2
 800d084:	3e01      	subs	r6, #1
 800d086:	4638      	mov	r0, r7
 800d088:	4621      	mov	r1, r4
 800d08a:	612e      	str	r6, [r5, #16]
 800d08c:	f7ff fde2 	bl	800cc54 <_Bfree>
 800d090:	4628      	mov	r0, r5
 800d092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d096:	f842 0f04 	str.w	r0, [r2, #4]!
 800d09a:	3301      	adds	r3, #1
 800d09c:	e7c5      	b.n	800d02a <__lshift+0x4a>
 800d09e:	3904      	subs	r1, #4
 800d0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a4:	459c      	cmp	ip, r3
 800d0a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0aa:	d8f9      	bhi.n	800d0a0 <__lshift+0xc0>
 800d0ac:	e7ea      	b.n	800d084 <__lshift+0xa4>
 800d0ae:	bf00      	nop
 800d0b0:	0800f0ae 	.word	0x0800f0ae
 800d0b4:	0800f0bf 	.word	0x0800f0bf

0800d0b8 <__mcmp>:
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	690a      	ldr	r2, [r1, #16]
 800d0bc:	6900      	ldr	r0, [r0, #16]
 800d0be:	b530      	push	{r4, r5, lr}
 800d0c0:	1a80      	subs	r0, r0, r2
 800d0c2:	d10e      	bne.n	800d0e2 <__mcmp+0x2a>
 800d0c4:	3314      	adds	r3, #20
 800d0c6:	3114      	adds	r1, #20
 800d0c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0d8:	4295      	cmp	r5, r2
 800d0da:	d003      	beq.n	800d0e4 <__mcmp+0x2c>
 800d0dc:	d205      	bcs.n	800d0ea <__mcmp+0x32>
 800d0de:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e2:	bd30      	pop	{r4, r5, pc}
 800d0e4:	42a3      	cmp	r3, r4
 800d0e6:	d3f3      	bcc.n	800d0d0 <__mcmp+0x18>
 800d0e8:	e7fb      	b.n	800d0e2 <__mcmp+0x2a>
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	e7f9      	b.n	800d0e2 <__mcmp+0x2a>
	...

0800d0f0 <__mdiff>:
 800d0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	4689      	mov	r9, r1
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	f7ff ffdb 	bl	800d0b8 <__mcmp>
 800d102:	1e05      	subs	r5, r0, #0
 800d104:	d112      	bne.n	800d12c <__mdiff+0x3c>
 800d106:	4629      	mov	r1, r5
 800d108:	4630      	mov	r0, r6
 800d10a:	f7ff fd63 	bl	800cbd4 <_Balloc>
 800d10e:	4602      	mov	r2, r0
 800d110:	b928      	cbnz	r0, 800d11e <__mdiff+0x2e>
 800d112:	f240 2137 	movw	r1, #567	@ 0x237
 800d116:	4b3e      	ldr	r3, [pc, #248]	@ (800d210 <__mdiff+0x120>)
 800d118:	483e      	ldr	r0, [pc, #248]	@ (800d214 <__mdiff+0x124>)
 800d11a:	f000 fb51 	bl	800d7c0 <__assert_func>
 800d11e:	2301      	movs	r3, #1
 800d120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d124:	4610      	mov	r0, r2
 800d126:	b003      	add	sp, #12
 800d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12c:	bfbc      	itt	lt
 800d12e:	464b      	movlt	r3, r9
 800d130:	46a1      	movlt	r9, r4
 800d132:	4630      	mov	r0, r6
 800d134:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d138:	bfba      	itte	lt
 800d13a:	461c      	movlt	r4, r3
 800d13c:	2501      	movlt	r5, #1
 800d13e:	2500      	movge	r5, #0
 800d140:	f7ff fd48 	bl	800cbd4 <_Balloc>
 800d144:	4602      	mov	r2, r0
 800d146:	b918      	cbnz	r0, 800d150 <__mdiff+0x60>
 800d148:	f240 2145 	movw	r1, #581	@ 0x245
 800d14c:	4b30      	ldr	r3, [pc, #192]	@ (800d210 <__mdiff+0x120>)
 800d14e:	e7e3      	b.n	800d118 <__mdiff+0x28>
 800d150:	f100 0b14 	add.w	fp, r0, #20
 800d154:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d158:	f109 0310 	add.w	r3, r9, #16
 800d15c:	60c5      	str	r5, [r0, #12]
 800d15e:	f04f 0c00 	mov.w	ip, #0
 800d162:	f109 0514 	add.w	r5, r9, #20
 800d166:	46d9      	mov	r9, fp
 800d168:	6926      	ldr	r6, [r4, #16]
 800d16a:	f104 0e14 	add.w	lr, r4, #20
 800d16e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d172:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	9b01      	ldr	r3, [sp, #4]
 800d17a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d17e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d182:	b281      	uxth	r1, r0
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	fa1f f38a 	uxth.w	r3, sl
 800d18a:	1a5b      	subs	r3, r3, r1
 800d18c:	0c00      	lsrs	r0, r0, #16
 800d18e:	4463      	add	r3, ip
 800d190:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d194:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d198:	b29b      	uxth	r3, r3
 800d19a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d19e:	4576      	cmp	r6, lr
 800d1a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1a4:	f849 3b04 	str.w	r3, [r9], #4
 800d1a8:	d8e6      	bhi.n	800d178 <__mdiff+0x88>
 800d1aa:	1b33      	subs	r3, r6, r4
 800d1ac:	3b15      	subs	r3, #21
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	3415      	adds	r4, #21
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	42a6      	cmp	r6, r4
 800d1b8:	bf38      	it	cc
 800d1ba:	2304      	movcc	r3, #4
 800d1bc:	441d      	add	r5, r3
 800d1be:	445b      	add	r3, fp
 800d1c0:	461e      	mov	r6, r3
 800d1c2:	462c      	mov	r4, r5
 800d1c4:	4544      	cmp	r4, r8
 800d1c6:	d30e      	bcc.n	800d1e6 <__mdiff+0xf6>
 800d1c8:	f108 0103 	add.w	r1, r8, #3
 800d1cc:	1b49      	subs	r1, r1, r5
 800d1ce:	f021 0103 	bic.w	r1, r1, #3
 800d1d2:	3d03      	subs	r5, #3
 800d1d4:	45a8      	cmp	r8, r5
 800d1d6:	bf38      	it	cc
 800d1d8:	2100      	movcc	r1, #0
 800d1da:	440b      	add	r3, r1
 800d1dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1e0:	b199      	cbz	r1, 800d20a <__mdiff+0x11a>
 800d1e2:	6117      	str	r7, [r2, #16]
 800d1e4:	e79e      	b.n	800d124 <__mdiff+0x34>
 800d1e6:	46e6      	mov	lr, ip
 800d1e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1ec:	fa1f fc81 	uxth.w	ip, r1
 800d1f0:	44f4      	add	ip, lr
 800d1f2:	0c08      	lsrs	r0, r1, #16
 800d1f4:	4471      	add	r1, lr
 800d1f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1fa:	b289      	uxth	r1, r1
 800d1fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d200:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d204:	f846 1b04 	str.w	r1, [r6], #4
 800d208:	e7dc      	b.n	800d1c4 <__mdiff+0xd4>
 800d20a:	3f01      	subs	r7, #1
 800d20c:	e7e6      	b.n	800d1dc <__mdiff+0xec>
 800d20e:	bf00      	nop
 800d210:	0800f0ae 	.word	0x0800f0ae
 800d214:	0800f0bf 	.word	0x0800f0bf

0800d218 <__d2b>:
 800d218:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d21c:	2101      	movs	r1, #1
 800d21e:	4690      	mov	r8, r2
 800d220:	4699      	mov	r9, r3
 800d222:	9e08      	ldr	r6, [sp, #32]
 800d224:	f7ff fcd6 	bl	800cbd4 <_Balloc>
 800d228:	4604      	mov	r4, r0
 800d22a:	b930      	cbnz	r0, 800d23a <__d2b+0x22>
 800d22c:	4602      	mov	r2, r0
 800d22e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d232:	4b23      	ldr	r3, [pc, #140]	@ (800d2c0 <__d2b+0xa8>)
 800d234:	4823      	ldr	r0, [pc, #140]	@ (800d2c4 <__d2b+0xac>)
 800d236:	f000 fac3 	bl	800d7c0 <__assert_func>
 800d23a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d23e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d242:	b10d      	cbz	r5, 800d248 <__d2b+0x30>
 800d244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	f1b8 0300 	subs.w	r3, r8, #0
 800d24e:	d024      	beq.n	800d29a <__d2b+0x82>
 800d250:	4668      	mov	r0, sp
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	f7ff fd85 	bl	800cd62 <__lo0bits>
 800d258:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d25c:	b1d8      	cbz	r0, 800d296 <__d2b+0x7e>
 800d25e:	f1c0 0320 	rsb	r3, r0, #32
 800d262:	fa02 f303 	lsl.w	r3, r2, r3
 800d266:	430b      	orrs	r3, r1
 800d268:	40c2      	lsrs	r2, r0
 800d26a:	6163      	str	r3, [r4, #20]
 800d26c:	9201      	str	r2, [sp, #4]
 800d26e:	9b01      	ldr	r3, [sp, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	bf0c      	ite	eq
 800d274:	2201      	moveq	r2, #1
 800d276:	2202      	movne	r2, #2
 800d278:	61a3      	str	r3, [r4, #24]
 800d27a:	6122      	str	r2, [r4, #16]
 800d27c:	b1ad      	cbz	r5, 800d2aa <__d2b+0x92>
 800d27e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d282:	4405      	add	r5, r0
 800d284:	6035      	str	r5, [r6, #0]
 800d286:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28c:	6018      	str	r0, [r3, #0]
 800d28e:	4620      	mov	r0, r4
 800d290:	b002      	add	sp, #8
 800d292:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d296:	6161      	str	r1, [r4, #20]
 800d298:	e7e9      	b.n	800d26e <__d2b+0x56>
 800d29a:	a801      	add	r0, sp, #4
 800d29c:	f7ff fd61 	bl	800cd62 <__lo0bits>
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	6163      	str	r3, [r4, #20]
 800d2a6:	3020      	adds	r0, #32
 800d2a8:	e7e7      	b.n	800d27a <__d2b+0x62>
 800d2aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2b2:	6030      	str	r0, [r6, #0]
 800d2b4:	6918      	ldr	r0, [r3, #16]
 800d2b6:	f7ff fd35 	bl	800cd24 <__hi0bits>
 800d2ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2be:	e7e4      	b.n	800d28a <__d2b+0x72>
 800d2c0:	0800f0ae 	.word	0x0800f0ae
 800d2c4:	0800f0bf 	.word	0x0800f0bf

0800d2c8 <__sfputc_r>:
 800d2c8:	6893      	ldr	r3, [r2, #8]
 800d2ca:	b410      	push	{r4}
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	6093      	str	r3, [r2, #8]
 800d2d2:	da07      	bge.n	800d2e4 <__sfputc_r+0x1c>
 800d2d4:	6994      	ldr	r4, [r2, #24]
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	db01      	blt.n	800d2de <__sfputc_r+0x16>
 800d2da:	290a      	cmp	r1, #10
 800d2dc:	d102      	bne.n	800d2e4 <__sfputc_r+0x1c>
 800d2de:	bc10      	pop	{r4}
 800d2e0:	f7fe bbeb 	b.w	800baba <__swbuf_r>
 800d2e4:	6813      	ldr	r3, [r2, #0]
 800d2e6:	1c58      	adds	r0, r3, #1
 800d2e8:	6010      	str	r0, [r2, #0]
 800d2ea:	7019      	strb	r1, [r3, #0]
 800d2ec:	4608      	mov	r0, r1
 800d2ee:	bc10      	pop	{r4}
 800d2f0:	4770      	bx	lr

0800d2f2 <__sfputs_r>:
 800d2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	460f      	mov	r7, r1
 800d2f8:	4614      	mov	r4, r2
 800d2fa:	18d5      	adds	r5, r2, r3
 800d2fc:	42ac      	cmp	r4, r5
 800d2fe:	d101      	bne.n	800d304 <__sfputs_r+0x12>
 800d300:	2000      	movs	r0, #0
 800d302:	e007      	b.n	800d314 <__sfputs_r+0x22>
 800d304:	463a      	mov	r2, r7
 800d306:	4630      	mov	r0, r6
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	f7ff ffdc 	bl	800d2c8 <__sfputc_r>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	d1f3      	bne.n	800d2fc <__sfputs_r+0xa>
 800d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d318 <_vfiprintf_r>:
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	460d      	mov	r5, r1
 800d31e:	4614      	mov	r4, r2
 800d320:	4698      	mov	r8, r3
 800d322:	4606      	mov	r6, r0
 800d324:	b09d      	sub	sp, #116	@ 0x74
 800d326:	b118      	cbz	r0, 800d330 <_vfiprintf_r+0x18>
 800d328:	6a03      	ldr	r3, [r0, #32]
 800d32a:	b90b      	cbnz	r3, 800d330 <_vfiprintf_r+0x18>
 800d32c:	f7fe fadc 	bl	800b8e8 <__sinit>
 800d330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d332:	07d9      	lsls	r1, r3, #31
 800d334:	d405      	bmi.n	800d342 <_vfiprintf_r+0x2a>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	059a      	lsls	r2, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_vfiprintf_r+0x2a>
 800d33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d33e:	f7fe fcce 	bl	800bcde <__retarget_lock_acquire_recursive>
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	071b      	lsls	r3, r3, #28
 800d346:	d501      	bpl.n	800d34c <_vfiprintf_r+0x34>
 800d348:	692b      	ldr	r3, [r5, #16]
 800d34a:	b99b      	cbnz	r3, 800d374 <_vfiprintf_r+0x5c>
 800d34c:	4629      	mov	r1, r5
 800d34e:	4630      	mov	r0, r6
 800d350:	f7fe fbf2 	bl	800bb38 <__swsetup_r>
 800d354:	b170      	cbz	r0, 800d374 <_vfiprintf_r+0x5c>
 800d356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d358:	07dc      	lsls	r4, r3, #31
 800d35a:	d504      	bpl.n	800d366 <_vfiprintf_r+0x4e>
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295
 800d360:	b01d      	add	sp, #116	@ 0x74
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	89ab      	ldrh	r3, [r5, #12]
 800d368:	0598      	lsls	r0, r3, #22
 800d36a:	d4f7      	bmi.n	800d35c <_vfiprintf_r+0x44>
 800d36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d36e:	f7fe fcb7 	bl	800bce0 <__retarget_lock_release_recursive>
 800d372:	e7f3      	b.n	800d35c <_vfiprintf_r+0x44>
 800d374:	2300      	movs	r3, #0
 800d376:	9309      	str	r3, [sp, #36]	@ 0x24
 800d378:	2320      	movs	r3, #32
 800d37a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d37e:	2330      	movs	r3, #48	@ 0x30
 800d380:	f04f 0901 	mov.w	r9, #1
 800d384:	f8cd 800c 	str.w	r8, [sp, #12]
 800d388:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d534 <_vfiprintf_r+0x21c>
 800d38c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d390:	4623      	mov	r3, r4
 800d392:	469a      	mov	sl, r3
 800d394:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d398:	b10a      	cbz	r2, 800d39e <_vfiprintf_r+0x86>
 800d39a:	2a25      	cmp	r2, #37	@ 0x25
 800d39c:	d1f9      	bne.n	800d392 <_vfiprintf_r+0x7a>
 800d39e:	ebba 0b04 	subs.w	fp, sl, r4
 800d3a2:	d00b      	beq.n	800d3bc <_vfiprintf_r+0xa4>
 800d3a4:	465b      	mov	r3, fp
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f7ff ffa1 	bl	800d2f2 <__sfputs_r>
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	f000 80a7 	beq.w	800d504 <_vfiprintf_r+0x1ec>
 800d3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3b8:	445a      	add	r2, fp
 800d3ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 809f 	beq.w	800d504 <_vfiprintf_r+0x1ec>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3d0:	f10a 0a01 	add.w	sl, sl, #1
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	9307      	str	r3, [sp, #28]
 800d3d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3de:	4654      	mov	r4, sl
 800d3e0:	2205      	movs	r2, #5
 800d3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e6:	4853      	ldr	r0, [pc, #332]	@ (800d534 <_vfiprintf_r+0x21c>)
 800d3e8:	f7fe fc7b 	bl	800bce2 <memchr>
 800d3ec:	9a04      	ldr	r2, [sp, #16]
 800d3ee:	b9d8      	cbnz	r0, 800d428 <_vfiprintf_r+0x110>
 800d3f0:	06d1      	lsls	r1, r2, #27
 800d3f2:	bf44      	itt	mi
 800d3f4:	2320      	movmi	r3, #32
 800d3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3fa:	0713      	lsls	r3, r2, #28
 800d3fc:	bf44      	itt	mi
 800d3fe:	232b      	movmi	r3, #43	@ 0x2b
 800d400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d404:	f89a 3000 	ldrb.w	r3, [sl]
 800d408:	2b2a      	cmp	r3, #42	@ 0x2a
 800d40a:	d015      	beq.n	800d438 <_vfiprintf_r+0x120>
 800d40c:	4654      	mov	r4, sl
 800d40e:	2000      	movs	r0, #0
 800d410:	f04f 0c0a 	mov.w	ip, #10
 800d414:	9a07      	ldr	r2, [sp, #28]
 800d416:	4621      	mov	r1, r4
 800d418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d41c:	3b30      	subs	r3, #48	@ 0x30
 800d41e:	2b09      	cmp	r3, #9
 800d420:	d94b      	bls.n	800d4ba <_vfiprintf_r+0x1a2>
 800d422:	b1b0      	cbz	r0, 800d452 <_vfiprintf_r+0x13a>
 800d424:	9207      	str	r2, [sp, #28]
 800d426:	e014      	b.n	800d452 <_vfiprintf_r+0x13a>
 800d428:	eba0 0308 	sub.w	r3, r0, r8
 800d42c:	fa09 f303 	lsl.w	r3, r9, r3
 800d430:	4313      	orrs	r3, r2
 800d432:	46a2      	mov	sl, r4
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	e7d2      	b.n	800d3de <_vfiprintf_r+0xc6>
 800d438:	9b03      	ldr	r3, [sp, #12]
 800d43a:	1d19      	adds	r1, r3, #4
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	9103      	str	r1, [sp, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	bfbb      	ittet	lt
 800d444:	425b      	neglt	r3, r3
 800d446:	f042 0202 	orrlt.w	r2, r2, #2
 800d44a:	9307      	strge	r3, [sp, #28]
 800d44c:	9307      	strlt	r3, [sp, #28]
 800d44e:	bfb8      	it	lt
 800d450:	9204      	strlt	r2, [sp, #16]
 800d452:	7823      	ldrb	r3, [r4, #0]
 800d454:	2b2e      	cmp	r3, #46	@ 0x2e
 800d456:	d10a      	bne.n	800d46e <_vfiprintf_r+0x156>
 800d458:	7863      	ldrb	r3, [r4, #1]
 800d45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d45c:	d132      	bne.n	800d4c4 <_vfiprintf_r+0x1ac>
 800d45e:	9b03      	ldr	r3, [sp, #12]
 800d460:	3402      	adds	r4, #2
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	9203      	str	r2, [sp, #12]
 800d468:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d538 <_vfiprintf_r+0x220>
 800d472:	2203      	movs	r2, #3
 800d474:	4650      	mov	r0, sl
 800d476:	7821      	ldrb	r1, [r4, #0]
 800d478:	f7fe fc33 	bl	800bce2 <memchr>
 800d47c:	b138      	cbz	r0, 800d48e <_vfiprintf_r+0x176>
 800d47e:	2240      	movs	r2, #64	@ 0x40
 800d480:	9b04      	ldr	r3, [sp, #16]
 800d482:	eba0 000a 	sub.w	r0, r0, sl
 800d486:	4082      	lsls	r2, r0
 800d488:	4313      	orrs	r3, r2
 800d48a:	3401      	adds	r4, #1
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d492:	2206      	movs	r2, #6
 800d494:	4829      	ldr	r0, [pc, #164]	@ (800d53c <_vfiprintf_r+0x224>)
 800d496:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d49a:	f7fe fc22 	bl	800bce2 <memchr>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d03f      	beq.n	800d522 <_vfiprintf_r+0x20a>
 800d4a2:	4b27      	ldr	r3, [pc, #156]	@ (800d540 <_vfiprintf_r+0x228>)
 800d4a4:	bb1b      	cbnz	r3, 800d4ee <_vfiprintf_r+0x1d6>
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	3307      	adds	r3, #7
 800d4aa:	f023 0307 	bic.w	r3, r3, #7
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b4:	443b      	add	r3, r7
 800d4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b8:	e76a      	b.n	800d390 <_vfiprintf_r+0x78>
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	2001      	movs	r0, #1
 800d4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4c2:	e7a8      	b.n	800d416 <_vfiprintf_r+0xfe>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f04f 0c0a 	mov.w	ip, #10
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	3401      	adds	r4, #1
 800d4ce:	9305      	str	r3, [sp, #20]
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4d6:	3a30      	subs	r2, #48	@ 0x30
 800d4d8:	2a09      	cmp	r2, #9
 800d4da:	d903      	bls.n	800d4e4 <_vfiprintf_r+0x1cc>
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0c6      	beq.n	800d46e <_vfiprintf_r+0x156>
 800d4e0:	9105      	str	r1, [sp, #20]
 800d4e2:	e7c4      	b.n	800d46e <_vfiprintf_r+0x156>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ec:	e7f0      	b.n	800d4d0 <_vfiprintf_r+0x1b8>
 800d4ee:	ab03      	add	r3, sp, #12
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4b13      	ldr	r3, [pc, #76]	@ (800d544 <_vfiprintf_r+0x22c>)
 800d4f8:	a904      	add	r1, sp, #16
 800d4fa:	f7fd fdad 	bl	800b058 <_printf_float>
 800d4fe:	4607      	mov	r7, r0
 800d500:	1c78      	adds	r0, r7, #1
 800d502:	d1d6      	bne.n	800d4b2 <_vfiprintf_r+0x19a>
 800d504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d506:	07d9      	lsls	r1, r3, #31
 800d508:	d405      	bmi.n	800d516 <_vfiprintf_r+0x1fe>
 800d50a:	89ab      	ldrh	r3, [r5, #12]
 800d50c:	059a      	lsls	r2, r3, #22
 800d50e:	d402      	bmi.n	800d516 <_vfiprintf_r+0x1fe>
 800d510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d512:	f7fe fbe5 	bl	800bce0 <__retarget_lock_release_recursive>
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	065b      	lsls	r3, r3, #25
 800d51a:	f53f af1f 	bmi.w	800d35c <_vfiprintf_r+0x44>
 800d51e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d520:	e71e      	b.n	800d360 <_vfiprintf_r+0x48>
 800d522:	ab03      	add	r3, sp, #12
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	462a      	mov	r2, r5
 800d528:	4630      	mov	r0, r6
 800d52a:	4b06      	ldr	r3, [pc, #24]	@ (800d544 <_vfiprintf_r+0x22c>)
 800d52c:	a904      	add	r1, sp, #16
 800d52e:	f7fe f831 	bl	800b594 <_printf_i>
 800d532:	e7e4      	b.n	800d4fe <_vfiprintf_r+0x1e6>
 800d534:	0800f118 	.word	0x0800f118
 800d538:	0800f11e 	.word	0x0800f11e
 800d53c:	0800f122 	.word	0x0800f122
 800d540:	0800b059 	.word	0x0800b059
 800d544:	0800d2f3 	.word	0x0800d2f3

0800d548 <__sflush_r>:
 800d548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	0716      	lsls	r6, r2, #28
 800d550:	4605      	mov	r5, r0
 800d552:	460c      	mov	r4, r1
 800d554:	d454      	bmi.n	800d600 <__sflush_r+0xb8>
 800d556:	684b      	ldr	r3, [r1, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	dc02      	bgt.n	800d562 <__sflush_r+0x1a>
 800d55c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d55e:	2b00      	cmp	r3, #0
 800d560:	dd48      	ble.n	800d5f4 <__sflush_r+0xac>
 800d562:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d564:	2e00      	cmp	r6, #0
 800d566:	d045      	beq.n	800d5f4 <__sflush_r+0xac>
 800d568:	2300      	movs	r3, #0
 800d56a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d56e:	682f      	ldr	r7, [r5, #0]
 800d570:	6a21      	ldr	r1, [r4, #32]
 800d572:	602b      	str	r3, [r5, #0]
 800d574:	d030      	beq.n	800d5d8 <__sflush_r+0x90>
 800d576:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	0759      	lsls	r1, r3, #29
 800d57c:	d505      	bpl.n	800d58a <__sflush_r+0x42>
 800d57e:	6863      	ldr	r3, [r4, #4]
 800d580:	1ad2      	subs	r2, r2, r3
 800d582:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d584:	b10b      	cbz	r3, 800d58a <__sflush_r+0x42>
 800d586:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d588:	1ad2      	subs	r2, r2, r3
 800d58a:	2300      	movs	r3, #0
 800d58c:	4628      	mov	r0, r5
 800d58e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d590:	6a21      	ldr	r1, [r4, #32]
 800d592:	47b0      	blx	r6
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	89a3      	ldrh	r3, [r4, #12]
 800d598:	d106      	bne.n	800d5a8 <__sflush_r+0x60>
 800d59a:	6829      	ldr	r1, [r5, #0]
 800d59c:	291d      	cmp	r1, #29
 800d59e:	d82b      	bhi.n	800d5f8 <__sflush_r+0xb0>
 800d5a0:	4a28      	ldr	r2, [pc, #160]	@ (800d644 <__sflush_r+0xfc>)
 800d5a2:	40ca      	lsrs	r2, r1
 800d5a4:	07d6      	lsls	r6, r2, #31
 800d5a6:	d527      	bpl.n	800d5f8 <__sflush_r+0xb0>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	6062      	str	r2, [r4, #4]
 800d5ac:	6922      	ldr	r2, [r4, #16]
 800d5ae:	04d9      	lsls	r1, r3, #19
 800d5b0:	6022      	str	r2, [r4, #0]
 800d5b2:	d504      	bpl.n	800d5be <__sflush_r+0x76>
 800d5b4:	1c42      	adds	r2, r0, #1
 800d5b6:	d101      	bne.n	800d5bc <__sflush_r+0x74>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b903      	cbnz	r3, 800d5be <__sflush_r+0x76>
 800d5bc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5c0:	602f      	str	r7, [r5, #0]
 800d5c2:	b1b9      	cbz	r1, 800d5f4 <__sflush_r+0xac>
 800d5c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5c8:	4299      	cmp	r1, r3
 800d5ca:	d002      	beq.n	800d5d2 <__sflush_r+0x8a>
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f7ff fa03 	bl	800c9d8 <_free_r>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5d6:	e00d      	b.n	800d5f4 <__sflush_r+0xac>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b0      	blx	r6
 800d5de:	4602      	mov	r2, r0
 800d5e0:	1c50      	adds	r0, r2, #1
 800d5e2:	d1c9      	bne.n	800d578 <__sflush_r+0x30>
 800d5e4:	682b      	ldr	r3, [r5, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0c6      	beq.n	800d578 <__sflush_r+0x30>
 800d5ea:	2b1d      	cmp	r3, #29
 800d5ec:	d001      	beq.n	800d5f2 <__sflush_r+0xaa>
 800d5ee:	2b16      	cmp	r3, #22
 800d5f0:	d11d      	bne.n	800d62e <__sflush_r+0xe6>
 800d5f2:	602f      	str	r7, [r5, #0]
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e021      	b.n	800d63c <__sflush_r+0xf4>
 800d5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fc:	b21b      	sxth	r3, r3
 800d5fe:	e01a      	b.n	800d636 <__sflush_r+0xee>
 800d600:	690f      	ldr	r7, [r1, #16]
 800d602:	2f00      	cmp	r7, #0
 800d604:	d0f6      	beq.n	800d5f4 <__sflush_r+0xac>
 800d606:	0793      	lsls	r3, r2, #30
 800d608:	bf18      	it	ne
 800d60a:	2300      	movne	r3, #0
 800d60c:	680e      	ldr	r6, [r1, #0]
 800d60e:	bf08      	it	eq
 800d610:	694b      	ldreq	r3, [r1, #20]
 800d612:	1bf6      	subs	r6, r6, r7
 800d614:	600f      	str	r7, [r1, #0]
 800d616:	608b      	str	r3, [r1, #8]
 800d618:	2e00      	cmp	r6, #0
 800d61a:	ddeb      	ble.n	800d5f4 <__sflush_r+0xac>
 800d61c:	4633      	mov	r3, r6
 800d61e:	463a      	mov	r2, r7
 800d620:	4628      	mov	r0, r5
 800d622:	6a21      	ldr	r1, [r4, #32]
 800d624:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d628:	47e0      	blx	ip
 800d62a:	2800      	cmp	r0, #0
 800d62c:	dc07      	bgt.n	800d63e <__sflush_r+0xf6>
 800d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d636:	f04f 30ff 	mov.w	r0, #4294967295
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d63e:	4407      	add	r7, r0
 800d640:	1a36      	subs	r6, r6, r0
 800d642:	e7e9      	b.n	800d618 <__sflush_r+0xd0>
 800d644:	20400001 	.word	0x20400001

0800d648 <_fflush_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	690b      	ldr	r3, [r1, #16]
 800d64c:	4605      	mov	r5, r0
 800d64e:	460c      	mov	r4, r1
 800d650:	b913      	cbnz	r3, 800d658 <_fflush_r+0x10>
 800d652:	2500      	movs	r5, #0
 800d654:	4628      	mov	r0, r5
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	b118      	cbz	r0, 800d662 <_fflush_r+0x1a>
 800d65a:	6a03      	ldr	r3, [r0, #32]
 800d65c:	b90b      	cbnz	r3, 800d662 <_fflush_r+0x1a>
 800d65e:	f7fe f943 	bl	800b8e8 <__sinit>
 800d662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0f3      	beq.n	800d652 <_fflush_r+0xa>
 800d66a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d66c:	07d0      	lsls	r0, r2, #31
 800d66e:	d404      	bmi.n	800d67a <_fflush_r+0x32>
 800d670:	0599      	lsls	r1, r3, #22
 800d672:	d402      	bmi.n	800d67a <_fflush_r+0x32>
 800d674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d676:	f7fe fb32 	bl	800bcde <__retarget_lock_acquire_recursive>
 800d67a:	4628      	mov	r0, r5
 800d67c:	4621      	mov	r1, r4
 800d67e:	f7ff ff63 	bl	800d548 <__sflush_r>
 800d682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d684:	4605      	mov	r5, r0
 800d686:	07da      	lsls	r2, r3, #31
 800d688:	d4e4      	bmi.n	800d654 <_fflush_r+0xc>
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	059b      	lsls	r3, r3, #22
 800d68e:	d4e1      	bmi.n	800d654 <_fflush_r+0xc>
 800d690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d692:	f7fe fb25 	bl	800bce0 <__retarget_lock_release_recursive>
 800d696:	e7dd      	b.n	800d654 <_fflush_r+0xc>

0800d698 <__swhatbuf_r>:
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	460c      	mov	r4, r1
 800d69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a0:	4615      	mov	r5, r2
 800d6a2:	2900      	cmp	r1, #0
 800d6a4:	461e      	mov	r6, r3
 800d6a6:	b096      	sub	sp, #88	@ 0x58
 800d6a8:	da0c      	bge.n	800d6c4 <__swhatbuf_r+0x2c>
 800d6aa:	89a3      	ldrh	r3, [r4, #12]
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6b2:	bf14      	ite	ne
 800d6b4:	2340      	movne	r3, #64	@ 0x40
 800d6b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	6031      	str	r1, [r6, #0]
 800d6be:	602b      	str	r3, [r5, #0]
 800d6c0:	b016      	add	sp, #88	@ 0x58
 800d6c2:	bd70      	pop	{r4, r5, r6, pc}
 800d6c4:	466a      	mov	r2, sp
 800d6c6:	f000 f849 	bl	800d75c <_fstat_r>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	dbed      	blt.n	800d6aa <__swhatbuf_r+0x12>
 800d6ce:	9901      	ldr	r1, [sp, #4]
 800d6d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6d8:	4259      	negs	r1, r3
 800d6da:	4159      	adcs	r1, r3
 800d6dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6e0:	e7eb      	b.n	800d6ba <__swhatbuf_r+0x22>

0800d6e2 <__smakebuf_r>:
 800d6e2:	898b      	ldrh	r3, [r1, #12]
 800d6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6e6:	079d      	lsls	r5, r3, #30
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	d507      	bpl.n	800d6fe <__smakebuf_r+0x1c>
 800d6ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	6123      	str	r3, [r4, #16]
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	6163      	str	r3, [r4, #20]
 800d6fa:	b003      	add	sp, #12
 800d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fe:	466a      	mov	r2, sp
 800d700:	ab01      	add	r3, sp, #4
 800d702:	f7ff ffc9 	bl	800d698 <__swhatbuf_r>
 800d706:	9f00      	ldr	r7, [sp, #0]
 800d708:	4605      	mov	r5, r0
 800d70a:	4639      	mov	r1, r7
 800d70c:	4630      	mov	r0, r6
 800d70e:	f7ff f9d5 	bl	800cabc <_malloc_r>
 800d712:	b948      	cbnz	r0, 800d728 <__smakebuf_r+0x46>
 800d714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d718:	059a      	lsls	r2, r3, #22
 800d71a:	d4ee      	bmi.n	800d6fa <__smakebuf_r+0x18>
 800d71c:	f023 0303 	bic.w	r3, r3, #3
 800d720:	f043 0302 	orr.w	r3, r3, #2
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	e7e2      	b.n	800d6ee <__smakebuf_r+0xc>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d72e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	9b01      	ldr	r3, [sp, #4]
 800d736:	6020      	str	r0, [r4, #0]
 800d738:	b15b      	cbz	r3, 800d752 <__smakebuf_r+0x70>
 800d73a:	4630      	mov	r0, r6
 800d73c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d740:	f000 f81e 	bl	800d780 <_isatty_r>
 800d744:	b128      	cbz	r0, 800d752 <__smakebuf_r+0x70>
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f023 0303 	bic.w	r3, r3, #3
 800d74c:	f043 0301 	orr.w	r3, r3, #1
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	431d      	orrs	r5, r3
 800d756:	81a5      	strh	r5, [r4, #12]
 800d758:	e7cf      	b.n	800d6fa <__smakebuf_r+0x18>
	...

0800d75c <_fstat_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	2300      	movs	r3, #0
 800d760:	4d06      	ldr	r5, [pc, #24]	@ (800d77c <_fstat_r+0x20>)
 800d762:	4604      	mov	r4, r0
 800d764:	4608      	mov	r0, r1
 800d766:	4611      	mov	r1, r2
 800d768:	602b      	str	r3, [r5, #0]
 800d76a:	f7f5 f8bf 	bl	80028ec <_fstat>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d102      	bne.n	800d778 <_fstat_r+0x1c>
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	b103      	cbz	r3, 800d778 <_fstat_r+0x1c>
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop
 800d77c:	20000784 	.word	0x20000784

0800d780 <_isatty_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	2300      	movs	r3, #0
 800d784:	4d05      	ldr	r5, [pc, #20]	@ (800d79c <_isatty_r+0x1c>)
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f5 f8bd 	bl	800290a <_isatty>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_isatty_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_isatty_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	20000784 	.word	0x20000784

0800d7a0 <_sbrk_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	4d05      	ldr	r5, [pc, #20]	@ (800d7bc <_sbrk_r+0x1c>)
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	602b      	str	r3, [r5, #0]
 800d7ac:	f7f5 f8c4 	bl	8002938 <_sbrk>
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	d102      	bne.n	800d7ba <_sbrk_r+0x1a>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	b103      	cbz	r3, 800d7ba <_sbrk_r+0x1a>
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	20000784 	.word	0x20000784

0800d7c0 <__assert_func>:
 800d7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7c2:	4614      	mov	r4, r2
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	4b09      	ldr	r3, [pc, #36]	@ (800d7ec <__assert_func+0x2c>)
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68d8      	ldr	r0, [r3, #12]
 800d7ce:	b14c      	cbz	r4, 800d7e4 <__assert_func+0x24>
 800d7d0:	4b07      	ldr	r3, [pc, #28]	@ (800d7f0 <__assert_func+0x30>)
 800d7d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7d6:	9100      	str	r1, [sp, #0]
 800d7d8:	462b      	mov	r3, r5
 800d7da:	4906      	ldr	r1, [pc, #24]	@ (800d7f4 <__assert_func+0x34>)
 800d7dc:	f000 f842 	bl	800d864 <fiprintf>
 800d7e0:	f000 f852 	bl	800d888 <abort>
 800d7e4:	4b04      	ldr	r3, [pc, #16]	@ (800d7f8 <__assert_func+0x38>)
 800d7e6:	461c      	mov	r4, r3
 800d7e8:	e7f3      	b.n	800d7d2 <__assert_func+0x12>
 800d7ea:	bf00      	nop
 800d7ec:	2000002c 	.word	0x2000002c
 800d7f0:	0800f133 	.word	0x0800f133
 800d7f4:	0800f140 	.word	0x0800f140
 800d7f8:	0800f16e 	.word	0x0800f16e

0800d7fc <_calloc_r>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	fba1 5402 	umull	r5, r4, r1, r2
 800d802:	b934      	cbnz	r4, 800d812 <_calloc_r+0x16>
 800d804:	4629      	mov	r1, r5
 800d806:	f7ff f959 	bl	800cabc <_malloc_r>
 800d80a:	4606      	mov	r6, r0
 800d80c:	b928      	cbnz	r0, 800d81a <_calloc_r+0x1e>
 800d80e:	4630      	mov	r0, r6
 800d810:	bd70      	pop	{r4, r5, r6, pc}
 800d812:	220c      	movs	r2, #12
 800d814:	2600      	movs	r6, #0
 800d816:	6002      	str	r2, [r0, #0]
 800d818:	e7f9      	b.n	800d80e <_calloc_r+0x12>
 800d81a:	462a      	mov	r2, r5
 800d81c:	4621      	mov	r1, r4
 800d81e:	f7fe f9e1 	bl	800bbe4 <memset>
 800d822:	e7f4      	b.n	800d80e <_calloc_r+0x12>

0800d824 <__ascii_mbtowc>:
 800d824:	b082      	sub	sp, #8
 800d826:	b901      	cbnz	r1, 800d82a <__ascii_mbtowc+0x6>
 800d828:	a901      	add	r1, sp, #4
 800d82a:	b142      	cbz	r2, 800d83e <__ascii_mbtowc+0x1a>
 800d82c:	b14b      	cbz	r3, 800d842 <__ascii_mbtowc+0x1e>
 800d82e:	7813      	ldrb	r3, [r2, #0]
 800d830:	600b      	str	r3, [r1, #0]
 800d832:	7812      	ldrb	r2, [r2, #0]
 800d834:	1e10      	subs	r0, r2, #0
 800d836:	bf18      	it	ne
 800d838:	2001      	movne	r0, #1
 800d83a:	b002      	add	sp, #8
 800d83c:	4770      	bx	lr
 800d83e:	4610      	mov	r0, r2
 800d840:	e7fb      	b.n	800d83a <__ascii_mbtowc+0x16>
 800d842:	f06f 0001 	mvn.w	r0, #1
 800d846:	e7f8      	b.n	800d83a <__ascii_mbtowc+0x16>

0800d848 <__ascii_wctomb>:
 800d848:	4603      	mov	r3, r0
 800d84a:	4608      	mov	r0, r1
 800d84c:	b141      	cbz	r1, 800d860 <__ascii_wctomb+0x18>
 800d84e:	2aff      	cmp	r2, #255	@ 0xff
 800d850:	d904      	bls.n	800d85c <__ascii_wctomb+0x14>
 800d852:	228a      	movs	r2, #138	@ 0x8a
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	4770      	bx	lr
 800d85c:	2001      	movs	r0, #1
 800d85e:	700a      	strb	r2, [r1, #0]
 800d860:	4770      	bx	lr
	...

0800d864 <fiprintf>:
 800d864:	b40e      	push	{r1, r2, r3}
 800d866:	b503      	push	{r0, r1, lr}
 800d868:	4601      	mov	r1, r0
 800d86a:	ab03      	add	r3, sp, #12
 800d86c:	4805      	ldr	r0, [pc, #20]	@ (800d884 <fiprintf+0x20>)
 800d86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d872:	6800      	ldr	r0, [r0, #0]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	f7ff fd4f 	bl	800d318 <_vfiprintf_r>
 800d87a:	b002      	add	sp, #8
 800d87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d880:	b003      	add	sp, #12
 800d882:	4770      	bx	lr
 800d884:	2000002c 	.word	0x2000002c

0800d888 <abort>:
 800d888:	2006      	movs	r0, #6
 800d88a:	b508      	push	{r3, lr}
 800d88c:	f000 f82c 	bl	800d8e8 <raise>
 800d890:	2001      	movs	r0, #1
 800d892:	f7f4 ffdc 	bl	800284e <_exit>

0800d896 <_raise_r>:
 800d896:	291f      	cmp	r1, #31
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4605      	mov	r5, r0
 800d89c:	460c      	mov	r4, r1
 800d89e:	d904      	bls.n	800d8aa <_raise_r+0x14>
 800d8a0:	2316      	movs	r3, #22
 800d8a2:	6003      	str	r3, [r0, #0]
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	bd38      	pop	{r3, r4, r5, pc}
 800d8aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d8ac:	b112      	cbz	r2, 800d8b4 <_raise_r+0x1e>
 800d8ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8b2:	b94b      	cbnz	r3, 800d8c8 <_raise_r+0x32>
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f000 f831 	bl	800d91c <_getpid_r>
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	4601      	mov	r1, r0
 800d8be:	4628      	mov	r0, r5
 800d8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c4:	f000 b818 	b.w	800d8f8 <_kill_r>
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d00a      	beq.n	800d8e2 <_raise_r+0x4c>
 800d8cc:	1c59      	adds	r1, r3, #1
 800d8ce:	d103      	bne.n	800d8d8 <_raise_r+0x42>
 800d8d0:	2316      	movs	r3, #22
 800d8d2:	6003      	str	r3, [r0, #0]
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	e7e7      	b.n	800d8a8 <_raise_r+0x12>
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8e0:	4798      	blx	r3
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e7e0      	b.n	800d8a8 <_raise_r+0x12>
	...

0800d8e8 <raise>:
 800d8e8:	4b02      	ldr	r3, [pc, #8]	@ (800d8f4 <raise+0xc>)
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	6818      	ldr	r0, [r3, #0]
 800d8ee:	f7ff bfd2 	b.w	800d896 <_raise_r>
 800d8f2:	bf00      	nop
 800d8f4:	2000002c 	.word	0x2000002c

0800d8f8 <_kill_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	4d06      	ldr	r5, [pc, #24]	@ (800d918 <_kill_r+0x20>)
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	f7f4 ff92 	bl	800282e <_kill>
 800d90a:	1c43      	adds	r3, r0, #1
 800d90c:	d102      	bne.n	800d914 <_kill_r+0x1c>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	b103      	cbz	r3, 800d914 <_kill_r+0x1c>
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	20000784 	.word	0x20000784

0800d91c <_getpid_r>:
 800d91c:	f7f4 bf80 	b.w	8002820 <_getpid>

0800d920 <tanh>:
 800d920:	4a41      	ldr	r2, [pc, #260]	@ (800da28 <tanh+0x108>)
 800d922:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d926:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d92a:	4293      	cmp	r3, r2
 800d92c:	4606      	mov	r6, r0
 800d92e:	460f      	mov	r7, r1
 800d930:	460c      	mov	r4, r1
 800d932:	d917      	bls.n	800d964 <tanh+0x44>
 800d934:	4b3d      	ldr	r3, [pc, #244]	@ (800da2c <tanh+0x10c>)
 800d936:	2900      	cmp	r1, #0
 800d938:	4632      	mov	r2, r6
 800d93a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d93e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d942:	463b      	mov	r3, r7
 800d944:	db07      	blt.n	800d956 <tanh+0x36>
 800d946:	f7f2 ff13 	bl	8000770 <__aeabi_ddiv>
 800d94a:	4622      	mov	r2, r4
 800d94c:	462b      	mov	r3, r5
 800d94e:	f7f2 fc2f 	bl	80001b0 <__adddf3>
 800d952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d956:	f7f2 ff0b 	bl	8000770 <__aeabi_ddiv>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	f7f2 fc25 	bl	80001ac <__aeabi_dsub>
 800d962:	e7f6      	b.n	800d952 <tanh+0x32>
 800d964:	4a32      	ldr	r2, [pc, #200]	@ (800da30 <tanh+0x110>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d856      	bhi.n	800da18 <tanh+0xf8>
 800d96a:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 800d96e:	d20b      	bcs.n	800d988 <tanh+0x68>
 800d970:	460b      	mov	r3, r1
 800d972:	492e      	ldr	r1, [pc, #184]	@ (800da2c <tanh+0x10c>)
 800d974:	4602      	mov	r2, r0
 800d976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d97a:	f7f2 fc19 	bl	80001b0 <__adddf3>
 800d97e:	4632      	mov	r2, r6
 800d980:	463b      	mov	r3, r7
 800d982:	f7f2 fdcb 	bl	800051c <__aeabi_dmul>
 800d986:	e7e4      	b.n	800d952 <tanh+0x32>
 800d988:	4a2a      	ldr	r2, [pc, #168]	@ (800da34 <tanh+0x114>)
 800d98a:	4d2b      	ldr	r5, [pc, #172]	@ (800da38 <tanh+0x118>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d91f      	bls.n	800d9d0 <tanh+0xb0>
 800d990:	f000 fbb0 	bl	800e0f4 <fabs>
 800d994:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d998:	f7f2 fdc0 	bl	800051c <__aeabi_dmul>
 800d99c:	f000 f8b8 	bl	800db10 <expm1>
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4922      	ldr	r1, [pc, #136]	@ (800da2c <tanh+0x10c>)
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d9aa:	e9d5 8900 	ldrd	r8, r9, [r5]
 800d9ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9b2:	f7f2 fbfd 	bl	80001b0 <__adddf3>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fed7 	bl	8000770 <__aeabi_ddiv>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	f7f2 fbef 	bl	80001ac <__aeabi_dsub>
 800d9ce:	e01b      	b.n	800da08 <tanh+0xe8>
 800d9d0:	e9d5 6700 	ldrd	r6, r7, [r5]
 800d9d4:	f000 fb8e 	bl	800e0f4 <fabs>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d9e2:	f7f2 fd9b 	bl	800051c <__aeabi_dmul>
 800d9e6:	f000 f893 	bl	800db10 <expm1>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	f101 4700 	add.w	r7, r1, #2147483648	@ 0x80000000
 800d9f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d9f8:	f7f2 fbda 	bl	80001b0 <__adddf3>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f2 feb4 	bl	8000770 <__aeabi_ddiv>
 800da08:	2c00      	cmp	r4, #0
 800da0a:	bfbf      	itttt	lt
 800da0c:	4602      	movlt	r2, r0
 800da0e:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 800da12:	4610      	movlt	r0, r2
 800da14:	4619      	movlt	r1, r3
 800da16:	e79c      	b.n	800d952 <tanh+0x32>
 800da18:	4b04      	ldr	r3, [pc, #16]	@ (800da2c <tanh+0x10c>)
 800da1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da1e:	4b07      	ldr	r3, [pc, #28]	@ (800da3c <tanh+0x11c>)
 800da20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da24:	e7d1      	b.n	800d9ca <tanh+0xaa>
 800da26:	bf00      	nop
 800da28:	7fefffff 	.word	0x7fefffff
 800da2c:	0800f388 	.word	0x0800f388
 800da30:	4035ffff 	.word	0x4035ffff
 800da34:	3fefffff 	.word	0x3fefffff
 800da38:	0800f380 	.word	0x0800f380
 800da3c:	0800f378 	.word	0x0800f378

0800da40 <expf>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4605      	mov	r5, r0
 800da44:	f000 fb5a 	bl	800e0fc <__ieee754_expf>
 800da48:	4604      	mov	r4, r0
 800da4a:	4628      	mov	r0, r5
 800da4c:	f000 faa6 	bl	800df9c <finitef>
 800da50:	b150      	cbz	r0, 800da68 <expf+0x28>
 800da52:	4628      	mov	r0, r5
 800da54:	490b      	ldr	r1, [pc, #44]	@ (800da84 <expf+0x44>)
 800da56:	f7f3 fb53 	bl	8001100 <__aeabi_fcmpgt>
 800da5a:	b138      	cbz	r0, 800da6c <expf+0x2c>
 800da5c:	f7fe f914 	bl	800bc88 <__errno>
 800da60:	2322      	movs	r3, #34	@ 0x22
 800da62:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800da66:	6003      	str	r3, [r0, #0]
 800da68:	4620      	mov	r0, r4
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	4628      	mov	r0, r5
 800da6e:	4906      	ldr	r1, [pc, #24]	@ (800da88 <expf+0x48>)
 800da70:	f7f3 fb28 	bl	80010c4 <__aeabi_fcmplt>
 800da74:	2800      	cmp	r0, #0
 800da76:	d0f7      	beq.n	800da68 <expf+0x28>
 800da78:	f7fe f906 	bl	800bc88 <__errno>
 800da7c:	2322      	movs	r3, #34	@ 0x22
 800da7e:	2400      	movs	r4, #0
 800da80:	6003      	str	r3, [r0, #0]
 800da82:	e7f1      	b.n	800da68 <expf+0x28>
 800da84:	42b17217 	.word	0x42b17217
 800da88:	c2cff1b5 	.word	0xc2cff1b5

0800da8c <logf>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4604      	mov	r4, r0
 800da90:	f000 fc2c 	bl	800e2ec <__ieee754_logf>
 800da94:	4621      	mov	r1, r4
 800da96:	4605      	mov	r5, r0
 800da98:	4620      	mov	r0, r4
 800da9a:	f7f3 fb3b 	bl	8001114 <__aeabi_fcmpun>
 800da9e:	b970      	cbnz	r0, 800dabe <logf+0x32>
 800daa0:	2100      	movs	r1, #0
 800daa2:	4620      	mov	r0, r4
 800daa4:	f7f3 fb2c 	bl	8001100 <__aeabi_fcmpgt>
 800daa8:	b948      	cbnz	r0, 800dabe <logf+0x32>
 800daaa:	2100      	movs	r1, #0
 800daac:	4620      	mov	r0, r4
 800daae:	f7f3 faff 	bl	80010b0 <__aeabi_fcmpeq>
 800dab2:	b130      	cbz	r0, 800dac2 <logf+0x36>
 800dab4:	f7fe f8e8 	bl	800bc88 <__errno>
 800dab8:	2322      	movs	r3, #34	@ 0x22
 800daba:	4d06      	ldr	r5, [pc, #24]	@ (800dad4 <logf+0x48>)
 800dabc:	6003      	str	r3, [r0, #0]
 800dabe:	4628      	mov	r0, r5
 800dac0:	bd38      	pop	{r3, r4, r5, pc}
 800dac2:	f7fe f8e1 	bl	800bc88 <__errno>
 800dac6:	2321      	movs	r3, #33	@ 0x21
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	4803      	ldr	r0, [pc, #12]	@ (800dad8 <logf+0x4c>)
 800dacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad0:	f000 ba6c 	b.w	800dfac <nanf>
 800dad4:	ff800000 	.word	0xff800000
 800dad8:	0800f16e 	.word	0x0800f16e

0800dadc <sqrtf>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4605      	mov	r5, r0
 800dae0:	f000 fa98 	bl	800e014 <__ieee754_sqrtf>
 800dae4:	4629      	mov	r1, r5
 800dae6:	4604      	mov	r4, r0
 800dae8:	4628      	mov	r0, r5
 800daea:	f7f3 fb13 	bl	8001114 <__aeabi_fcmpun>
 800daee:	b968      	cbnz	r0, 800db0c <sqrtf+0x30>
 800daf0:	2100      	movs	r1, #0
 800daf2:	4628      	mov	r0, r5
 800daf4:	f7f3 fae6 	bl	80010c4 <__aeabi_fcmplt>
 800daf8:	b140      	cbz	r0, 800db0c <sqrtf+0x30>
 800dafa:	f7fe f8c5 	bl	800bc88 <__errno>
 800dafe:	2321      	movs	r3, #33	@ 0x21
 800db00:	2100      	movs	r1, #0
 800db02:	6003      	str	r3, [r0, #0]
 800db04:	4608      	mov	r0, r1
 800db06:	f7f3 f9f3 	bl	8000ef0 <__aeabi_fdiv>
 800db0a:	4604      	mov	r4, r0
 800db0c:	4620      	mov	r0, r4
 800db0e:	bd38      	pop	{r3, r4, r5, pc}

0800db10 <expm1>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	4dcc      	ldr	r5, [pc, #816]	@ (800de48 <expm1+0x338>)
 800db16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db1a:	42ab      	cmp	r3, r5
 800db1c:	4682      	mov	sl, r0
 800db1e:	468b      	mov	fp, r1
 800db20:	b085      	sub	sp, #20
 800db22:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800db26:	d93e      	bls.n	800dba6 <expm1+0x96>
 800db28:	4dc8      	ldr	r5, [pc, #800]	@ (800de4c <expm1+0x33c>)
 800db2a:	42ab      	cmp	r3, r5
 800db2c:	d91f      	bls.n	800db6e <expm1+0x5e>
 800db2e:	4dc8      	ldr	r5, [pc, #800]	@ (800de50 <expm1+0x340>)
 800db30:	42ab      	cmp	r3, r5
 800db32:	d910      	bls.n	800db56 <expm1+0x46>
 800db34:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800db38:	4302      	orrs	r2, r0
 800db3a:	d004      	beq.n	800db46 <expm1+0x36>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	f7f2 fb36 	bl	80001b0 <__adddf3>
 800db44:	e123      	b.n	800dd8e <expm1+0x27e>
 800db46:	2c00      	cmp	r4, #0
 800db48:	f000 8123 	beq.w	800dd92 <expm1+0x282>
 800db4c:	f04f 0a00 	mov.w	sl, #0
 800db50:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800de54 <expm1+0x344>
 800db54:	e11d      	b.n	800dd92 <expm1+0x282>
 800db56:	a3a4      	add	r3, pc, #656	@ (adr r3, 800dde8 <expm1+0x2d8>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 ff6e 	bl	8000a3c <__aeabi_dcmpgt>
 800db60:	b128      	cbz	r0, 800db6e <expm1+0x5e>
 800db62:	2000      	movs	r0, #0
 800db64:	b005      	add	sp, #20
 800db66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6a:	f000 ba12 	b.w	800df92 <__math_oflow>
 800db6e:	2c00      	cmp	r4, #0
 800db70:	f000 80c5 	beq.w	800dcfe <expm1+0x1ee>
 800db74:	a39e      	add	r3, pc, #632	@ (adr r3, 800ddf0 <expm1+0x2e0>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	4650      	mov	r0, sl
 800db7c:	4659      	mov	r1, fp
 800db7e:	f7f2 fb17 	bl	80001b0 <__adddf3>
 800db82:	2200      	movs	r2, #0
 800db84:	2300      	movs	r3, #0
 800db86:	f7f2 ff3b 	bl	8000a00 <__aeabi_dcmplt>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d1de      	bne.n	800db4c <expm1+0x3c>
 800db8e:	a39a      	add	r3, pc, #616	@ (adr r3, 800ddf8 <expm1+0x2e8>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	4650      	mov	r0, sl
 800db96:	4659      	mov	r1, fp
 800db98:	f7f2 fcc0 	bl	800051c <__aeabi_dmul>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	2000      	movs	r0, #0
 800dba2:	49ad      	ldr	r1, [pc, #692]	@ (800de58 <expm1+0x348>)
 800dba4:	e0b6      	b.n	800dd14 <expm1+0x204>
 800dba6:	4aad      	ldr	r2, [pc, #692]	@ (800de5c <expm1+0x34c>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	f240 80de 	bls.w	800dd6a <expm1+0x25a>
 800dbae:	4aac      	ldr	r2, [pc, #688]	@ (800de60 <expm1+0x350>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	f200 80cf 	bhi.w	800dd54 <expm1+0x244>
 800dbb6:	a392      	add	r3, pc, #584	@ (adr r3, 800de00 <expm1+0x2f0>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	2c00      	cmp	r4, #0
 800dbbe:	f040 8093 	bne.w	800dce8 <expm1+0x1d8>
 800dbc2:	f20f 2944 	addw	r9, pc, #580	@ 0x244
 800dbc6:	e9d9 8900 	ldrd	r8, r9, [r9]
 800dbca:	f7f2 faef 	bl	80001ac <__aeabi_dsub>
 800dbce:	2401      	movs	r4, #1
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	460f      	mov	r7, r1
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	464b      	mov	r3, r9
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4639      	mov	r1, r7
 800dbdc:	f7f2 fae6 	bl	80001ac <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4682      	mov	sl, r0
 800dbe6:	468b      	mov	fp, r1
 800dbe8:	4630      	mov	r0, r6
 800dbea:	4639      	mov	r1, r7
 800dbec:	f7f2 fade 	bl	80001ac <__aeabi_dsub>
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	464b      	mov	r3, r9
 800dbf4:	f7f2 fada 	bl	80001ac <__aeabi_dsub>
 800dbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	4b99      	ldr	r3, [pc, #612]	@ (800de64 <expm1+0x354>)
 800dc00:	4650      	mov	r0, sl
 800dc02:	4659      	mov	r1, fp
 800dc04:	f7f2 fc8a 	bl	800051c <__aeabi_dmul>
 800dc08:	4606      	mov	r6, r0
 800dc0a:	460f      	mov	r7, r1
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4650      	mov	r0, sl
 800dc12:	4659      	mov	r1, fp
 800dc14:	f7f2 fc82 	bl	800051c <__aeabi_dmul>
 800dc18:	a37d      	add	r3, pc, #500	@ (adr r3, 800de10 <expm1+0x300>)
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	4680      	mov	r8, r0
 800dc20:	4689      	mov	r9, r1
 800dc22:	f7f2 fc7b 	bl	800051c <__aeabi_dmul>
 800dc26:	a37c      	add	r3, pc, #496	@ (adr r3, 800de18 <expm1+0x308>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f7f2 fac0 	bl	80001b0 <__adddf3>
 800dc30:	4642      	mov	r2, r8
 800dc32:	464b      	mov	r3, r9
 800dc34:	f7f2 fc72 	bl	800051c <__aeabi_dmul>
 800dc38:	a379      	add	r3, pc, #484	@ (adr r3, 800de20 <expm1+0x310>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7f2 fab5 	bl	80001ac <__aeabi_dsub>
 800dc42:	4642      	mov	r2, r8
 800dc44:	464b      	mov	r3, r9
 800dc46:	f7f2 fc69 	bl	800051c <__aeabi_dmul>
 800dc4a:	a377      	add	r3, pc, #476	@ (adr r3, 800de28 <expm1+0x318>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 faae 	bl	80001b0 <__adddf3>
 800dc54:	4642      	mov	r2, r8
 800dc56:	464b      	mov	r3, r9
 800dc58:	f7f2 fc60 	bl	800051c <__aeabi_dmul>
 800dc5c:	a374      	add	r3, pc, #464	@ (adr r3, 800de30 <expm1+0x320>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f7f2 faa3 	bl	80001ac <__aeabi_dsub>
 800dc66:	4642      	mov	r2, r8
 800dc68:	464b      	mov	r3, r9
 800dc6a:	f7f2 fc57 	bl	800051c <__aeabi_dmul>
 800dc6e:	2200      	movs	r2, #0
 800dc70:	4b7d      	ldr	r3, [pc, #500]	@ (800de68 <expm1+0x358>)
 800dc72:	f7f2 fa9d 	bl	80001b0 <__adddf3>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc7e:	4630      	mov	r0, r6
 800dc80:	4639      	mov	r1, r7
 800dc82:	f7f2 fc4b 	bl	800051c <__aeabi_dmul>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	4977      	ldr	r1, [pc, #476]	@ (800de6c <expm1+0x35c>)
 800dc8e:	f7f2 fa8d 	bl	80001ac <__aeabi_dsub>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	4606      	mov	r6, r0
 800dc98:	460f      	mov	r7, r1
 800dc9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc9e:	f7f2 fa85 	bl	80001ac <__aeabi_dsub>
 800dca2:	4632      	mov	r2, r6
 800dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dca8:	463b      	mov	r3, r7
 800dcaa:	4650      	mov	r0, sl
 800dcac:	4659      	mov	r1, fp
 800dcae:	f7f2 fc35 	bl	800051c <__aeabi_dmul>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	496d      	ldr	r1, [pc, #436]	@ (800de70 <expm1+0x360>)
 800dcba:	f7f2 fa77 	bl	80001ac <__aeabi_dsub>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcc6:	f7f2 fd53 	bl	8000770 <__aeabi_ddiv>
 800dcca:	4642      	mov	r2, r8
 800dccc:	464b      	mov	r3, r9
 800dcce:	f7f2 fc25 	bl	800051c <__aeabi_dmul>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	2c00      	cmp	r4, #0
 800dcd8:	d162      	bne.n	800dda0 <expm1+0x290>
 800dcda:	4650      	mov	r0, sl
 800dcdc:	4659      	mov	r1, fp
 800dcde:	f7f2 fc1d 	bl	800051c <__aeabi_dmul>
 800dce2:	4642      	mov	r2, r8
 800dce4:	464b      	mov	r3, r9
 800dce6:	e04a      	b.n	800dd7e <expm1+0x26e>
 800dce8:	f7f2 fa62 	bl	80001b0 <__adddf3>
 800dcec:	f20f 1948 	addw	r9, pc, #328	@ 0x148
 800dcf0:	e9d9 8900 	ldrd	r8, r9, [r9]
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460f      	mov	r7, r1
 800dcf8:	f04f 34ff 	mov.w	r4, #4294967295
 800dcfc:	e76a      	b.n	800dbd4 <expm1+0xc4>
 800dcfe:	a33e      	add	r3, pc, #248	@ (adr r3, 800ddf8 <expm1+0x2e8>)
 800dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd04:	4650      	mov	r0, sl
 800dd06:	4659      	mov	r1, fp
 800dd08:	f7f2 fc08 	bl	800051c <__aeabi_dmul>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	2000      	movs	r0, #0
 800dd12:	4954      	ldr	r1, [pc, #336]	@ (800de64 <expm1+0x354>)
 800dd14:	f7f2 fa4c 	bl	80001b0 <__adddf3>
 800dd18:	f7f2 feb0 	bl	8000a7c <__aeabi_d2iz>
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	f7f2 fb93 	bl	8000448 <__aeabi_i2d>
 800dd22:	a337      	add	r3, pc, #220	@ (adr r3, 800de00 <expm1+0x2f0>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	4680      	mov	r8, r0
 800dd2a:	4689      	mov	r9, r1
 800dd2c:	f7f2 fbf6 	bl	800051c <__aeabi_dmul>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4650      	mov	r0, sl
 800dd36:	4659      	mov	r1, fp
 800dd38:	f7f2 fa38 	bl	80001ac <__aeabi_dsub>
 800dd3c:	a332      	add	r3, pc, #200	@ (adr r3, 800de08 <expm1+0x2f8>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	4606      	mov	r6, r0
 800dd44:	460f      	mov	r7, r1
 800dd46:	4640      	mov	r0, r8
 800dd48:	4649      	mov	r1, r9
 800dd4a:	f7f2 fbe7 	bl	800051c <__aeabi_dmul>
 800dd4e:	4680      	mov	r8, r0
 800dd50:	4689      	mov	r9, r1
 800dd52:	e73f      	b.n	800dbd4 <expm1+0xc4>
 800dd54:	a328      	add	r3, pc, #160	@ (adr r3, 800ddf8 <expm1+0x2e8>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f7f2 fbdf 	bl	800051c <__aeabi_dmul>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	2c00      	cmp	r4, #0
 800dd64:	f47f af1c 	bne.w	800dba0 <expm1+0x90>
 800dd68:	e7d2      	b.n	800dd10 <expm1+0x200>
 800dd6a:	4a42      	ldr	r2, [pc, #264]	@ (800de74 <expm1+0x364>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d815      	bhi.n	800dd9c <expm1+0x28c>
 800dd70:	a333      	add	r3, pc, #204	@ (adr r3, 800de40 <expm1+0x330>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 fa1b 	bl	80001b0 <__adddf3>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	f7f2 fa15 	bl	80001ac <__aeabi_dsub>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4650      	mov	r0, sl
 800dd88:	4659      	mov	r1, fp
 800dd8a:	f7f2 fa0f 	bl	80001ac <__aeabi_dsub>
 800dd8e:	4682      	mov	sl, r0
 800dd90:	468b      	mov	fp, r1
 800dd92:	4650      	mov	r0, sl
 800dd94:	4659      	mov	r1, fp
 800dd96:	b005      	add	sp, #20
 800dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9c:	2400      	movs	r4, #0
 800dd9e:	e72d      	b.n	800dbfc <expm1+0xec>
 800dda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda4:	f7f2 fa02 	bl	80001ac <__aeabi_dsub>
 800dda8:	4652      	mov	r2, sl
 800ddaa:	465b      	mov	r3, fp
 800ddac:	f7f2 fbb6 	bl	800051c <__aeabi_dmul>
 800ddb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddb4:	f7f2 f9fa 	bl	80001ac <__aeabi_dsub>
 800ddb8:	464b      	mov	r3, r9
 800ddba:	4642      	mov	r2, r8
 800ddbc:	f7f2 f9f6 	bl	80001ac <__aeabi_dsub>
 800ddc0:	1c63      	adds	r3, r4, #1
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	460f      	mov	r7, r1
 800ddc6:	d157      	bne.n	800de78 <expm1+0x368>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4650      	mov	r0, sl
 800ddce:	4659      	mov	r1, fp
 800ddd0:	f7f2 f9ec 	bl	80001ac <__aeabi_dsub>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	4b23      	ldr	r3, [pc, #140]	@ (800de64 <expm1+0x354>)
 800ddd8:	f7f2 fba0 	bl	800051c <__aeabi_dmul>
 800dddc:	2200      	movs	r2, #0
 800ddde:	4b21      	ldr	r3, [pc, #132]	@ (800de64 <expm1+0x354>)
 800dde0:	e7d3      	b.n	800dd8a <expm1+0x27a>
 800dde2:	bf00      	nop
 800dde4:	f3af 8000 	nop.w
 800dde8:	fefa39ef 	.word	0xfefa39ef
 800ddec:	40862e42 	.word	0x40862e42
 800ddf0:	c2f8f359 	.word	0xc2f8f359
 800ddf4:	01a56e1f 	.word	0x01a56e1f
 800ddf8:	652b82fe 	.word	0x652b82fe
 800ddfc:	3ff71547 	.word	0x3ff71547
 800de00:	fee00000 	.word	0xfee00000
 800de04:	3fe62e42 	.word	0x3fe62e42
 800de08:	35793c76 	.word	0x35793c76
 800de0c:	3dea39ef 	.word	0x3dea39ef
 800de10:	6e09c32d 	.word	0x6e09c32d
 800de14:	be8afdb7 	.word	0xbe8afdb7
 800de18:	86e65239 	.word	0x86e65239
 800de1c:	3ed0cfca 	.word	0x3ed0cfca
 800de20:	9eaadbb7 	.word	0x9eaadbb7
 800de24:	3f14ce19 	.word	0x3f14ce19
 800de28:	19fe5585 	.word	0x19fe5585
 800de2c:	3f5a01a0 	.word	0x3f5a01a0
 800de30:	111110f4 	.word	0x111110f4
 800de34:	3fa11111 	.word	0x3fa11111
 800de38:	35793c76 	.word	0x35793c76
 800de3c:	bdea39ef 	.word	0xbdea39ef
 800de40:	8800759c 	.word	0x8800759c
 800de44:	7e37e43c 	.word	0x7e37e43c
 800de48:	40436879 	.word	0x40436879
 800de4c:	40862e41 	.word	0x40862e41
 800de50:	7fefffff 	.word	0x7fefffff
 800de54:	bff00000 	.word	0xbff00000
 800de58:	bfe00000 	.word	0xbfe00000
 800de5c:	3fd62e42 	.word	0x3fd62e42
 800de60:	3ff0a2b1 	.word	0x3ff0a2b1
 800de64:	3fe00000 	.word	0x3fe00000
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	40080000 	.word	0x40080000
 800de70:	40180000 	.word	0x40180000
 800de74:	3c8fffff 	.word	0x3c8fffff
 800de78:	2c01      	cmp	r4, #1
 800de7a:	d125      	bne.n	800dec8 <expm1+0x3b8>
 800de7c:	2200      	movs	r2, #0
 800de7e:	4650      	mov	r0, sl
 800de80:	4659      	mov	r1, fp
 800de82:	4b32      	ldr	r3, [pc, #200]	@ (800df4c <expm1+0x43c>)
 800de84:	f7f2 fdbc 	bl	8000a00 <__aeabi_dcmplt>
 800de88:	b188      	cbz	r0, 800deae <expm1+0x39e>
 800de8a:	2200      	movs	r2, #0
 800de8c:	4650      	mov	r0, sl
 800de8e:	4659      	mov	r1, fp
 800de90:	4b2f      	ldr	r3, [pc, #188]	@ (800df50 <expm1+0x440>)
 800de92:	f7f2 f98d 	bl	80001b0 <__adddf3>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4630      	mov	r0, r6
 800de9c:	4639      	mov	r1, r7
 800de9e:	f7f2 f985 	bl	80001ac <__aeabi_dsub>
 800dea2:	2200      	movs	r2, #0
 800dea4:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800dea8:	f7f2 fb38 	bl	800051c <__aeabi_dmul>
 800deac:	e76f      	b.n	800dd8e <expm1+0x27e>
 800deae:	4632      	mov	r2, r6
 800deb0:	463b      	mov	r3, r7
 800deb2:	4650      	mov	r0, sl
 800deb4:	4659      	mov	r1, fp
 800deb6:	f7f2 f979 	bl	80001ac <__aeabi_dsub>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	f7f2 f977 	bl	80001b0 <__adddf3>
 800dec2:	2200      	movs	r2, #0
 800dec4:	4b23      	ldr	r3, [pc, #140]	@ (800df54 <expm1+0x444>)
 800dec6:	e63b      	b.n	800db40 <expm1+0x30>
 800dec8:	1c63      	adds	r3, r4, #1
 800deca:	2b39      	cmp	r3, #57	@ 0x39
 800decc:	ea4f 5504 	mov.w	r5, r4, lsl #20
 800ded0:	d90e      	bls.n	800def0 <expm1+0x3e0>
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	f7f2 f969 	bl	80001ac <__aeabi_dsub>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	2000      	movs	r0, #0
 800dee0:	491c      	ldr	r1, [pc, #112]	@ (800df54 <expm1+0x444>)
 800dee2:	f7f2 f963 	bl	80001ac <__aeabi_dsub>
 800dee6:	186b      	adds	r3, r5, r1
 800dee8:	4619      	mov	r1, r3
 800deea:	2200      	movs	r2, #0
 800deec:	4b19      	ldr	r3, [pc, #100]	@ (800df54 <expm1+0x444>)
 800deee:	e74c      	b.n	800dd8a <expm1+0x27a>
 800def0:	2c13      	cmp	r4, #19
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	dc17      	bgt.n	800df28 <expm1+0x418>
 800def8:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 800defc:	fa46 f404 	asr.w	r4, r6, r4
 800df00:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800df04:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800df08:	4616      	mov	r6, r2
 800df0a:	461f      	mov	r7, r3
 800df0c:	4652      	mov	r2, sl
 800df0e:	465b      	mov	r3, fp
 800df10:	f7f2 f94c 	bl	80001ac <__aeabi_dsub>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 f946 	bl	80001ac <__aeabi_dsub>
 800df20:	4682      	mov	sl, r0
 800df22:	eb05 0b01 	add.w	fp, r5, r1
 800df26:	e734      	b.n	800dd92 <expm1+0x282>
 800df28:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 800df2c:	3403      	adds	r4, #3
 800df2e:	0523      	lsls	r3, r4, #20
 800df30:	f7f2 f93e 	bl	80001b0 <__adddf3>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4650      	mov	r0, sl
 800df3a:	4659      	mov	r1, fp
 800df3c:	f7f2 f936 	bl	80001ac <__aeabi_dsub>
 800df40:	2200      	movs	r2, #0
 800df42:	4b04      	ldr	r3, [pc, #16]	@ (800df54 <expm1+0x444>)
 800df44:	f7f2 f934 	bl	80001b0 <__adddf3>
 800df48:	e7ea      	b.n	800df20 <expm1+0x410>
 800df4a:	bf00      	nop
 800df4c:	bfd00000 	.word	0xbfd00000
 800df50:	3fe00000 	.word	0x3fe00000
 800df54:	3ff00000 	.word	0x3ff00000

0800df58 <with_errno>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4604      	mov	r4, r0
 800df5c:	460d      	mov	r5, r1
 800df5e:	4616      	mov	r6, r2
 800df60:	f7fd fe92 	bl	800bc88 <__errno>
 800df64:	4629      	mov	r1, r5
 800df66:	6006      	str	r6, [r0, #0]
 800df68:	4620      	mov	r0, r4
 800df6a:	bd70      	pop	{r4, r5, r6, pc}

0800df6c <xflow>:
 800df6c:	b513      	push	{r0, r1, r4, lr}
 800df6e:	4604      	mov	r4, r0
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	b10c      	cbz	r4, 800df7a <xflow+0xe>
 800df76:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800df7a:	e9cd 2300 	strd	r2, r3, [sp]
 800df7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df82:	f7f2 facb 	bl	800051c <__aeabi_dmul>
 800df86:	2222      	movs	r2, #34	@ 0x22
 800df88:	b002      	add	sp, #8
 800df8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df8e:	f7ff bfe3 	b.w	800df58 <with_errno>

0800df92 <__math_oflow>:
 800df92:	2200      	movs	r2, #0
 800df94:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800df98:	f7ff bfe8 	b.w	800df6c <xflow>

0800df9c <finitef>:
 800df9c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dfa0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800dfa4:	bfac      	ite	ge
 800dfa6:	2000      	movge	r0, #0
 800dfa8:	2001      	movlt	r0, #1
 800dfaa:	4770      	bx	lr

0800dfac <nanf>:
 800dfac:	4800      	ldr	r0, [pc, #0]	@ (800dfb0 <nanf+0x4>)
 800dfae:	4770      	bx	lr
 800dfb0:	7fc00000 	.word	0x7fc00000

0800dfb4 <fminf>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	f000 f811 	bl	800dfe0 <__fpclassifyf>
 800dfbe:	b910      	cbnz	r0, 800dfc6 <fminf+0x12>
 800dfc0:	462c      	mov	r4, r5
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	bd38      	pop	{r3, r4, r5, pc}
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 f80a 	bl	800dfe0 <__fpclassifyf>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d0f8      	beq.n	800dfc2 <fminf+0xe>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7f3 f876 	bl	80010c4 <__aeabi_fcmplt>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d0f1      	beq.n	800dfc0 <fminf+0xc>
 800dfdc:	e7f1      	b.n	800dfc2 <fminf+0xe>
	...

0800dfe0 <__fpclassifyf>:
 800dfe0:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800dfe4:	d00d      	beq.n	800e002 <__fpclassifyf+0x22>
 800dfe6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800dfea:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800dfee:	d30a      	bcc.n	800e006 <__fpclassifyf+0x26>
 800dff0:	4b07      	ldr	r3, [pc, #28]	@ (800e010 <__fpclassifyf+0x30>)
 800dff2:	1e42      	subs	r2, r0, #1
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d908      	bls.n	800e00a <__fpclassifyf+0x2a>
 800dff8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800dffc:	4258      	negs	r0, r3
 800dffe:	4158      	adcs	r0, r3
 800e000:	4770      	bx	lr
 800e002:	2002      	movs	r0, #2
 800e004:	4770      	bx	lr
 800e006:	2004      	movs	r0, #4
 800e008:	4770      	bx	lr
 800e00a:	2003      	movs	r0, #3
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	007ffffe 	.word	0x007ffffe

0800e014 <__ieee754_sqrtf>:
 800e014:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800e018:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	4603      	mov	r3, r0
 800e022:	4604      	mov	r4, r0
 800e024:	d30a      	bcc.n	800e03c <__ieee754_sqrtf+0x28>
 800e026:	4601      	mov	r1, r0
 800e028:	f7f2 feae 	bl	8000d88 <__aeabi_fmul>
 800e02c:	4601      	mov	r1, r0
 800e02e:	4620      	mov	r0, r4
 800e030:	f7f2 fda2 	bl	8000b78 <__addsf3>
 800e034:	4604      	mov	r4, r0
 800e036:	4620      	mov	r0, r4
 800e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e03c:	2a00      	cmp	r2, #0
 800e03e:	d0fa      	beq.n	800e036 <__ieee754_sqrtf+0x22>
 800e040:	2800      	cmp	r0, #0
 800e042:	da06      	bge.n	800e052 <__ieee754_sqrtf+0x3e>
 800e044:	4601      	mov	r1, r0
 800e046:	f7f2 fd95 	bl	8000b74 <__aeabi_fsub>
 800e04a:	4601      	mov	r1, r0
 800e04c:	f7f2 ff50 	bl	8000ef0 <__aeabi_fdiv>
 800e050:	e7f0      	b.n	800e034 <__ieee754_sqrtf+0x20>
 800e052:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800e056:	d03c      	beq.n	800e0d2 <__ieee754_sqrtf+0xbe>
 800e058:	15c2      	asrs	r2, r0, #23
 800e05a:	2400      	movs	r4, #0
 800e05c:	2019      	movs	r0, #25
 800e05e:	4626      	mov	r6, r4
 800e060:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800e064:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e068:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800e06c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e070:	07d2      	lsls	r2, r2, #31
 800e072:	bf58      	it	pl
 800e074:	005b      	lslpl	r3, r3, #1
 800e076:	106d      	asrs	r5, r5, #1
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	1872      	adds	r2, r6, r1
 800e07c:	429a      	cmp	r2, r3
 800e07e:	bfcf      	iteee	gt
 800e080:	461a      	movgt	r2, r3
 800e082:	1856      	addle	r6, r2, r1
 800e084:	1864      	addle	r4, r4, r1
 800e086:	1a9a      	suble	r2, r3, r2
 800e088:	3801      	subs	r0, #1
 800e08a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800e08e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e092:	d1f2      	bne.n	800e07a <__ieee754_sqrtf+0x66>
 800e094:	b1ba      	cbz	r2, 800e0c6 <__ieee754_sqrtf+0xb2>
 800e096:	4e15      	ldr	r6, [pc, #84]	@ (800e0ec <__ieee754_sqrtf+0xd8>)
 800e098:	4f15      	ldr	r7, [pc, #84]	@ (800e0f0 <__ieee754_sqrtf+0xdc>)
 800e09a:	6830      	ldr	r0, [r6, #0]
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	f7f2 fd69 	bl	8000b74 <__aeabi_fsub>
 800e0a2:	f8d6 8000 	ldr.w	r8, [r6]
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	4640      	mov	r0, r8
 800e0aa:	f7f3 f815 	bl	80010d8 <__aeabi_fcmple>
 800e0ae:	b150      	cbz	r0, 800e0c6 <__ieee754_sqrtf+0xb2>
 800e0b0:	6830      	ldr	r0, [r6, #0]
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	f7f2 fd60 	bl	8000b78 <__addsf3>
 800e0b8:	6836      	ldr	r6, [r6, #0]
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7f3 f801 	bl	80010c4 <__aeabi_fcmplt>
 800e0c2:	b170      	cbz	r0, 800e0e2 <__ieee754_sqrtf+0xce>
 800e0c4:	3402      	adds	r4, #2
 800e0c6:	1064      	asrs	r4, r4, #1
 800e0c8:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800e0cc:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800e0d0:	e7b1      	b.n	800e036 <__ieee754_sqrtf+0x22>
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	0218      	lsls	r0, r3, #8
 800e0d6:	460a      	mov	r2, r1
 800e0d8:	f101 0101 	add.w	r1, r1, #1
 800e0dc:	d5f9      	bpl.n	800e0d2 <__ieee754_sqrtf+0xbe>
 800e0de:	4252      	negs	r2, r2
 800e0e0:	e7bb      	b.n	800e05a <__ieee754_sqrtf+0x46>
 800e0e2:	3401      	adds	r4, #1
 800e0e4:	f024 0401 	bic.w	r4, r4, #1
 800e0e8:	e7ed      	b.n	800e0c6 <__ieee754_sqrtf+0xb2>
 800e0ea:	bf00      	nop
 800e0ec:	0800f394 	.word	0x0800f394
 800e0f0:	0800f390 	.word	0x0800f390

0800e0f4 <fabs>:
 800e0f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4770      	bx	lr

0800e0fc <__ieee754_expf>:
 800e0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e100:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e104:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e108:	4604      	mov	r4, r0
 800e10a:	d904      	bls.n	800e116 <__ieee754_expf+0x1a>
 800e10c:	4601      	mov	r1, r0
 800e10e:	f7f2 fd33 	bl	8000b78 <__addsf3>
 800e112:	4604      	mov	r4, r0
 800e114:	e005      	b.n	800e122 <__ieee754_expf+0x26>
 800e116:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800e11a:	d105      	bne.n	800e128 <__ieee754_expf+0x2c>
 800e11c:	2e00      	cmp	r6, #0
 800e11e:	f040 80c3 	bne.w	800e2a8 <__ieee754_expf+0x1ac>
 800e122:	4620      	mov	r0, r4
 800e124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e128:	4960      	ldr	r1, [pc, #384]	@ (800e2ac <__ieee754_expf+0x1b0>)
 800e12a:	4288      	cmp	r0, r1
 800e12c:	dd04      	ble.n	800e138 <__ieee754_expf+0x3c>
 800e12e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e132:	2000      	movs	r0, #0
 800e134:	f000 ba21 	b.w	800e57a <__math_oflowf>
 800e138:	2800      	cmp	r0, #0
 800e13a:	da07      	bge.n	800e14c <__ieee754_expf+0x50>
 800e13c:	4a5c      	ldr	r2, [pc, #368]	@ (800e2b0 <__ieee754_expf+0x1b4>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d904      	bls.n	800e14c <__ieee754_expf+0x50>
 800e142:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e146:	2000      	movs	r0, #0
 800e148:	f000 ba13 	b.w	800e572 <__math_uflowf>
 800e14c:	4a59      	ldr	r2, [pc, #356]	@ (800e2b4 <__ieee754_expf+0x1b8>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d971      	bls.n	800e236 <__ieee754_expf+0x13a>
 800e152:	4a59      	ldr	r2, [pc, #356]	@ (800e2b8 <__ieee754_expf+0x1bc>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d851      	bhi.n	800e1fc <__ieee754_expf+0x100>
 800e158:	4b58      	ldr	r3, [pc, #352]	@ (800e2bc <__ieee754_expf+0x1c0>)
 800e15a:	4620      	mov	r0, r4
 800e15c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e160:	f7f2 fd08 	bl	8000b74 <__aeabi_fsub>
 800e164:	4605      	mov	r5, r0
 800e166:	4b56      	ldr	r3, [pc, #344]	@ (800e2c0 <__ieee754_expf+0x1c4>)
 800e168:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800e16c:	f086 0301 	eor.w	r3, r6, #1
 800e170:	eba3 0806 	sub.w	r8, r3, r6
 800e174:	4639      	mov	r1, r7
 800e176:	4628      	mov	r0, r5
 800e178:	f7f2 fcfc 	bl	8000b74 <__aeabi_fsub>
 800e17c:	4604      	mov	r4, r0
 800e17e:	4621      	mov	r1, r4
 800e180:	4620      	mov	r0, r4
 800e182:	f7f2 fe01 	bl	8000d88 <__aeabi_fmul>
 800e186:	4606      	mov	r6, r0
 800e188:	494e      	ldr	r1, [pc, #312]	@ (800e2c4 <__ieee754_expf+0x1c8>)
 800e18a:	f7f2 fdfd 	bl	8000d88 <__aeabi_fmul>
 800e18e:	494e      	ldr	r1, [pc, #312]	@ (800e2c8 <__ieee754_expf+0x1cc>)
 800e190:	f7f2 fcf0 	bl	8000b74 <__aeabi_fsub>
 800e194:	4631      	mov	r1, r6
 800e196:	f7f2 fdf7 	bl	8000d88 <__aeabi_fmul>
 800e19a:	494c      	ldr	r1, [pc, #304]	@ (800e2cc <__ieee754_expf+0x1d0>)
 800e19c:	f7f2 fcec 	bl	8000b78 <__addsf3>
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	f7f2 fdf1 	bl	8000d88 <__aeabi_fmul>
 800e1a6:	494a      	ldr	r1, [pc, #296]	@ (800e2d0 <__ieee754_expf+0x1d4>)
 800e1a8:	f7f2 fce4 	bl	8000b74 <__aeabi_fsub>
 800e1ac:	4631      	mov	r1, r6
 800e1ae:	f7f2 fdeb 	bl	8000d88 <__aeabi_fmul>
 800e1b2:	4948      	ldr	r1, [pc, #288]	@ (800e2d4 <__ieee754_expf+0x1d8>)
 800e1b4:	f7f2 fce0 	bl	8000b78 <__addsf3>
 800e1b8:	4631      	mov	r1, r6
 800e1ba:	f7f2 fde5 	bl	8000d88 <__aeabi_fmul>
 800e1be:	4601      	mov	r1, r0
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7f2 fcd7 	bl	8000b74 <__aeabi_fsub>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	4606      	mov	r6, r0
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f7f2 fddc 	bl	8000d88 <__aeabi_fmul>
 800e1d0:	4681      	mov	r9, r0
 800e1d2:	f1b8 0f00 	cmp.w	r8, #0
 800e1d6:	d143      	bne.n	800e260 <__ieee754_expf+0x164>
 800e1d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7f2 fcc9 	bl	8000b74 <__aeabi_fsub>
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	4648      	mov	r0, r9
 800e1e6:	f7f2 fe83 	bl	8000ef0 <__aeabi_fdiv>
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	f7f2 fcc2 	bl	8000b74 <__aeabi_fsub>
 800e1f0:	4601      	mov	r1, r0
 800e1f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e1f6:	f7f2 fcbd 	bl	8000b74 <__aeabi_fsub>
 800e1fa:	e78a      	b.n	800e112 <__ieee754_expf+0x16>
 800e1fc:	4936      	ldr	r1, [pc, #216]	@ (800e2d8 <__ieee754_expf+0x1dc>)
 800e1fe:	4620      	mov	r0, r4
 800e200:	f7f2 fdc2 	bl	8000d88 <__aeabi_fmul>
 800e204:	4b35      	ldr	r3, [pc, #212]	@ (800e2dc <__ieee754_expf+0x1e0>)
 800e206:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e20a:	f7f2 fcb5 	bl	8000b78 <__addsf3>
 800e20e:	f7f2 ff97 	bl	8001140 <__aeabi_f2iz>
 800e212:	4680      	mov	r8, r0
 800e214:	f7f2 fd64 	bl	8000ce0 <__aeabi_i2f>
 800e218:	4931      	ldr	r1, [pc, #196]	@ (800e2e0 <__ieee754_expf+0x1e4>)
 800e21a:	4606      	mov	r6, r0
 800e21c:	f7f2 fdb4 	bl	8000d88 <__aeabi_fmul>
 800e220:	4601      	mov	r1, r0
 800e222:	4620      	mov	r0, r4
 800e224:	f7f2 fca6 	bl	8000b74 <__aeabi_fsub>
 800e228:	492e      	ldr	r1, [pc, #184]	@ (800e2e4 <__ieee754_expf+0x1e8>)
 800e22a:	4605      	mov	r5, r0
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7f2 fdab 	bl	8000d88 <__aeabi_fmul>
 800e232:	4607      	mov	r7, r0
 800e234:	e79e      	b.n	800e174 <__ieee754_expf+0x78>
 800e236:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800e23a:	d20c      	bcs.n	800e256 <__ieee754_expf+0x15a>
 800e23c:	492a      	ldr	r1, [pc, #168]	@ (800e2e8 <__ieee754_expf+0x1ec>)
 800e23e:	4620      	mov	r0, r4
 800e240:	f7f2 fc9a 	bl	8000b78 <__addsf3>
 800e244:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e248:	f7f2 ff5a 	bl	8001100 <__aeabi_fcmpgt>
 800e24c:	b130      	cbz	r0, 800e25c <__ieee754_expf+0x160>
 800e24e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e252:	4620      	mov	r0, r4
 800e254:	e75b      	b.n	800e10e <__ieee754_expf+0x12>
 800e256:	f04f 0800 	mov.w	r8, #0
 800e25a:	e790      	b.n	800e17e <__ieee754_expf+0x82>
 800e25c:	4680      	mov	r8, r0
 800e25e:	e78e      	b.n	800e17e <__ieee754_expf+0x82>
 800e260:	4631      	mov	r1, r6
 800e262:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800e266:	f7f2 fc85 	bl	8000b74 <__aeabi_fsub>
 800e26a:	4601      	mov	r1, r0
 800e26c:	4648      	mov	r0, r9
 800e26e:	f7f2 fe3f 	bl	8000ef0 <__aeabi_fdiv>
 800e272:	4601      	mov	r1, r0
 800e274:	4638      	mov	r0, r7
 800e276:	f7f2 fc7d 	bl	8000b74 <__aeabi_fsub>
 800e27a:	4629      	mov	r1, r5
 800e27c:	f7f2 fc7a 	bl	8000b74 <__aeabi_fsub>
 800e280:	4601      	mov	r1, r0
 800e282:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800e286:	f7f2 fc75 	bl	8000b74 <__aeabi_fsub>
 800e28a:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800e28e:	db02      	blt.n	800e296 <__ieee754_expf+0x19a>
 800e290:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800e294:	e745      	b.n	800e122 <__ieee754_expf+0x26>
 800e296:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800e29a:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800e29e:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800e2a2:	f7f2 fd71 	bl	8000d88 <__aeabi_fmul>
 800e2a6:	e734      	b.n	800e112 <__ieee754_expf+0x16>
 800e2a8:	2400      	movs	r4, #0
 800e2aa:	e73a      	b.n	800e122 <__ieee754_expf+0x26>
 800e2ac:	42b17217 	.word	0x42b17217
 800e2b0:	42cff1b5 	.word	0x42cff1b5
 800e2b4:	3eb17218 	.word	0x3eb17218
 800e2b8:	3f851591 	.word	0x3f851591
 800e2bc:	0800f3a0 	.word	0x0800f3a0
 800e2c0:	0800f398 	.word	0x0800f398
 800e2c4:	3331bb4c 	.word	0x3331bb4c
 800e2c8:	35ddea0e 	.word	0x35ddea0e
 800e2cc:	388ab355 	.word	0x388ab355
 800e2d0:	3b360b61 	.word	0x3b360b61
 800e2d4:	3e2aaaab 	.word	0x3e2aaaab
 800e2d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800e2dc:	0800f3a8 	.word	0x0800f3a8
 800e2e0:	3f317180 	.word	0x3f317180
 800e2e4:	3717f7d1 	.word	0x3717f7d1
 800e2e8:	7149f2ca 	.word	0x7149f2ca

0800e2ec <__ieee754_logf>:
 800e2ec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f6:	d106      	bne.n	800e306 <__ieee754_logf+0x1a>
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 800e2fe:	f7f2 fdf7 	bl	8000ef0 <__aeabi_fdiv>
 800e302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	2800      	cmp	r0, #0
 800e308:	4604      	mov	r4, r0
 800e30a:	da03      	bge.n	800e314 <__ieee754_logf+0x28>
 800e30c:	f7f2 fc32 	bl	8000b74 <__aeabi_fsub>
 800e310:	2100      	movs	r1, #0
 800e312:	e7f4      	b.n	800e2fe <__ieee754_logf+0x12>
 800e314:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e318:	db02      	blt.n	800e320 <__ieee754_logf+0x34>
 800e31a:	f7f2 fc2d 	bl	8000b78 <__addsf3>
 800e31e:	e7f0      	b.n	800e302 <__ieee754_logf+0x16>
 800e320:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800e324:	da35      	bge.n	800e392 <__ieee754_logf+0xa6>
 800e326:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800e32a:	f7f2 fd2d 	bl	8000d88 <__aeabi_fmul>
 800e32e:	f06f 0318 	mvn.w	r3, #24
 800e332:	4604      	mov	r4, r0
 800e334:	15e7      	asrs	r7, r4, #23
 800e336:	3f7f      	subs	r7, #127	@ 0x7f
 800e338:	441f      	add	r7, r3
 800e33a:	4b76      	ldr	r3, [pc, #472]	@ (800e514 <__ieee754_logf+0x228>)
 800e33c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e340:	4423      	add	r3, r4
 800e342:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 800e346:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 800e34a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800e34e:	4320      	orrs	r0, r4
 800e350:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 800e354:	f7f2 fc0e 	bl	8000b74 <__aeabi_fsub>
 800e358:	4b6f      	ldr	r3, [pc, #444]	@ (800e518 <__ieee754_logf+0x22c>)
 800e35a:	f104 020f 	add.w	r2, r4, #15
 800e35e:	4013      	ands	r3, r2
 800e360:	4606      	mov	r6, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d143      	bne.n	800e3ee <__ieee754_logf+0x102>
 800e366:	2100      	movs	r1, #0
 800e368:	f7f2 fea2 	bl	80010b0 <__aeabi_fcmpeq>
 800e36c:	b198      	cbz	r0, 800e396 <__ieee754_logf+0xaa>
 800e36e:	2f00      	cmp	r7, #0
 800e370:	f000 80cd 	beq.w	800e50e <__ieee754_logf+0x222>
 800e374:	4638      	mov	r0, r7
 800e376:	f7f2 fcb3 	bl	8000ce0 <__aeabi_i2f>
 800e37a:	4968      	ldr	r1, [pc, #416]	@ (800e51c <__ieee754_logf+0x230>)
 800e37c:	4605      	mov	r5, r0
 800e37e:	f7f2 fd03 	bl	8000d88 <__aeabi_fmul>
 800e382:	4967      	ldr	r1, [pc, #412]	@ (800e520 <__ieee754_logf+0x234>)
 800e384:	4604      	mov	r4, r0
 800e386:	4628      	mov	r0, r5
 800e388:	f7f2 fcfe 	bl	8000d88 <__aeabi_fmul>
 800e38c:	4601      	mov	r1, r0
 800e38e:	4620      	mov	r0, r4
 800e390:	e7c3      	b.n	800e31a <__ieee754_logf+0x2e>
 800e392:	2300      	movs	r3, #0
 800e394:	e7ce      	b.n	800e334 <__ieee754_logf+0x48>
 800e396:	4963      	ldr	r1, [pc, #396]	@ (800e524 <__ieee754_logf+0x238>)
 800e398:	4630      	mov	r0, r6
 800e39a:	f7f2 fcf5 	bl	8000d88 <__aeabi_fmul>
 800e39e:	4601      	mov	r1, r0
 800e3a0:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800e3a4:	f7f2 fbe6 	bl	8000b74 <__aeabi_fsub>
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7f2 fceb 	bl	8000d88 <__aeabi_fmul>
 800e3b2:	4601      	mov	r1, r0
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f7f2 fce7 	bl	8000d88 <__aeabi_fmul>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	b90f      	cbnz	r7, 800e3c2 <__ieee754_logf+0xd6>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	e078      	b.n	800e4b4 <__ieee754_logf+0x1c8>
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	f7f2 fc8c 	bl	8000ce0 <__aeabi_i2f>
 800e3c8:	4954      	ldr	r1, [pc, #336]	@ (800e51c <__ieee754_logf+0x230>)
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	f7f2 fcdc 	bl	8000d88 <__aeabi_fmul>
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	4952      	ldr	r1, [pc, #328]	@ (800e520 <__ieee754_logf+0x234>)
 800e3d6:	f7f2 fcd7 	bl	8000d88 <__aeabi_fmul>
 800e3da:	4601      	mov	r1, r0
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7f2 fbc9 	bl	8000b74 <__aeabi_fsub>
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	f7f2 fbc6 	bl	8000b74 <__aeabi_fsub>
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	e079      	b.n	800e4e2 <__ieee754_logf+0x1f6>
 800e3ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e3f2:	f7f2 fbc1 	bl	8000b78 <__addsf3>
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f7f2 fd79 	bl	8000ef0 <__aeabi_fdiv>
 800e3fe:	4681      	mov	r9, r0
 800e400:	4638      	mov	r0, r7
 800e402:	f7f2 fc6d 	bl	8000ce0 <__aeabi_i2f>
 800e406:	4649      	mov	r1, r9
 800e408:	4680      	mov	r8, r0
 800e40a:	4648      	mov	r0, r9
 800e40c:	f7f2 fcbc 	bl	8000d88 <__aeabi_fmul>
 800e410:	4601      	mov	r1, r0
 800e412:	4682      	mov	sl, r0
 800e414:	f7f2 fcb8 	bl	8000d88 <__aeabi_fmul>
 800e418:	4605      	mov	r5, r0
 800e41a:	4943      	ldr	r1, [pc, #268]	@ (800e528 <__ieee754_logf+0x23c>)
 800e41c:	f7f2 fcb4 	bl	8000d88 <__aeabi_fmul>
 800e420:	4942      	ldr	r1, [pc, #264]	@ (800e52c <__ieee754_logf+0x240>)
 800e422:	f7f2 fba9 	bl	8000b78 <__addsf3>
 800e426:	4629      	mov	r1, r5
 800e428:	f7f2 fcae 	bl	8000d88 <__aeabi_fmul>
 800e42c:	4940      	ldr	r1, [pc, #256]	@ (800e530 <__ieee754_logf+0x244>)
 800e42e:	f7f2 fba3 	bl	8000b78 <__addsf3>
 800e432:	4629      	mov	r1, r5
 800e434:	f7f2 fca8 	bl	8000d88 <__aeabi_fmul>
 800e438:	493e      	ldr	r1, [pc, #248]	@ (800e534 <__ieee754_logf+0x248>)
 800e43a:	f7f2 fb9d 	bl	8000b78 <__addsf3>
 800e43e:	4651      	mov	r1, sl
 800e440:	f7f2 fca2 	bl	8000d88 <__aeabi_fmul>
 800e444:	493c      	ldr	r1, [pc, #240]	@ (800e538 <__ieee754_logf+0x24c>)
 800e446:	4682      	mov	sl, r0
 800e448:	4628      	mov	r0, r5
 800e44a:	f7f2 fc9d 	bl	8000d88 <__aeabi_fmul>
 800e44e:	493b      	ldr	r1, [pc, #236]	@ (800e53c <__ieee754_logf+0x250>)
 800e450:	f7f2 fb92 	bl	8000b78 <__addsf3>
 800e454:	4629      	mov	r1, r5
 800e456:	f7f2 fc97 	bl	8000d88 <__aeabi_fmul>
 800e45a:	4939      	ldr	r1, [pc, #228]	@ (800e540 <__ieee754_logf+0x254>)
 800e45c:	f7f2 fb8c 	bl	8000b78 <__addsf3>
 800e460:	4629      	mov	r1, r5
 800e462:	f7f2 fc91 	bl	8000d88 <__aeabi_fmul>
 800e466:	4601      	mov	r1, r0
 800e468:	4650      	mov	r0, sl
 800e46a:	f7f2 fb85 	bl	8000b78 <__addsf3>
 800e46e:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 800e544 <__ieee754_logf+0x258>
 800e472:	4605      	mov	r5, r0
 800e474:	44a3      	add	fp, r4
 800e476:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 800e47a:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 800e47e:	ea44 040b 	orr.w	r4, r4, fp
 800e482:	2c00      	cmp	r4, #0
 800e484:	dd30      	ble.n	800e4e8 <__ieee754_logf+0x1fc>
 800e486:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7f2 fc7c 	bl	8000d88 <__aeabi_fmul>
 800e490:	4631      	mov	r1, r6
 800e492:	f7f2 fc79 	bl	8000d88 <__aeabi_fmul>
 800e496:	4601      	mov	r1, r0
 800e498:	4604      	mov	r4, r0
 800e49a:	4628      	mov	r0, r5
 800e49c:	f7f2 fb6c 	bl	8000b78 <__addsf3>
 800e4a0:	4649      	mov	r1, r9
 800e4a2:	f7f2 fc71 	bl	8000d88 <__aeabi_fmul>
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	b937      	cbnz	r7, 800e4b8 <__ieee754_logf+0x1cc>
 800e4aa:	4601      	mov	r1, r0
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7f2 fb61 	bl	8000b74 <__aeabi_fsub>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	e014      	b.n	800e4e2 <__ieee754_logf+0x1f6>
 800e4b8:	4918      	ldr	r1, [pc, #96]	@ (800e51c <__ieee754_logf+0x230>)
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	f7f2 fc64 	bl	8000d88 <__aeabi_fmul>
 800e4c0:	4917      	ldr	r1, [pc, #92]	@ (800e520 <__ieee754_logf+0x234>)
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	f7f2 fc5f 	bl	8000d88 <__aeabi_fmul>
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	f7f2 fb54 	bl	8000b78 <__addsf3>
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f7f2 fb4e 	bl	8000b74 <__aeabi_fsub>
 800e4d8:	4631      	mov	r1, r6
 800e4da:	f7f2 fb4b 	bl	8000b74 <__aeabi_fsub>
 800e4de:	4601      	mov	r1, r0
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	f7f2 fb47 	bl	8000b74 <__aeabi_fsub>
 800e4e6:	e70c      	b.n	800e302 <__ieee754_logf+0x16>
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7f2 fb42 	bl	8000b74 <__aeabi_fsub>
 800e4f0:	4649      	mov	r1, r9
 800e4f2:	f7f2 fc49 	bl	8000d88 <__aeabi_fmul>
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	f43f af60 	beq.w	800e3be <__ieee754_logf+0xd2>
 800e4fe:	4907      	ldr	r1, [pc, #28]	@ (800e51c <__ieee754_logf+0x230>)
 800e500:	4640      	mov	r0, r8
 800e502:	f7f2 fc41 	bl	8000d88 <__aeabi_fmul>
 800e506:	4906      	ldr	r1, [pc, #24]	@ (800e520 <__ieee754_logf+0x234>)
 800e508:	4605      	mov	r5, r0
 800e50a:	4640      	mov	r0, r8
 800e50c:	e763      	b.n	800e3d6 <__ieee754_logf+0xea>
 800e50e:	2000      	movs	r0, #0
 800e510:	e6f7      	b.n	800e302 <__ieee754_logf+0x16>
 800e512:	bf00      	nop
 800e514:	004afb20 	.word	0x004afb20
 800e518:	007ffff0 	.word	0x007ffff0
 800e51c:	3f317180 	.word	0x3f317180
 800e520:	3717f7d1 	.word	0x3717f7d1
 800e524:	3eaaaaab 	.word	0x3eaaaaab
 800e528:	3e178897 	.word	0x3e178897
 800e52c:	3e3a3325 	.word	0x3e3a3325
 800e530:	3e924925 	.word	0x3e924925
 800e534:	3f2aaaab 	.word	0x3f2aaaab
 800e538:	3e1cd04f 	.word	0x3e1cd04f
 800e53c:	3e638e29 	.word	0x3e638e29
 800e540:	3ecccccd 	.word	0x3ecccccd
 800e544:	ffcf5c30 	.word	0xffcf5c30

0800e548 <with_errnof>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4604      	mov	r4, r0
 800e54c:	460d      	mov	r5, r1
 800e54e:	f7fd fb9b 	bl	800bc88 <__errno>
 800e552:	6005      	str	r5, [r0, #0]
 800e554:	4620      	mov	r0, r4
 800e556:	bd38      	pop	{r3, r4, r5, pc}

0800e558 <xflowf>:
 800e558:	b508      	push	{r3, lr}
 800e55a:	b140      	cbz	r0, 800e56e <xflowf+0x16>
 800e55c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800e560:	f7f2 fc12 	bl	8000d88 <__aeabi_fmul>
 800e564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e568:	2122      	movs	r1, #34	@ 0x22
 800e56a:	f7ff bfed 	b.w	800e548 <with_errnof>
 800e56e:	4608      	mov	r0, r1
 800e570:	e7f6      	b.n	800e560 <xflowf+0x8>

0800e572 <__math_uflowf>:
 800e572:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800e576:	f7ff bfef 	b.w	800e558 <xflowf>

0800e57a <__math_oflowf>:
 800e57a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800e57e:	f7ff bfeb 	b.w	800e558 <xflowf>
	...

0800e584 <_init>:
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	bf00      	nop
 800e588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58a:	bc08      	pop	{r3}
 800e58c:	469e      	mov	lr, r3
 800e58e:	4770      	bx	lr

0800e590 <_fini>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	bf00      	nop
 800e594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e596:	bc08      	pop	{r3}
 800e598:	469e      	mov	lr, r3
 800e59a:	4770      	bx	lr
